{"subject_name":"Test","subject_id":25,"chapters":[{"chapter_name":"New","topics":[{"topic_name":"check","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-markdown=\"true\" data-markdown-text=\"In Python, **classes** are a fundamental part of object-oriented programming (OOP). They allow you to create your own custom data types by bundling data and functionality together. Classes enable you to model real-world entities, making your code more organized, reusable, and easier to maintain.\n\n## Table of Contents\n1. [Basic Concepts](#basic-concepts)\n2. [Defining a Class](#defining-a-class)\n3. [Creating Instances (Objects)](#creating-instances-objects)\n4. [Attributes and Methods](#attributes-and-methods)\n5. [The `__init__` Method](#__init__-method)\n6. [Inheritance](#inheritance)\n7. [Special Methods](#special-methods)\n8. [Example: A Simple `Car` Class](#example-a-simple-car-class)\n9. [Additional Resources](#additional-resources)\n\n---\n\n## Basic Concepts\n\n- **Class**: A blueprint for creating objects (instances). It defines a set of attributes and methods that the created objects will have.\n- **Object (Instance)**: A specific realization of a class. Each object can have different attribute values.\n- **Attribute**: A variable that belongs to a class or an instance.\n- **Method**: A function that belongs to a class and can operate on its attributes.\n\n## Defining a Class\n\nIn Python, you define a class using the `class` keyword followed by the class name and a colon. By convention, class names use the `PascalCase` naming style.\n\n```python\nclass MyClass:\n    pass  # 'pass' is a placeholder indicating an empty block\n```\n\n## Creating Instances (Objects)\n\nOnce a class is defined, you can create objects (instances) of that class by calling the class name as if it were a function.\n\n```python\nobj = MyClass()\n```\n\n## Attributes and Methods\n\n### Attributes\n\nAttributes are variables that hold data related to the class or its instances.\n\n- **Class Attributes**: Shared across all instances of the class.\n- **Instance Attributes**: Unique to each instance.\n\n### Methods\n\nMethods are functions defined within a class that can perform operations using the class's attributes.\n\n## The `__init__` Method\n\nThe `__init__` method is a special initializer method in Python classes. It's called automatically when a new instance of the class is created. It typically initializes instance attributes.\n\n```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name  # Instance attribute\n        self.age = age    # Instance attribute\n\n    def greet(self):\n        print(f&quot;Hello, my name is {self.name} and I'm {self.age} years old.&quot;)\n```\n\n- `self`: A reference to the current instance of the class. It's used to access attributes and methods of the class.\n\n## Inheritance\n\nInheritance allows a class (child class) to inherit attributes and methods from another class (parent class). This promotes code reusability.\n\n```python\nclass Animal:\n    def __init__(self, species):\n        self.species = species\n\n    def make_sound(self):\n        pass  # To be overridden by subclasses\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__('Dog')  # Call the parent class constructor\n        self.name = name\n\n    def make_sound(self):\n        print(&quot;Woof!&quot;)\n```\n\n- `super()`: A function that returns a temporary object of the parent class, allowing you to call its methods.\n\n## Special Methods\n\nPython classes can define special methods (also known as &quot;dunder&quot; methods, for double underscores) that allow instances to interact with built-in functions and operators.\n\n- `__str__`: Defines the string representation of the object (used by `print`).\n- `__repr__`: Defines the official string representation of the object.\n- `__len__`: Allows the use of `len()` on the object.\n- And many more (`__add__`, `__eq__`, etc.)\n\n```python\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def __str__(self):\n        return f&quot;'{self.title}' by {self.author}&quot;\n```\n\n## Example: A Simple `Car` Class\n\nLet's put it all together with a more comprehensive example.\n\n```python\nclass Car:\n    # Class attribute\n    wheels = 4\n\n    def __init__(self, make, model, year):\n        # Instance attributes\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer = 0  # Default value\n\n    def description(self):\n        return f&quot;{self.year} {self.make} {self.model}&quot;\n\n    def read_odometer(self):\n        print(f&quot;This car has {self.odometer} miles on it.&quot;)\n\n    def update_odometer(self, mileage):\n        if mileage >= self.odometer:\n            self.odometer = mileage\n        else:\n            print(&quot;You can't roll back an odometer!&quot;)\n\n    def increment_odometer(self, miles):\n        if miles >= 0:\n            self.odometer += miles\n        else:\n            print(&quot;You can't increment with negative miles!&quot;)\n\n# Creating an instance of Car\nmy_car = Car('Toyota', 'Corolla', 2020)\n\n# Accessing attributes\nprint(my_car.description())  # Output: 2020 Toyota Corolla\nprint(f&quot;Wheels: {my_car.wheels}&quot;)  # Output: Wheels: 4\n\n# Using methods\nmy_car.read_odometer()  # Output: This car has 0 miles on it.\n\n# Updating the odometer\nmy_car.update_odometer(15000)\nmy_car.read_odometer()  # Output: This car has 15000 miles on it.\n\n# Incrementing the odometer\nmy_car.increment_odometer(500)\nmy_car.read_odometer()  # Output: This car has 15500 miles on it.\n```\n\n### Explanation\n\n1. **Class Attribute (`wheels`)**: Shared by all instances of `Car`.\n2. **Instance Attributes (`make`, `model`, `year`, `odometer`)**: Unique to each `Car` object.\n3. **Methods**:\n   - `description()`: Returns a formatted string with car details.\n   - `read_odometer()`: Prints the current odometer reading.\n   - `update_odometer(mileage)`: Sets the odometer to a new value if it's greater than or equal to the current value.\n   - `increment_odometer(miles)`: Increments the odometer by a given number of miles.\n4. **Creating an Instance (`my_car`)**: Initializes a new `Car` object with specified `make`, `model`, and `year`.\n5. **Interacting with the Object**: Accessing attributes and calling methods to manipulate and retrieve data.\n\n## Best Practices\n\n- **Use Meaningful Names**: Choose descriptive names for classes, methods, and attributes.\n- **Encapsulation**: Keep data (attributes) and code (methods) bundled within classes to hide internal states and require all interaction to be performed through methods.\n- **Inheritance**: Use inheritance to promote code reuse but avoid deep or unnecessary inheritance hierarchies.\n- **Composition Over Inheritance**: Prefer composing objects with instances of other classes instead of inheriting from them when appropriate.\n- **Avoid Using Mutable Default Arguments**: Be cautious when using mutable types (like lists or dictionaries) as default values for attributes.\n\n## Additional Resources\n\n- [Python Official Documentation on Classes](https://docs.python.org/3/tutorial/classes.html)\n- [Real Python's Guide to Python Classes and OOP](https://realpython.com/python3-object-oriented-programming/)\n- [Inheritance in Python](https://www.programiz.com/python-programming/inheritance)\n- [Understanding Python's `self` Parameter](https://stackoverflow.com/questions/1104433/what-is-self)\n\n---\n\nFeel free to ask if you have more specific questions about classes in Python or need further examples!\"><p>In Python, <strong>classes</strong> are a fundamental part of object-oriented programming (OOP). They allow you to create your own custom data types by bundling data and functionality together. Classes enable you to model real-world entities, making your code more organized, reusable, and easier to maintain.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#basic-concepts\">Basic Concepts</a></li>\n<li><a href=\"#defining-a-class\">Defining a Class</a></li>\n<li><a href=\"#creating-instances-objects\">Creating Instances (Objects)</a></li>\n<li><a href=\"#attributes-and-methods\">Attributes and Methods</a></li>\n<li><a href=\"#__init__-method\">The <code>__init__</code> Method</a></li>\n<li><a href=\"#inheritance\">Inheritance</a></li>\n<li><a href=\"#special-methods\">Special Methods</a></li>\n<li><a href=\"#example-a-simple-car-class\">Example: A Simple <code>Car</code> Class</a></li>\n<li><a href=\"#additional-resources\">Additional Resources</a></li>\n</ol>\n<hr>\n<h2>Basic Concepts</h2>\n<ul>\n<li><strong>Class</strong>: A blueprint for creating objects (instances). It defines a set of attributes and methods that the created objects will have.</li>\n<li><strong>Object (Instance)</strong>: A specific realization of a class. Each object can have different attribute values.</li>\n<li><strong>Attribute</strong>: A variable that belongs to a class or an instance.</li>\n<li><strong>Method</strong>: A function that belongs to a class and can operate on its attributes.</li>\n</ul>\n<h2>Defining a Class</h2>\n<p>In Python, you define a class using the <code>class</code> keyword followed by the class name and a colon. By convention, class names use the <code>PascalCase</code> naming style.</p>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># 'pass' is a placeholder indicating an empty block</span>\n</code></pre>\n<h2>Creating Instances (Objects)</h2>\n<p>Once a class is defined, you can create objects (instances) of that class by calling the class name as if it were a function.</p>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\">obj = MyClass()\n</code></pre>\n<h2>Attributes and Methods</h2>\n<h3>Attributes</h3>\n<p>Attributes are variables that hold data related to the class or its instances.</p>\n<ul>\n<li><strong>Class Attributes</strong>: Shared across all instances of the class.</li>\n<li><strong>Instance Attributes</strong>: Unique to each instance.</li>\n</ul>\n<h3>Methods</h3>\n<p>Methods are functions defined within a class that can perform operations using the class's attributes.</p>\n<h2>The <code>__init__</code> Method</h2>\n<p>The <code>__init__</code> method is a special initializer method in Python classes. It's called automatically when a new instance of the class is created. It typically initializes instance attributes.</p>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name  <span class=\"hljs-comment\"># Instance attribute</span>\n        self.age = age    <span class=\"hljs-comment\"># Instance attribute</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Hello, my name is <span class=\"hljs-subst\">{self.name}</span> and I'm <span class=\"hljs-subst\">{self.age}</span> years old.\"</span>)\n</code></pre>\n<ul>\n<li><code>self</code>: A reference to the current instance of the class. It's used to access attributes and methods of the class.</li>\n</ul>\n<h2>Inheritance</h2>\n<p>Inheritance allows a class (child class) to inherit attributes and methods from another class (parent class). This promotes code reusability.</p>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, species</span>):\n        self.species = species\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_sound</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># To be overridden by subclasses</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        <span class=\"hljs-built_in\">super</span>().__init__(<span class=\"hljs-string\">'Dog'</span>)  <span class=\"hljs-comment\"># Call the parent class constructor</span>\n        self.name = name\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_sound</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Woof!\"</span>)\n</code></pre>\n<ul>\n<li><code>super()</code>: A function that returns a temporary object of the parent class, allowing you to call its methods.</li>\n</ul>\n<h2>Special Methods</h2>\n<p>Python classes can define special methods (also known as \"dunder\" methods, for double underscores) that allow instances to interact with built-in functions and operators.</p>\n<ul>\n<li><code>__str__</code>: Defines the string representation of the object (used by <code>print</code>).</li>\n<li><code>__repr__</code>: Defines the official string representation of the object.</li>\n<li><code>__len__</code>: Allows the use of <code>len()</code> on the object.</li>\n<li>And many more (<code>__add__</code>, <code>__eq__</code>, etc.)</li>\n</ul>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, title, author</span>):\n        self.title = title\n        self.author = author\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"'<span class=\"hljs-subst\">{self.title}</span>' by <span class=\"hljs-subst\">{self.author}</span>\"</span>\n</code></pre>\n<h2>Example: A Simple <code>Car</code> Class</h2>\n<p>Let's put it all together with a more comprehensive example.</p>\n<pre class=\"copy-container\"><header><span>python</span><i class=\"fa-light fa-clone copy-btn\"></i></header><code class=\"language-python copy-text hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span>:\n    <span class=\"hljs-comment\"># Class attribute</span>\n    wheels = <span class=\"hljs-number\">4</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, make, model, year</span>):\n        <span class=\"hljs-comment\"># Instance attributes</span>\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># Default value</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">description</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.year}</span> <span class=\"hljs-subst\">{self.make}</span> <span class=\"hljs-subst\">{self.model}</span>\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">read_odometer</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"This car has <span class=\"hljs-subst\">{self.odometer}</span> miles on it.\"</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_odometer</span>(<span class=\"hljs-params\">self, mileage</span>):\n        <span class=\"hljs-keyword\">if</span> mileage &gt;= self.odometer:\n            self.odometer = mileage\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You can't roll back an odometer!\"</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">increment_odometer</span>(<span class=\"hljs-params\">self, miles</span>):\n        <span class=\"hljs-keyword\">if</span> miles &gt;= <span class=\"hljs-number\">0</span>:\n            self.odometer += miles\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"You can't increment with negative miles!\"</span>)\n\n<span class=\"hljs-comment\"># Creating an instance of Car</span>\nmy_car = Car(<span class=\"hljs-string\">'Toyota'</span>, <span class=\"hljs-string\">'Corolla'</span>, <span class=\"hljs-number\">2020</span>)\n\n<span class=\"hljs-comment\"># Accessing attributes</span>\n<span class=\"hljs-built_in\">print</span>(my_car.description())  <span class=\"hljs-comment\"># Output: 2020 Toyota Corolla</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Wheels: <span class=\"hljs-subst\">{my_car.wheels}</span>\"</span>)  <span class=\"hljs-comment\"># Output: Wheels: 4</span>\n\n<span class=\"hljs-comment\"># Using methods</span>\nmy_car.read_odometer()  <span class=\"hljs-comment\"># Output: This car has 0 miles on it.</span>\n\n<span class=\"hljs-comment\"># Updating the odometer</span>\nmy_car.update_odometer(<span class=\"hljs-number\">15000</span>)\nmy_car.read_odometer()  <span class=\"hljs-comment\"># Output: This car has 15000 miles on it.</span>\n\n<span class=\"hljs-comment\"># Incrementing the odometer</span>\nmy_car.increment_odometer(<span class=\"hljs-number\">500</span>)\nmy_car.read_odometer()  <span class=\"hljs-comment\"># Output: This car has 15500 miles on it.</span>\n</code></pre>\n<h3>Explanation</h3>\n<ol>\n<li><strong>Class Attribute (<code>wheels</code>)</strong>: Shared by all instances of <code>Car</code>.</li>\n<li><strong>Instance Attributes (<code>make</code>, <code>model</code>, <code>year</code>, <code>odometer</code>)</strong>: Unique to each <code>Car</code> object.</li>\n<li><strong>Methods</strong>:\n<ul>\n<li><code>description()</code>: Returns a formatted string with car details.</li>\n<li><code>read_odometer()</code>: Prints the current odometer reading.</li>\n<li><code>update_odometer(mileage)</code>: Sets the odometer to a new value if it's greater than or equal to the current value.</li>\n<li><code>increment_odometer(miles)</code>: Increments the odometer by a given number of miles.</li>\n</ul>\n</li>\n<li><strong>Creating an Instance (<code>my_car</code>)</strong>: Initializes a new <code>Car</code> object with specified <code>make</code>, <code>model</code>, and <code>year</code>.</li>\n<li><strong>Interacting with the Object</strong>: Accessing attributes and calling methods to manipulate and retrieve data.</li>\n</ol>\n<h2>Best Practices</h2>\n<ul>\n<li><strong>Use Meaningful Names</strong>: Choose descriptive names for classes, methods, and attributes.</li>\n<li><strong>Encapsulation</strong>: Keep data (attributes) and code (methods) bundled within classes to hide internal states and require all interaction to be performed through methods.</li>\n<li><strong>Inheritance</strong>: Use inheritance to promote code reuse but avoid deep or unnecessary inheritance hierarchies.</li>\n<li><strong>Composition Over Inheritance</strong>: Prefer composing objects with instances of other classes instead of inheriting from them when appropriate.</li>\n<li><strong>Avoid Using Mutable Default Arguments</strong>: Be cautious when using mutable types (like lists or dictionaries) as default values for attributes.</li>\n</ul>\n<h2>Additional Resources</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/tutorial/classes.html\">Python Official Documentation on Classes</a></li>\n<li><a href=\"https://realpython.com/python3-object-oriented-programming/\">Real Python's Guide to Python Classes and OOP</a></li>\n<li><a href=\"https://www.programiz.com/python-programming/inheritance\">Inheritance in Python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1104433/what-is-self\">Understanding Python's <code>self</code> Parameter</a></li>\n</ul>\n<hr>\n<p>Feel free to ask if you have more specific questions about classes in Python or need further examples!</p>\n</section>","topic_id":213,"last_visited":"2024-10-07T09:25:35.035Z"}],"chapter_id":95}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-10-07T09:24:24.367Z","is_private":false,"folder":"TEMP","last_update_on":"2024-10-07T09:28:12.807Z"}