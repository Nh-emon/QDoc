{"subject_name":"Temp Check","subject_id":25,"chapters":[{"chapter_name":"Testing","topics":[{"topic_name":"Temp","topic_html":"<sn><div data-rr=\"true\" data-el=\"markdown\"><pre>In Python, a **class** is a blueprint for creating objects (a particular data structure), encapsulating data for the object and methods to manipulate that data. Classes are fundamental to Object-Oriented Programming (OOP) in Python, allowing for the creation of reusable and modular code.<br><br>## Key Concepts of Classes in Python<br><br>1. **Class Definition**: Using the `class` keyword to define a new class.<br>2. **Attributes**: Variables that belong to the class (class attributes) or to instances of the class (instance attributes).<br>3. **Methods**: Functions defined within a class that describe the behaviors of the objects.<br>4. **Constructor (`__init__` method)**: A special method called when a new instance of the class is created.<br>5. **Inheritance**: A mechanism to create a new class based on an existing class, inheriting its attributes and methods.<br><br>## Basic Structure of a Class<br><br>Here's a simple example to illustrate these concepts:<br><br>```python<br>class Person:<br>    # Class attribute<br>    species = \"Homo sapiens\"<br><br>    # Constructor (initializer)<br>    def __init__(self, name, age):<br>        # Instance attributes<br>        self.name = name<br>        self.age = age<br><br>    # Instance method<br>    def greet(self):<br>        print(f\"Hello, my name is {self.name} and I'm {self.age} years old.\")<br><br>    # Another instance method<br>    def have_birthday(self):<br>        self.age += 1<br>        print(f\"Happy Birthday {self.name}! You are now {self.age} years old.\")<br>```<br><br>### Explanation:<br><br>- **Class Definition**: `class Person:` defines a new class named `Person`.<br>- **Class Attribute**: `species` is a class attribute shared by all instances of `Person`.<br>- **Constructor (`__init__`)**: Initializes each new instance with `name` and `age`.<br>- **Instance Attributes**: `self.name` and `self.age` are unique to each instance.<br>- **Instance Methods**: `greet` and `have_birthday` define behaviors for the instances.<br><br>## Creating and Using Objects<br><br>You can create instances (objects) of the `Person` class and interact with them as follows:<br><br>```python<br># Creating instances of Person<br>alice = Person(\"Alice\", 30)<br>bob = Person(\"Bob\", 25)<br><br># Accessing attributes<br>print(alice.name)  # Output: Alice<br>print(bob.age)     # Output: 25<br><br># Calling methods<br>alice.greet()      # Output: Hello, my name is Alice and I'm 30 years old.<br>bob.have_birthday()  # Output: Happy Birthday Bob! You are now 26 years old.<br><br># Accessing class attribute<br>print(Person.species)  # Output: Homo sapiens<br>print(alice.species)   # Output: Homo sapiens<br>```<br><br>### Output:<br>```<br>Alice<br>25<br>Hello, my name is Alice and I'm 30 years old.<br>Happy Birthday Bob! You are now 26 years old.<br>Homo sapiens<br>Homo sapiens<br>```<br><br>## Inheritance<br><br>Inheritance allows you to create a new class that inherits attributes and methods from an existing class.<br><br>```python<br>class Employee(Person):<br>    # Class attribute specific to Employee<br>    company = \"TechCorp\"<br><br>    def __init__(self, name, age, employee_id):<br>        # Call the constructor of the parent class<br>        super().__init__(name, age)<br>        # Additional instance attribute<br>        self.employee_id = employee_id<br><br>    # New method specific to Employee<br>    def work(self):<br>        print(f\"{self.name} is working at {self.company}.\")<br><br># Creating an instance of Employee<br>charlie = Employee(\"Charlie\", 28, \"E123\")<br><br># Accessing inherited attributes and methods<br>charlie.greet()         # Output: Hello, my name is Charlie and I'm 28 years old.<br>charlie.work()          # Output: Charlie is working at TechCorp.<br>print(charlie.employee_id)  # Output: E123<br>```<br><br>### Output:<br>```<br>Hello, my name is Charlie and I'm 28 years old.<br>Charlie is working at TechCorp.<br>E123<br>```<br><br>## Special Methods<br><br>Python classes can define special methods (also known as \"dunder\" methods, short for \"double underscore\") to implement and customize behavior for built-in operations.<br><br>For example, the `__str__` method defines the string representation of an object:<br><br>```python<br>class Person:<br>    def __init__(self, name, age):<br>        self.name = name<br>        self.age = age<br><br>    def __str__(self):<br>        return f\"{self.name}, {self.age} years old\"<br><br># Usage<br>dave = Person(\"Dave\", 40)<br>print(dave)  # Output: Dave, 40 years old<br>```<br><br>## Encapsulation and Access Modifiers<br><br>While Python doesn't enforce access restrictions strictly, by convention:<br><br>- **Public Attributes/Methods**: Accessible from anywhere (`self.attribute`).<br>- **Protected Attributes/Methods**: Indicated by a single underscore prefix (`self._attribute`), suggesting it shouldn't be accessed directly.<br>- **Private Attributes/Methods**: Indicated by a double underscore prefix (`self.__attribute`), which name-mangles to prevent accidental access.<br><br>```python<br>class Example:<br>    def __init__(self):<br>        self.public = \"I am public\"<br>        self._protected = \"I am protected\"<br>        self.__private = \"I am private\"<br><br>    def get_private(self):<br>        return self.__private<br><br># Usage<br>ex = Example()<br>print(ex.public)        # Output: I am public<br>print(ex._protected)    # Output: I am protected<br># print(ex.__private)   # AttributeError<br>print(ex.get_private()) # Output: I am private<br>```<br><br>## Conclusion<br><br>Classes in Python provide a powerful way to model real-world entities and manage complex programs by organizing code into logical, reusable components. By leveraging classes, you can encapsulate data and functionality, promote code reuse through inheritance, and create more maintainable and scalable applications.<br><br>If you're new to classes and OOP in Python, practicing by creating your own classes and experimenting with attributes and methods is a great way to deepen your understanding.</pre></div></sn>","topic_id":216,"last_visited":"2024-10-11T10:16:35.025Z"},{"topic_name":"NEW","topic_html":"","topic_id":217,"last_visited":"2024-10-11T16:17:52.515Z"}],"chapter_id":96}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-10-08T04:44:17.400Z","is_private":false,"folder":"SES Temp","last_update_on":"2024-10-11T16:17:54.963Z"}