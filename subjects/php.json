{"subject_name":"php","chapters":[{"chapter_name":"Php All Syntax","topics":[{"topic_name":"test.php","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><pre class=\"fx-1-2 copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-solid fa-clipboard copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$var_is_true</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$var_is_false</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'   '</span>;<span class=\"hljs-comment\">//white space count as a true value use trim to remove whitespace from string</span>\n<span class=\"hljs-variable\">$var_is_true</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$var_is_false</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n      </code></pre><div class=\"copy-container fnx-8 my-2 p-2 bg-codelink border rounded-1 d-flex jc-between ai-center w-auto\" data-el=\"copy-container\">\n  <p class=\"copy-text flex-grow-1 text-truncate px-1\" data-el=\"copy-text\">copy me :-)</p>\n  <i class=\"copy-btn fa-light fa-clone flex-shrink-0 c-pointer\"></i>\n</div>\n<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-built_in\">cat</span> file.txt\n      </code></pre></div>\n","topic_id":4}],"chapter_id":3},{"chapter_name":"1 . Introduction to PHP","topics":[{"topic_name":"PHP Tag","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Tag<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Php is unlike javascript a scripting language. It means we can write php code multiple times in a html code and outside of html code;<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are <span style=\"color: #ff0080;\" class=\"underline\">three kinds of tags</span> to denote PHP blocks in a file. The PHP parser is looking for the opening and (if<br>present) closing tags to delimit the code to interpret.<br></p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Standard Tag</span><br>This tag id the standard method to embed PHP code in a file.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n    <span class=\"hljs-comment\">// Your Code</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Short Tag</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?</span>\n\n    <span class=\"hljs-comment\">//your code</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-3123\" aria-expanded=\"true\" aria-control=\"cc-3123\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">readmore</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse show\" id=\"cc-3123\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><h5 class=\"p-2 mb-2\" data-el=\"title\">Short tag :<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">might not be enabled by default , to enable it go to <span style=\"\" class=\"underline\">php.ini</span> file&nbsp; then configure it to <span style=\"\" class=\"hl hl-default\">short_open_tag = On</span> <br></li><li data-el=\"list\">disallowed in all major PHP coding standards\n</li><li data-el=\"list\">discouraged in the official documentation\n</li><li data-el=\"list\">disabled by default in most distributions\n</li><li data-el=\"list\">interfere with inline XML's processing instructions\n</li><li data-el=\"list\">are not accepted in code submissions by most open source projects\n</li></ul></div>\n        </div>\n</div>\n</li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">ASP Tag</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">&lt;%\n\n    <span class=\"hljs-comment\">//php code</span>\n\n%&gt;\n\n      </code></pre><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : ASP-style tags were deprecated in PHP 7.0 and <span style=\"color: #ff0080;\" class=\"\">removed</span>&nbsp; in PHP 7.2. As of PHP 7.2 and later, this syntax is no longer supported<br></p></li></ul></div>","topic_id":5},{"topic_name":"Hello World","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Hello World<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The most widely used language construct to print output in PHP is echo<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Hello, World!\"</span>;\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p><p></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Alternatively, you can also use print<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Hello, World!\"</span>;\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p><p></p><h5 class=\"p-2 mb-2\" data-el=\"title\">echo vs print<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Both statements perform the same function, with minor differences</p><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">echo has a void return, whereas print returns an int with a value of 1\n<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hello world\"</span>; <span class=\"hljs-comment\">//return nothing</span>\n\n<span class=\"hljs-variable\">$x</span> = <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">'hello world'</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$x</span>; <span class=\"hljs-comment\">//1</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li><li data-el=\"list\" class=\"\">echo can take multiple arguments (without parentheses only), whereas print only takes one argument\n<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hello\"</span> . <span class=\"hljs-string\">\"world\"</span>; <span class=\"hljs-comment\">//helloworld</span>\n\n<span class=\"hljs-keyword\">print&nbsp;</span><span class=\"hljs-string\">\"hello\"</span> . <span class=\"hljs-string\">\"world\"</span>; <br><br><span class=\"hljs-comment\">// <span class=\"\">PHP Parse error</span>:  syntax error, unexpected token \",\" in php shell code on line 1</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li><li data-el=\"list\" class=\"\">echo is slightly faster than print\n<br><br><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : Both echo and print are language constructs, not functions. That means they do not require parentheses () around their arguments. For cosmetic consistency with functions, parentheses can be included.<br></p></li></ul><p></p><h5 class=\"p-2 mb-2\" data-el=\"title\">printf<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The printf() function in php works similarly to printf() in C and other languages.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">//printf(format,arg1,arg2,...)</span>\n\n<span class=\"hljs-title function_ invoke__\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>, <span class=\"hljs-string\">\"Hello, World!\"</span>);\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p></div>","topic_id":6},{"topic_name":"PHP Built In Server","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Built In Server<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">PHP 5.4+ comes with a built-in development server. It can be used to run applications without having to install a production HTTP server such as nginx or Apache. The built-in server is only designed to be used for development and testing purposes.<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Suppose our file directory is&nbsp; <span style=\"\" class=\"underline\">xammp/htdoc/phpFiles/myFile.php</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">cd ...\\xammp\\htdoc\\phpFiles\\\nphp -S localhost:6959\n      </code></pre></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">after the server started , open your browser and go to <span style=\"\" class=\"underline text-info\">http://localhost:6959/myFile.php</span><br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">To stop server just pressed&nbsp;&nbsp; <span style=\"\" class=\"hl hl-default\">Ctrl + C</span><br></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : php -S localhost:6959 , here the -S flag denote <span style=\"color: #ff0080;\" class=\"\">server</span>,and we can choose any <span style=\"color: #ff0080;\" class=\"\">port number</span><br></p></div>","topic_id":7},{"topic_name":"PHP CLI","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP CLI<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">PHP can also be run from command line directly using the CLI (Command Line Interface) . CLI is basically the same as PHP from web servers, except some differences in terms of standard input and output.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">The PHP CLI allows <span style=\"color: #ff0080;\" class=\"\">four</span> ways to run PHP code :</h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Standard input<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-string\">' &lt;?php echo \"hello\" ; '</span>  |  php\n      </code></pre></li> <li data-el=\"list\" class=\"\">Filename as argument<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">cd  ..\\xampp\\htdocs\\phpFiles\\\nphp test.php\n      </code></pre></li> <li data-el=\"list\" class=\"\">Code as argument<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">php -r  ' echo \"Hello world!\" ; '\n      </code></pre></li> <li data-el=\"list\" class=\"\">Interactive shell<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">php -a\n      </code></pre></li></ul></div>","topic_id":8},{"topic_name":"Instruction separation","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Instruction Separation<br></h3><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Just like most other C-style languages, each statement is terminated with a semicolon ( ; ) . Also, a closing tag( ?&gt;) is used to terminate the last line of code of the PHP block.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n   <span class=\"hljs-variable\">$greet</span> = <span class=\"hljs-string\">\"hello world\"</span>;\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$greet</span>  <span class=\"hljs-comment\">//no ; (semicolon) added </span>\n   <span class=\"hljs-variable\">$message</span> =  <span class=\"hljs-string\">\"hello universe\"</span>;\n   <span class=\"hljs-comment\">// PHP Parse error:  syntax error, unexpected variable \"$message\", expecting \",\" or \";\" in ....</span>\n   \n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">If the last line of PHP code ends with a semicolon, the closing tag is optional if there is no code following that final line of code. For example, we can leave out the closing tag after echo \"No error\"; in the following example:<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"No error\"</span>; \n   <span class=\"hljs-comment\">// no closing tag is needed as long as there is no code below</span>\n\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">However, if there is any other code following your PHP code block, the closing tag is no longer optional<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"This will cause an error if you leave out the closing tag\"</span>; \n\n<span class=\"hljs-meta\">?&gt;</span>\n\n&lt;!-- html code after php script --&gt;\n&lt;ul&gt;\n    &lt;li&gt;item1&lt;/li&gt;\n    &lt;li&gt;item2&lt;/li&gt;\n&lt;/ul&gt;\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">We can also leave out the semicolon of the last statement in a PHP code block if that code block has a closing tag :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"I hope this helps! :D\"</span>;\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"No error\"</span> <span class=\"hljs-comment\">//semicolon (;) ignored  as it is the last line of this script,so we can do this </span>\n<span class=\"hljs-meta\">?&gt;</span>      \n\n      </code></pre></li> <p class=\"light-note p-3 rounded-1 m-2 mb-2 text-light box-bg\">summary : It is generally recommended to<span style=\"color: #ff8040;\" class=\"\"> always use a semicolon and use a closing tag</span> for every PHP code block <br></p><li data-el=\"list\" class=\"\">So, your code should basically look like this :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon and a closing tag because more code follows\"</span>;\n<span class=\"hljs-meta\">?&gt;</span>\n&lt;p&gt;Some HTML code goes here&lt;/p&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon and a closing tag because more code follows\"</span>;\n<span class=\"hljs-meta\">?&gt;</span>\n&lt;p&gt;Some HTML code goes here&lt;/p&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon but leave out the closing tag\"</span> <span class=\"hljs-comment\">//we can ignore here</span>\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li></ul></div>","topic_id":10}],"chapter_id":4},{"chapter_name":"2 . Variable","topics":[{"topic_name":"Variable Basic","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Variable Basic<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">&nbsp;A variable is used to store data that you can use and manipulate throughout your script. PHP variables are represented by a dollar sign (<code>$</code>) followed by the variable name. Here’s a basic overview of how variables work in PHP</p><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">&lt;?php\n// Declare variables\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"John\"</span>;\n<span class=\"hljs-variable\">$age</span> = 30;\n<span class=\"hljs-variable\">$isStudent</span> = <span class=\"hljs-literal\">true</span>;\n\n// Use variables\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Name: \"</span> . <span class=\"hljs-variable\">$name</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span>;      // Outputs: Name: John\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Age: \"</span> . <span class=\"hljs-variable\">$age</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span>;        // Outputs: Age: 30\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Is a student: \"</span> . (<span class=\"hljs-variable\">$isStudent</span> ? <span class=\"hljs-string\">\"Yes\"</span> : <span class=\"hljs-string\">\"No\"</span>);  // Outputs: Is a student: Yes\n?&gt;\n\n      </code></pre><div class=\"col-12\">\n                <h5 class=\"p-2 mb-2\" data-el=\"title\">Variable Table<br></h5><div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">VariableName<br></th><th scope=\"col\" class=\"\">Status<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">$variablename<br></th><td class=\"\">correct<br></td></tr><tr><th scope=\"row\" class=\"\">$_variablename<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variable_name<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variable-name<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variableName<br></th><td>correct</td></tr><tr><th scope=\"row\" class=\"\">$variablename56<br></th><td>correct</td></tr><tr><th scope=\"row\" class=\"\">variablename<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr><tr><th scope=\"row\" class=\"\">$variable name<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr><tr><th scope=\"row\" class=\"\">$89variablename<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr></tbody></table>        \n                </div>\n                </div><p></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : $age , $Age are not same varaible,because variable name is case-insensitive<br></p></div>","topic_id":11},{"topic_name":"Data Type","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Data Type<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are different data types for different purposes. PHP does not have explicit type definitions, but the type of a variable is determined by the type of the value that is assigned, or by the type that it is casted to. This is a brief overview about the types, for a detailed documentation and examples, see the PHP types topic<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are following data types in PHP : <span style=\"\" class=\"hl hl-default\">null</span> , <span style=\"\" class=\"hl hl-default\">boolean</span> , <span style=\"\" class=\"hl hl-default\">integer</span> , <span style=\"\" class=\"hl hl-default\">float</span> , <span style=\"\" class=\"hl hl-default\">string</span> , <span style=\"\" class=\"hl hl-default\">object</span> , <span style=\"\" class=\"hl hl-default\">resource</span> and <span style=\"\" class=\"hl hl-default\">array</span>.<br><br><br></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"mt-3\">gettype</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">To get the type of a variable as a string, use the gettype() function :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">gettype</span>(<span class=\"hljs-number\">1</span>);     <span class=\"hljs-comment\">// \"integer\"</span>\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">gettype</span>(<span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// \"boolean\"</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></p><p></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Null</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Null can be assigned to any variable. It represents a variable with no value.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-literal\">null</span>;\n      </code></pre></p><p></p><p></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : This invalidates the variable and it's value would be undefined or void if called. The variable is cleared from memory and deleted by the garbage collector.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Boolean</span></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">This is the simplest type with only two possible values . Booleans can be used to control the flow of code<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-literal\">false</span>;\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Integer</span></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An integer is a whole number positive or negative. It can be in used with any number base. The size of an integer is platform-dependent. PHP does not support unsigned integers.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = -<span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">// negative</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// zero (can also be null or false (as boolean)</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">123</span>;   <span class=\"hljs-comment\">// positive decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0123</span>;  <span class=\"hljs-comment\">// octal = 83 decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0xAB</span>;  <span class=\"hljs-comment\">// hexadecimal = 171 decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0b1010</span>;<span class=\"hljs-comment\">// binary = 10 decimal</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-number\">0123</span>, <span class=\"hljs-number\">0xAB</span>, <span class=\"hljs-number\">0b1010</span>); <span class=\"hljs-comment\">// output: int(83) int(171) int(10)</span>\n\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">float</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Floating point numbers, \"doubles\" or simply called \"floats\" are decimal numbers<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">1.23</span>;\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">10.0</span>;\n<span class=\"hljs-variable\">$bar</span> = -INF;\n<span class=\"hljs-variable\">$bar</span> = NAN;\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">String</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">A string is like an array of characters . Like an array, a string can be indexed to return its individual characters<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-string\">\"bar\"</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$foo</span>[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">//'b'</span>\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Array<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An array is like a list of values. The simplest form of an array is indexed by integer, and ordered by the index, with the first element lying at index 0.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);        <span class=\"hljs-comment\">// An array of integers</span>\n<span class=\"hljs-variable\">$bar</span> = [<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">123</span> =&gt; <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// Short array syntax, PHP 5.4+</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">0</span>];    <span class=\"hljs-comment\">// Returns \"A\"</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">1</span>];    <span class=\"hljs-comment\">// Returns true</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">123</span>];  <span class=\"hljs-comment\">// Returns 5</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">1234</span>]; <span class=\"hljs-comment\">// Returns null</span>\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Object</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An object is an instance of a class. Its variables and methods can be accessed with the -&gt; operator.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// create new object of class stdClass, which a predefined, empty class</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">stdClass</span>(); \n<span class=\"hljs-variable\">$foo</span>-&gt;bar = <span class=\"hljs-string\">\"baz\"</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$foo</span>-&gt;bar; <span class=\"hljs-comment\">// Outputs \"baz\"</span>\n\n<span class=\"hljs-comment\">// Or we can cast an array to an object:</span>\n<span class=\"hljs-variable\">$quux</span> = (<span class=\"hljs-keyword\">object</span>) [<span class=\"hljs-string\">\"foo\"</span> =&gt; <span class=\"hljs-string\">\"bar\"</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$quux</span>-&gt;foo; <span class=\"hljs-comment\">// This outputs \"bar\";</span>\n\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Resource</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Resource variables hold special handles to opened files, database connections, streams, image canvas areas and the like (as it is stated in the manual)<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// fopen() is the function to open a file on disk as a resource.</span>\n<span class=\"hljs-variable\">$fp</span> = <span class=\"hljs-title function_ invoke__\">fopen</span>(<span class=\"hljs-string\">'file.ext'</span>, <span class=\"hljs-string\">'r'</span>); \n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$fp</span>); <span class=\"hljs-comment\">// output: resource(2) of type (stream)</span>\n\n      </code></pre></p><p></p><pre class=\"copy-container code-container parentEl\" data-el=\"code-container\"></pre></div>","topic_id":12},{"topic_name":"Variable Value Truthiness","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Variable Value Truthiness</h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In PHP, variable values have an associated \"truthiness\" so even non-boolean values will equate to true or false. This allows any variable to be used in a conditional block, e.g.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Here are some fundamental rules for different types of variable values :</span><br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">/* explicit version */</span> }\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$var</span>) { <span class=\"hljs-comment\">/* $var == true is implicit */</span> }\n\n<span class=\"hljs-comment\">// Strings with non-zero length equate to true including strings containing only whitepace such as ' '.</span>\n<span class=\"hljs-comment\">// Empty strings '' equate to false.</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">//white space count as a true value</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'   '</span>;\n<span class=\"hljs-variable\">$status</span>  = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span>  = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n\n<span class=\"hljs-comment\">// Integers equate to true if they are nonzero, while zero equates to false.</span>\n<span class=\"hljs-variable\">$var</span> = -<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-number\">99</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// null equates to false</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// Empty strings '' and string zero '0' equate to false.</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'0'</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n\n<span class=\"hljs-comment\">// Floating-point values equate to true if they are nonzero, while zero values equates to false.</span>\n<span class=\"hljs-comment\">// NAN (PHP's Not-a-Number) equates to true, i.e. NAN == true is true. This is because NAN is a nonzero</span>\n<span class=\"hljs-comment\">// floating-point value.</span>\n\n<span class=\"hljs-comment\">// Zero-values include both +0 and -0 as defined by IEEE 754. PHP does not distinguish between +0 and -0</span>\n<span class=\"hljs-comment\">// in its double-precision floating-point, i.e. floatval('0') == floatval('-0') is true.</span>\n<span class=\"hljs-comment\">// In fact, floatval('0') === floatval('-0').</span>\n<span class=\"hljs-comment\">// Additionally, both floatval('0') == false and floatval('-0') == false.</span>\n\n<span class=\"hljs-variable\">$var</span> = NAN;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'-0'</span>);\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'0'</span>) == <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'-0'</span>);\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// IDENTICAL OPERATOR</span>\n<span class=\"hljs-comment\">// In the PHP Documentation for Comparison Operators, there is an Identical Operator ===. This operator can be used</span>\n<span class=\"hljs-comment\">// to check whether a variable is identical to a reference value:</span>\n<span class=\"hljs-variable\">$var</span>    = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// It has a corresponding not identical operator !==:</span>\n<span class=\"hljs-variable\">$var</span>    = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// true</span>\n\n\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-5284\" aria-expanded=\"false\" aria-control=\"cc-5284\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">show</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-5284\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()</script>//set up later<br><br>// The identical operator can be used as an alternative to language functions like is_null().<br>// USE CASE WITH strpos()<br>// The strpos($haystack, $needle) language function is used to locate the index at which $needle occurs in<br>// $haystack, or whether it occurs at all. The strpos() function is case sensitive; if case-insensitive find is what you<br>// need you can go with stripos($haystack, $needle)<br>// The strpos &amp; stripos function also contains third parameter offset (int) which if specified, search will start this<br>// number of characters counted from the beginning of the string. Unlike strrpos and strripos, the offset cannot be<br><br><br>// negative<br>// The function can return:<br>// 0 if $needle is found at the beginning of $haystack;<br>// a non-zero integer specifying the index if $needle is found somewhere other than the beginning in $haystack;<br>// and value false if $needle is not found anywhere in $haystack.<br>// Because both 0 and false have truthiness false in PHP but represent distinct situations for strpos(), it is<br>// important to distinguish between them and use the identical operator === to look exactly for false and not just a<br>// value that equates to false.<br><br>$idx = substr($haystack, $needle);<br>if ($idx === false)<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle not found in $haystack<br>}<br>else<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle found in $haystack<br>}<br>Alternatively, using the not identical operator:<br>$idx = substr($haystack, $needle);<br>if ($idx !== false)<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle found in $haystack<br>}<br>else<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle not found in $haystack<br>}<br><br></div>\n        </div>\n</div>\n</div>","topic_id":13}],"chapter_id":32}]}