{"subject_name":"php","chapters":[{"chapter_name":"Php All Syntax","topics":[{"topic_name":"test.php","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><pre class=\"fx-1-2 copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-solid fa-clipboard copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$var_is_true</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$var_is_false</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'   '</span>;<span class=\"hljs-comment\">//white space count as a true value use trim to remove whitespace from string</span>\n<span class=\"hljs-variable\">$var_is_true</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$var_is_false</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n      </code></pre><div class=\"copy-container fnx-8 my-2 p-2 bg-codelink border rounded-1 d-flex jc-between ai-center w-auto\" data-el=\"copy-container\">\n  <p class=\"copy-text flex-grow-1 text-truncate px-1\" data-el=\"copy-text\">copy me :-)</p>\n  <i class=\"copy-btn fa-light fa-clone flex-shrink-0 c-pointer\"></i>\n</div>\n<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-built_in\">cat</span> file.txt\n      </code></pre></div>\n","topic_id":4}],"chapter_id":3},{"chapter_name":"1 . Introduction to PHP","topics":[{"topic_name":"PHP Tag","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Tag<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Php is unlike javascript a scripting language. It means we can write php code multiple times in a html code and outside of html code;<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are <span style=\"color: #ff0080;\" class=\"underline\">three kinds of tags</span> to denote PHP blocks in a file. The PHP parser is looking for the opening and (if<br>present) closing tags to delimit the code to interpret.<br></p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Standard Tag</span><br>This tag id the standard method to embed PHP code in a file.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n    <span class=\"hljs-comment\">// Your Code</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Short Tag</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?</span>\n\n    <span class=\"hljs-comment\">//your code</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-3123\" aria-expanded=\"true\" aria-control=\"cc-3123\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">readmore</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse show\" id=\"cc-3123\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><h5 class=\"p-2 mb-2\" data-el=\"title\">Short tag :<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">might not be enabled by default , to enable it go to <span style=\"\" class=\"underline\">php.ini</span> file&nbsp; then configure it to <span style=\"\" class=\"hl hl-default\">short_open_tag = On</span> <br></li><li data-el=\"list\">disallowed in all major PHP coding standards\n</li><li data-el=\"list\">discouraged in the official documentation\n</li><li data-el=\"list\">disabled by default in most distributions\n</li><li data-el=\"list\">interfere with inline XML's processing instructions\n</li><li data-el=\"list\">are not accepted in code submissions by most open source projects\n</li></ul></div>\n        </div>\n</div>\n</li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">ASP Tag</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">&lt;%\n\n    <span class=\"hljs-comment\">//php code</span>\n\n%&gt;\n\n      </code></pre><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : ASP-style tags were deprecated in PHP 7.0 and <span style=\"color: #ff0080;\" class=\"\">removed</span>&nbsp; in PHP 7.2. As of PHP 7.2 and later, this syntax is no longer supported<br></p></li></ul></div>","topic_id":5},{"topic_name":"Hello World","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Hello World<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The most widely used language construct to print output in PHP is echo<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Hello, World!\"</span>;\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p><p></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Alternatively, you can also use print<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Hello, World!\"</span>;\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p><p></p><h5 class=\"p-2 mb-2\" data-el=\"title\">echo vs print<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Both statements perform the same function, with minor differences</p><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">echo has a void return, whereas print returns an int with a value of 1\n<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hello world\"</span>; <span class=\"hljs-comment\">//return nothing</span>\n\n<span class=\"hljs-variable\">$x</span> = <span class=\"hljs-keyword\">print</span>(<span class=\"hljs-string\">'hello world'</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$x</span>; <span class=\"hljs-comment\">//1</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li><li data-el=\"list\" class=\"\">echo can take multiple arguments (without parentheses only), whereas print only takes one argument\n<pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"hello\"</span> . <span class=\"hljs-string\">\"world\"</span>; <span class=\"hljs-comment\">//helloworld</span>\n\n<span class=\"hljs-keyword\">print&nbsp;</span><span class=\"hljs-string\">\"hello\"</span> . <span class=\"hljs-string\">\"world\"</span>; <br><br><span class=\"hljs-comment\">// <span class=\"\">PHP Parse error</span>:  syntax error, unexpected token \",\" in php shell code on line 1</span>\n\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li><li data-el=\"list\" class=\"\">echo is slightly faster than print\n<br><br><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : Both echo and print are language constructs, not functions. That means they do not require parentheses () around their arguments. For cosmetic consistency with functions, parentheses can be included.<br></p></li></ul><p></p><h5 class=\"p-2 mb-2\" data-el=\"title\">printf<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The printf() function in php works similarly to printf() in C and other languages.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">//printf(format,arg1,arg2,...)</span>\n\n<span class=\"hljs-title function_ invoke__\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>, <span class=\"hljs-string\">\"Hello, World!\"</span>);\n\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></p><p></p></div>","topic_id":6},{"topic_name":"PHP Built In Server","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Built In Server<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">PHP 5.4+ comes with a built-in development server. It can be used to run applications without having to install a production HTTP server such as nginx or Apache. The built-in server is only designed to be used for development and testing purposes.<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Suppose our file directory is&nbsp; <span style=\"\" class=\"underline\">xammp/htdoc/phpFiles/myFile.php</span><br></p><p></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">after the server started , open your browser and go to <span style=\"\" class=\"underline text-info\">http://localhost:6959/myFile.php</span><br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-built_in\">cd</span> ...\\xammp\\htdoc\\phpFiles\\\nphp -S localhost:6959\n      </code></pre></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">To stop server just pressed&nbsp;&nbsp; <span style=\"\" class=\"hl hl-default\">Ctrl + C</span><br></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : php -S localhost:6959 , here the -S flag denote <span style=\"color: #ff0080;\" class=\"\">server</span>,and we can choose any <span style=\"color: #ff0080;\" class=\"\">port number</span><br></p></div>","topic_id":7},{"topic_name":"PHP CLI","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP CLI<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">PHP can also be run from command line directly using the CLI (Command Line Interface) . CLI is basically the same as PHP from web servers, except some differences in terms of standard input and output.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">The PHP CLI allows <span style=\"color: #ff0080;\" class=\"\">four</span> ways to run PHP code :</h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Standard input<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-string\">' &lt;?php echo \"hello\" ; '</span>  |  php\n      </code></pre></li> <li data-el=\"list\" class=\"\">Filename as argument<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">cd  ..\\xampp\\htdocs\\phpFiles\\\nphp test.php\n      </code></pre></li> <li data-el=\"list\" class=\"\">Code as argument<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">php -r  ' echo \"Hello world!\" ; '\n      </code></pre></li> <li data-el=\"list\" class=\"\">Interactive shell<pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">shell</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-shell code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">php -a\n      </code></pre></li></ul></div>","topic_id":8},{"topic_name":"Instruction separation","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Instruction Separation<br></h3><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Just like most other C-style languages, each statement is terminated with a semicolon ( ; ) . Also, a closing tag( ?&gt;) is used to terminate the last line of code of the PHP block.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n\n   <span class=\"hljs-variable\">$greet</span> = <span class=\"hljs-string\">\"hello world\"</span>;\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$greet</span>  <span class=\"hljs-comment\">//no ; (semicolon) added </span>\n   <span class=\"hljs-variable\">$message</span> =  <span class=\"hljs-string\">\"hello universe\"</span>;\n   <span class=\"hljs-comment\">// PHP Parse error:  syntax error, unexpected variable \"$message\", expecting \",\" or \";\" in ....</span>\n   \n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">If the last line of PHP code ends with a semicolon, the closing tag is optional if there is no code following that final line of code. For example, we can leave out the closing tag after echo \"No error\"; in the following example:<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"No error\"</span>; \n   <span class=\"hljs-comment\">// no closing tag is needed as long as there is no code below</span>\n\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">However, if there is any other code following your PHP code block, the closing tag is no longer optional<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"This will cause an error if you leave out the closing tag\"</span>; \n\n<span class=\"hljs-meta\">?&gt;</span>\n\n&lt;!-- html code after php script --&gt;\n&lt;ul&gt;\n    &lt;li&gt;item1&lt;/li&gt;\n    &lt;li&gt;item2&lt;/li&gt;\n&lt;/ul&gt;\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">We can also leave out the semicolon of the last statement in a PHP code block if that code block has a closing tag :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span> \n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"I hope this helps! :D\"</span>;\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"No error\"</span> <span class=\"hljs-comment\">//semicolon (;) ignored  as it is the last line of this script,so we can do this </span>\n<span class=\"hljs-meta\">?&gt;</span>      \n\n      </code></pre></li> <p class=\"light-note p-3 rounded-1 m-2 mb-2 text-light box-bg\">summary : It is generally recommended to<span style=\"color: #ff8040;\" class=\"\"> always use a semicolon and use a closing tag</span> for every PHP code block <br></p><li data-el=\"list\" class=\"\">So, your code should basically look like this :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon and a closing tag because more code follows\"</span>;\n<span class=\"hljs-meta\">?&gt;</span>\n&lt;p&gt;Some HTML code goes here&lt;/p&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon and a closing tag because more code follows\"</span>;\n<span class=\"hljs-meta\">?&gt;</span>\n&lt;p&gt;Some HTML code goes here&lt;/p&gt;\n<span class=\"hljs-meta\">&lt;?php</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here as well!\"</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here we use a semicolon but leave out the closing tag\"</span> <span class=\"hljs-comment\">//we can ignore here</span>\n<span class=\"hljs-meta\">?&gt;</span>\n      </code></pre></li></ul></div>","topic_id":10}],"chapter_id":4},{"chapter_name":"2 . Variable","topics":[{"topic_name":"Variable Basic","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Variable Basic<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">&nbsp;A variable is used to store data that you can use and manipulate throughout your script. PHP variables are represented by a dollar sign (<code>$</code>) followed by the variable name. Here’s a basic overview of how variables work in PHP</p><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">bash</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-bash code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">&lt;?php\n// Declare variables\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"John\"</span>;\n<span class=\"hljs-variable\">$age</span> = 30;\n<span class=\"hljs-variable\">$isStudent</span> = <span class=\"hljs-literal\">true</span>;\n\n// Use variables\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Name: \"</span> . <span class=\"hljs-variable\">$name</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span>;      // Outputs: Name: John\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Age: \"</span> . <span class=\"hljs-variable\">$age</span> . <span class=\"hljs-string\">\"&lt;br&gt;\"</span>;        // Outputs: Age: 30\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Is a student: \"</span> . (<span class=\"hljs-variable\">$isStudent</span> ? <span class=\"hljs-string\">\"Yes\"</span> : <span class=\"hljs-string\">\"No\"</span>);  // Outputs: Is a student: Yes\n?&gt;\n\n      </code></pre><div class=\"col-12\">\n                <h5 class=\"p-2 mb-2\" data-el=\"title\">Variable Table<br></h5><div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">VariableName<br></th><th scope=\"col\" class=\"\">Status<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">$variablename<br></th><td class=\"\">correct<br></td></tr><tr><th scope=\"row\" class=\"\">$_variablename<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variable_name<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variable-name<br></th><td>correct<br></td></tr><tr><th scope=\"row\" class=\"\">$variableName<br></th><td>correct</td></tr><tr><th scope=\"row\" class=\"\">$variablename56<br></th><td>correct</td></tr><tr><th scope=\"row\" class=\"\">variablename<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr><tr><th scope=\"row\" class=\"\">$variable name<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr><tr><th scope=\"row\" class=\"\">$89variablename<br></th><td class=\"\"><span style=\"color: #ff8080;\" class=\"\">incorrect</span><br></td></tr></tbody></table>        \n                </div>\n                </div><p></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : $age , $Age are not same varaible,because variable name is case-insensitive<br></p></div>","topic_id":11},{"topic_name":"Data Type","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">PHP Data Type<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are different data types for different purposes. PHP does not have explicit type definitions, but the type of a variable is determined by the type of the value that is assigned, or by the type that it is casted to. This is a brief overview about the types, for a detailed documentation and examples, see the PHP types topic<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">There are following data types in PHP : <span style=\"\" class=\"hl hl-default\">null</span> , <span style=\"\" class=\"hl hl-default\">boolean</span> , <span style=\"\" class=\"hl hl-default\">integer</span> , <span style=\"\" class=\"hl hl-default\">float</span> , <span style=\"\" class=\"hl hl-default\">string</span> , <span style=\"\" class=\"hl hl-default\">object</span> , <span style=\"\" class=\"hl hl-default\">resource</span> and <span style=\"\" class=\"hl hl-default\">array</span>.<br><br><br></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"mt-3\">gettype</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">To get the type of a variable as a string, use the gettype() function :<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">gettype</span>(<span class=\"hljs-number\">1</span>);     <span class=\"hljs-comment\">// \"integer\"</span>\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">gettype</span>(<span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// \"boolean\"</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></p><p></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Null</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Null can be assigned to any variable. It represents a variable with no value.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-literal\">null</span>;\n      </code></pre></p><p></p><p></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : This invalidates the variable and it's value would be undefined or void if called. The variable is cleared from memory and deleted by the garbage collector.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Boolean</span></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">This is the simplest type with only two possible values . Booleans can be used to control the flow of code<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-literal\">false</span>;\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Integer</span></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An integer is a whole number positive or negative. It can be in used with any number base. The size of an integer is platform-dependent. PHP does not support unsigned integers.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = -<span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">// negative</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// zero (can also be null or false (as boolean)</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">123</span>;   <span class=\"hljs-comment\">// positive decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0123</span>;  <span class=\"hljs-comment\">// octal = 83 decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0xAB</span>;  <span class=\"hljs-comment\">// hexadecimal = 171 decimal</span>\n<span class=\"hljs-variable\">$bar</span> = <span class=\"hljs-number\">0b1010</span>;<span class=\"hljs-comment\">// binary = 10 decimal</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-number\">0123</span>, <span class=\"hljs-number\">0xAB</span>, <span class=\"hljs-number\">0b1010</span>); <span class=\"hljs-comment\">// output: int(83) int(171) int(10)</span>\n\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">float</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Floating point numbers, \"doubles\" or simply called \"floats\" are decimal numbers<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">1.23</span>;\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-number\">10.0</span>;\n<span class=\"hljs-variable\">$bar</span> = -INF;\n<span class=\"hljs-variable\">$bar</span> = NAN;\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">String</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">A string is like an array of characters . Like an array, a string can be indexed to return its individual characters<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-string\">\"bar\"</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$foo</span>[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">//'b'</span>\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Array<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An array is like a list of values. The simplest form of an array is indexed by integer, and ordered by the index, with the first element lying at index 0.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);        <span class=\"hljs-comment\">// An array of integers</span>\n<span class=\"hljs-variable\">$bar</span> = [<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">123</span> =&gt; <span class=\"hljs-number\">5</span>]; <span class=\"hljs-comment\">// Short array syntax, PHP 5.4+</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">0</span>];    <span class=\"hljs-comment\">// Returns \"A\"</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">1</span>];    <span class=\"hljs-comment\">// Returns true</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">123</span>];  <span class=\"hljs-comment\">// Returns 5</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$bar</span>[<span class=\"hljs-number\">1234</span>]; <span class=\"hljs-comment\">// Returns null</span>\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Object</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">An object is an instance of a class. Its variables and methods can be accessed with the -&gt; operator.<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// create new object of class stdClass, which a predefined, empty class</span>\n<span class=\"hljs-variable\">$foo</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">stdClass</span>(); \n<span class=\"hljs-variable\">$foo</span>-&gt;bar = <span class=\"hljs-string\">\"baz\"</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$foo</span>-&gt;bar; <span class=\"hljs-comment\">// Outputs \"baz\"</span>\n\n<span class=\"hljs-comment\">// Or we can cast an array to an object:</span>\n<span class=\"hljs-variable\">$quux</span> = (<span class=\"hljs-keyword\">object</span>) [<span class=\"hljs-string\">\"foo\"</span> =&gt; <span class=\"hljs-string\">\"bar\"</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$quux</span>-&gt;foo; <span class=\"hljs-comment\">// This outputs \"bar\";</span>\n\n      </code></pre></p><p></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Resource</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Resource variables hold special handles to opened files, database connections, streams, image canvas areas and the like (as it is stated in the manual)<br><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// fopen() is the function to open a file on disk as a resource.</span>\n<span class=\"hljs-variable\">$fp</span> = <span class=\"hljs-title function_ invoke__\">fopen</span>(<span class=\"hljs-string\">'file.ext'</span>, <span class=\"hljs-string\">'r'</span>); \n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$fp</span>); <span class=\"hljs-comment\">// output: resource(2) of type (stream)</span>\n\n      </code></pre></p><p></p><pre class=\"copy-container code-container parentEl\" data-el=\"code-container\"></pre></div>","topic_id":12},{"topic_name":"Variable Value Truthiness","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Variable Value Truthiness</h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In PHP, variable values have an associated \"truthiness\" so even non-boolean values will equate to true or false. This allows any variable to be used in a conditional block, e.g.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Here are some fundamental rules for different types of variable values :</span><br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">/* explicit version */</span> }\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$var</span>) { <span class=\"hljs-comment\">/* $var == true is implicit */</span> }\n\n<span class=\"hljs-comment\">// Strings with non-zero length equate to true including strings containing only whitepace such as ' '.</span>\n<span class=\"hljs-comment\">// Empty strings '' equate to false.</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">//white space count as a true value</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'   '</span>;\n<span class=\"hljs-variable\">$status</span>  = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span>  = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n\n<span class=\"hljs-comment\">// Integers equate to true if they are nonzero, while zero equates to false.</span>\n<span class=\"hljs-variable\">$var</span> = -<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-number\">99</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// null equates to false</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// Empty strings '' and string zero '0' equate to false.</span>\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-string\">'0'</span>;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n\n<span class=\"hljs-comment\">// Floating-point values equate to true if they are nonzero, while zero values equates to false.</span>\n<span class=\"hljs-comment\">// NAN (PHP's Not-a-Number) equates to true, i.e. NAN == true is true. This is because NAN is a nonzero</span>\n<span class=\"hljs-comment\">// floating-point value.</span>\n\n<span class=\"hljs-comment\">// Zero-values include both +0 and -0 as defined by IEEE 754. PHP does not distinguish between +0 and -0</span>\n<span class=\"hljs-comment\">// in its double-precision floating-point, i.e. floatval('0') == floatval('-0') is true.</span>\n<span class=\"hljs-comment\">// In fact, floatval('0') === floatval('-0').</span>\n<span class=\"hljs-comment\">// Additionally, both floatval('0') == false and floatval('-0') == false.</span>\n\n<span class=\"hljs-variable\">$var</span> = NAN;\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'-0'</span>);\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-variable\">$var</span> = <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'0'</span>) == <span class=\"hljs-title function_ invoke__\">floatval</span>(<span class=\"hljs-string\">'-0'</span>);\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = (<span class=\"hljs-variable\">$var</span> == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// IDENTICAL OPERATOR</span>\n<span class=\"hljs-comment\">// In the PHP Documentation for Comparison Operators, there is an Identical Operator ===. This operator can be used</span>\n<span class=\"hljs-comment\">// to check whether a variable is identical to a reference value:</span>\n<span class=\"hljs-variable\">$var</span>    = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> === <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// It has a corresponding not identical operator !==:</span>\n<span class=\"hljs-variable\">$var</span>    = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable\">$status</span> = <span class=\"hljs-variable\">$var</span> !== <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// true</span>\n\n\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-5284\" aria-expanded=\"false\" aria-control=\"cc-5284\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">show</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-5284\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()</script>//set up later<br><br>// The identical operator can be used as an alternative to language functions like is_null().<br>// USE CASE WITH strpos()<br>// The strpos($haystack, $needle) language function is used to locate the index at which $needle occurs in<br>// $haystack, or whether it occurs at all. The strpos() function is case sensitive; if case-insensitive find is what you<br>// need you can go with stripos($haystack, $needle)<br>// The strpos &amp; stripos function also contains third parameter offset (int) which if specified, search will start this<br>// number of characters counted from the beginning of the string. Unlike strrpos and strripos, the offset cannot be<br><br><br>// negative<br>// The function can return:<br>// 0 if $needle is found at the beginning of $haystack;<br>// a non-zero integer specifying the index if $needle is found somewhere other than the beginning in $haystack;<br>// and value false if $needle is not found anywhere in $haystack.<br>// Because both 0 and false have truthiness false in PHP but represent distinct situations for strpos(), it is<br>// important to distinguish between them and use the identical operator === to look exactly for false and not just a<br>// value that equates to false.<br><br>$idx = substr($haystack, $needle);<br>if ($idx === false)<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle not found in $haystack<br>}<br>else<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle found in $haystack<br>}<br>Alternatively, using the not identical operator:<br>$idx = substr($haystack, $needle);<br>if ($idx !== false)<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle found in $haystack<br>}<br>else<br>{<br>&nbsp;&nbsp;&nbsp; // logic for when $needle not found in $haystack<br>}<br><br></div>\n        </div>\n</div>\n</div>","topic_id":13},{"topic_name":"Default values of uninitialized variables","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Default values of uninitialized variables</h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Although not necessary in PHP however it is a very good practice to initialize variables. Uninitialized variables have a default value of their type depending on the context in which they are used :<br></p><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Unset AND unreferenced</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_var</span>); <span class=\"hljs-comment\">// outputs NULL</span>\n\n<span class=\"hljs-comment\">// Boolean</span>\n<span class=\"hljs-keyword\">echo</span>(<span class=\"hljs-variable\">$unset_bool</span> ? <span class=\"hljs-string\">\"true\\n\"</span> : <span class=\"hljs-string\">\"false\\n\"</span>); <span class=\"hljs-comment\">// outputs 'false'</span>\n\n<span class=\"hljs-comment\">// String</span>\n<span class=\"hljs-variable\">$unset_str</span> .= <span class=\"hljs-string\">'abc'</span>;\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_str</span>); <span class=\"hljs-comment\">// outputs 'string(3) \"abc\"'</span>\n\n\n<span class=\"hljs-comment\">// Integer</span>\n<span class=\"hljs-variable\">$unset_int</span> += <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">// 0 + 25 =&gt; 25</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_int</span>); <span class=\"hljs-comment\">// outputs 'int(25)'</span>\n\n<span class=\"hljs-comment\">// Float/double</span>\n<span class=\"hljs-variable\">$unset_float</span> += <span class=\"hljs-number\">1.25</span>;\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_float</span>); <span class=\"hljs-comment\">// outputs 'float(1.25)'</span>\n\n<span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-variable\">$unset_arr</span>[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"def\"</span>;\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_arr</span>); <span class=\"hljs-comment\">// outputs array(1) {  [3]=&gt;  string(3) \"def\" }</span>\n\n<span class=\"hljs-comment\">// Object</span>\n<span class=\"hljs-variable\">$unset_obj</span>-&gt;foo = <span class=\"hljs-string\">'bar'</span>;\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-variable\">$unset_obj</span>); <span class=\"hljs-comment\">// Outputs: object(stdClass)#1 (1) {  [\"foo\"]=&gt;  string(3) \"bar\" }</span>\n\n      </code></pre><p></p><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : Relying on the default value of an uninitialized variable is problematic in the case of including one file into another which uses the same variable name<br></p></div>","topic_id":14},{"topic_name":"Dynamic Variable","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Dynamic Variable<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Variables can be accessed via dynamic variable names. The name of a variable can be stored in another variable, allowing it to be accessed dynamically. Such variables are known as variable variables.<br>To turn a variable into a variable variable, you put an extra $ put in front of your variable.<br></p><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$gender</span> = <span class=\"hljs-string\">'male'</span>;\n<span class=\"hljs-variable\">$var</span>    = <span class=\"hljs-string\">'gender'</span>;\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$gender</span>;  <span class=\"hljs-comment\">//male</span>\n<span class=\"hljs-keyword\">echo</span> ${<span class=\"hljs-variable\">$var</span>};  <span class=\"hljs-comment\">//male</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$$var</span>;    <span class=\"hljs-comment\">//male</span>\n<span class=\"hljs-variable\">$$var</span> = <span class=\"hljs-string\">'female'</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$gender</span>;  <span class=\"hljs-comment\">//female</span>\n\n<span class=\"hljs-comment\">// It is possible, but not required to put $variableName between {}:</span>\n${<span class=\"hljs-variable\">$variableName</span>} = <span class=\"hljs-variable\">$value</span>;\n\n\n<span class=\"hljs-variable\">$username</span> = <span class=\"hljs-string\">'Nh-emon'</span>;\n<span class=\"hljs-variable\">$varPrefix</span> = <span class=\"hljs-string\">'user'</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$username</span>;                    <span class=\"hljs-comment\">//\"Nh-emon\"</span>\n<span class=\"hljs-keyword\">echo</span> ${<span class=\"hljs-variable\">$varPrefix</span> . <span class=\"hljs-string\">'name'</span>};       <span class=\"hljs-comment\">//\"Nh-emon\"</span>\n${<span class=\"hljs-variable\">$varPrefix</span> . <span class=\"hljs-string\">'name'</span>} = <span class=\"hljs-string\">'Mahin'</span>;  <span class=\"hljs-comment\">//updaing username value</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$username</span> ;                   <span class=\"hljs-comment\">//Mahin</span>\n\n<span class=\"hljs-comment\">// Using {} is only mandatory when the name of the variable is itself an expression, like this:</span>\n${<span class=\"hljs-variable\">$variableNamePart1</span> . <span class=\"hljs-variable\">$variableNamePart2</span>} = <span class=\"hljs-variable\">$value</span>;\n\n\n\n<span class=\"hljs-comment\">// Variable variables are useful for mapping function/method calls:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> + <span class=\"hljs-variable\">$b</span>;\n}\n<span class=\"hljs-variable\">$funcName</span> = <span class=\"hljs-string\">'add'</span>;\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$funcName</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// outputs 3</span>\n\n\n<span class=\"hljs-comment\">// This becomes particularly helpful in PHP classes:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">myClass</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-variable\">$functionName</span> = <span class=\"hljs-string\">'doSomething'</span>;\n        <span class=\"hljs-variable language_\">$this</span>-&gt;<span class=\"hljs-variable\">$functionName</span>(<span class=\"hljs-string\">'Hello World'</span>);\n    }\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$string</span></span>) </span>{\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$string</span>; <span class=\"hljs-comment\">// Outputs \"Hello World\"</span>\n    }\n}\n\n\n<span class=\"hljs-comment\">// It is nevertheless recommended to always use {}, because it's more readable.</span>\n<span class=\"hljs-comment\">// While it is not recommended to do so, it is possible to chain this behavior:</span>\n<span class=\"hljs-variable\">$$$$$$$$DoNotTryThisAtHomeKids</span> = <span class=\"hljs-variable\">$value</span>;\n\n\n      </code></pre><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : It's important to note that the excessive usage of variable variables is considered a bad practice by many developers. Since they're not well-suited for static analysis by modern IDEs, large codebases with many variable variables (or dynamic method invocations) can quickly become difficult to maintain.<br></p><p></p>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-4096\" aria-expanded=\"false\" aria-control=\"cc-4096\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">show</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-4096\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()</script>// Differences between PHP5 and PHP7<br>// Another reason to always use {} or (), is that PHP5 and PHP7 have a slightly different way of dealing with dynamic<br>// variables, which results in a different outcome in some cases.<br>// In PHP7, dynamic variables, properties, and methods will now be evaluated strictly in left-to-right order, as opposed<br>// to the mix of special cases in PHP5.<br><br>// The examples below show how the order of evaluation has changed.<br>Case 1 : $$foo['bar']['baz']<br>PHP5 interpretation : ${$foo['bar']['baz']}<br>PHP7 interpretation : ($$foo)['bar']['baz']<br><br>Case 2 : $foo-&gt;$bar['baz']<br>PHP5 interpretation : $foo-&gt;{$bar['baz']}<br>PHP7 interpretation : ($foo-&gt;$bar)['baz']<br><br>Case 3 : $foo-&gt;$bar['baz']()<br>PHP5 interpretation : $foo-&gt;{$bar['baz']}()<br>PHP7 interpretation : ($foo-&gt;$bar)['baz']()<br><br>Case 4 : Foo::$bar['baz']()<br>PHP5 interpretation : Foo::{$bar['baz']}()<br>PHP7 interpretation : (Foo::$bar)['baz']()<br><br></div>\n        </div>\n</div>\n</div>","topic_id":15},{"topic_name":"Global Variable","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2 text-center\" data-el=\"heading\">Global Variable<br></h3><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">global keyword</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"> global variables are variables that are accessible across different scopes in your code. You can use the <code>global</code> keyword to access global variables inside functions or methods</p><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">\n<span class=\"hljs-comment\">//without global keyword</span>\n<span class=\"hljs-variable\">$code</span> = <span class=\"hljs-number\">123</span>;\n<span class=\"hljs-variable\">$admin</span> = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printCode</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$code</span>;\n}\n<span class=\"hljs-title function_ invoke__\">printCode</span>(); <span class=\"hljs-comment\">//Undefined variable $code</span>\n\n\n<span class=\"hljs-comment\">//with global keyword</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printCode</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">global</span> <span class=\"hljs-variable\">$code</span>;\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$code</span>;\n}\n<span class=\"hljs-title function_ invoke__\">printCode</span>(); <span class=\"hljs-comment\">//123</span>\n\n<span class=\"hljs-comment\">//global $code,$admin; use comma (,) to declare multiple variable</span>\n\n\n\n      </code></pre><p></p>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-6423\" aria-expanded=\"false\" aria-control=\"cc-6423\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">show</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-6423\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()</script>// We can illustrate this problem with the following pseudo-code<br>function foo() {<br>&nbsp;&nbsp;&nbsp; global $bob;<br>&nbsp;&nbsp;&nbsp; $bob-&gt;doSomething();<br>}<br><br>// Your first question here is an obvious one Where did $bob come from?<br><br>// Are you confused? Good. You've just learned why globals are confusing and considered a bad practice.<br>// If this were a real program, your next bit of fun is to go track down all instances of $bob and hope you find the right<br>// one (this gets worse if $bob is used everywhere). Worse, if someone else goes and defines $bob (or you forgot and<br>// reused that variable) your code can break (in the above code example, having the wrong object, or no object at all,<br>// would cause a fatal error).<br><br>// Since virtually all PHP programs make use of code like include('file.php'); your job maintaining code like this<br>// becomes exponentially harder the more files you add.<br>// Also, this makes the task of testing your applications very difficult. Suppose you use a global variable to hold your<br>// database connection:<br><br>$dbConnector = new DBConnector(...);<br>function doSomething() {<br>&nbsp;&nbsp;&nbsp; global $dbConnector;<br>&nbsp;&nbsp;&nbsp; $dbConnector-&gt;execute(\"...\");<br>}<br><br>// In order to unit test this function, you have to override the global $dbConnector variable, run the tests and then<br>// reset it to its original value, which is very bug prone:<br>/**<br>&nbsp;* @test<br>&nbsp;*/<br><br>function testSomething() {<br>&nbsp;&nbsp;&nbsp;&nbsp; global $dbConnector;<br>&nbsp;&nbsp;&nbsp;&nbsp; $bkp = $dbConnector; // Make backup<br>&nbsp;&nbsp;&nbsp;&nbsp; $dbConnector = Mock::create('DBConnector'); // Override<br>&nbsp;&nbsp;&nbsp;&nbsp; assertTrue(foo());<br>&nbsp;&nbsp;&nbsp;&nbsp; $dbConnector = $bkp; // Restore<br>}<br><br>// How do we avoid Globals?<br>// The best way to avoid globals is a philosophy called Dependency Injection. This is where we pass the tools we<br>// need into the function or class.<br>function foo(\\Bar $bob) {<br>&nbsp;&nbsp;&nbsp; $bob-&gt;doSomething();<br>}<br>// This is much easier to understand and maintain. There's no guessing where $bob was set up because the caller is<br>// responsible for knowing that (it's passing us what we need to know). Better still, we can use type declarations to<br>// restrict what's being passed.<br><br>// So we know that $bob is either an instance of the Bar class, or an instance of a child of Bar, meaning we know we<br>// can use the methods of that class. Combined with a standard autoloader (available since PHP 5.3), we can now go<br>// track down where Bar is defined. PHP 7.0 or later includes expanded type declarations, where you can also use<br>// scalar types (like int or string).<br>// Version = 4.1<br><br></div>\n        </div>\n</div>\n<h5 class=\"p-2 mb-2\" data-el=\"title\">Super Global Variable<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">$GLOBALS\n</li><li data-el=\"list\">$_SERVER\n</li><li data-el=\"list\">$_REQUEST\n</li><li data-el=\"list\">$_POST\n</li><li data-el=\"list\">$_GET\n</li><li data-el=\"list\">$_FILES\n</li><li data-el=\"list\">$_ENV\n</li><li data-el=\"list\">$_COOKIE\n</li><li data-el=\"list\">$_SESSION\n</li></ul></div>","topic_id":16}],"chapter_id":32},{"chapter_name":"3 . Variable Scope","topics":[{"topic_name":"test","topic_html":"","topic_id":63}],"chapter_id":39},{"chapter_name":"4 . Super Global Variable","topics":[],"chapter_id":40},{"chapter_name":"5 . Output","topics":[],"chapter_id":41},{"chapter_name":"6 . Constants","topics":[],"chapter_id":42},{"chapter_name":"7 . Magic Constant","topics":[],"chapter_id":43},{"chapter_name":"8 . Comments","topics":[],"chapter_id":44},{"chapter_name":"9 . Types","topics":[],"chapter_id":45},{"chapter_name":"10 . Operators","topics":[],"chapter_id":46},{"chapter_name":"11 . References","topics":[],"chapter_id":47},{"chapter_name":"12 . Arrays","topics":[{"topic_name":"range","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">range<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In PHP, you can use the range() function to create an array of elements within a specified range. The range() function return an <span style=\"color: #ef1f79;\" class=\"\">array</span> that contains elements from a starting value to an ending value, with an optional step parameter.This function is useful for generating sequences or ranges of values in a concise way.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">syntax<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-variable\">$start</span>,<span class=\"hljs-variable\">$end</span>, <span class=\"hljs-keyword\">int</span>|<span class=\"hljs-keyword\">float</span> <span class=\"hljs-variable\">$step</span> = <span class=\"hljs-number\">1</span>): <span class=\"hljs-keyword\">array</span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Examples :<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//Creating an array of numbers:</span>\n<span class=\"hljs-variable\">$numbers</span> = <span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$numbers</span>);\n<span class=\"hljs-comment\">// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\n\n<span class=\"hljs-comment\">//or </span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>))\n<span class=\"hljs-comment\">// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] </span>\n\n<span class=\"hljs-comment\">//Creating an array of letters:</span>\n<span class=\"hljs-variable\">$letters</span> = <span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'f'</span>);\n<span class=\"hljs-comment\">// Output: ['a', 'b', 'c', 'd', 'e', 'f']</span>\n   \n<span class=\"hljs-comment\">//Using a step value:</span>\n<span class=\"hljs-variable\">$evenNumbers</span> = <span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// Output: [0, 2, 4, 6, 8, 10]</span>\n   \n<span class=\"hljs-comment\">//with forEach loop</span>\n<span class=\"hljs-title function_ invoke__\">forEach</span>(<span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$num</span>){\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$num</span>;\n   <span class=\"hljs-comment\">//output:12345678910</span>\n}\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto border p-2 content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Notes :<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">The start and end values can be integers or characters</li><li data-el=\"list\">\nThe step parameter is optional and defaults to 1, it can be positive or negative</li><li data-el=\"list\">\nIf start is greater than end and step is positive, the result will be an empty array unless you provide a negative step\n</li></ul><p></p></div>","topic_id":36},{"topic_name":"array extract","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Array extract<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The extract() function in PHP is used to import variables from an array into the current symbol table. This means that the keys of the array become variable names, and the values of the array become the corresponding values of those variables.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">syntax<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">extract</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$flags</span> = EXTR_OVERWRITE, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$prefix</span> = <span class=\"hljs-string\">\"\"</span>): <span class=\"hljs-keyword\">int</span>\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-8763\" aria-expanded=\"false\" aria-control=\"cc-8763\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">more</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-8763\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">$<span style=\"color: #ffb997;\" class=\"\">array</span> : The associative array from which variables will be extracted<br></li> <li data-el=\"list\" class=\"\">$<span style=\"color: #ffb997;\" class=\"\">flags</span> : This parameter determines how conflicts between existing variables and array keys are handled.Some common flags include :<br><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">     <span style=\"\" class=\"\"><span style=\"\" class=\"bold\">EXTR_OVERWRITE</span></span>: Default behavior <span style=\"\" class=\"bold\">existing v</span>ariables are overwritten by the array values</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_SKIP</span> : Existing variables are not overwritten</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_PREFIX_SAME</span> : If a variable name already exists, the array key will be prefixed to create a new variable name</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_PREFIX_ALL</span> : All variable names will have the specified prefix, regardless of conflicts</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_PREFIX_INVALID</span> : Only invalid or numeric variable names will have the specified prefix</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_PREFIX_IF_EXISTS</span> : Prefixes only variables that already exist in the current symbol table</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_IF_EXISTS</span> : Only existing variables will be overwritten</li><li data-el=\"list\" class=\"\">\n     <span style=\"\" class=\"bold\">EXTR_REFS</span> : Extracts variables as references, meaning changes to the variables will affect the array and vice versa</li></ul></li> <li data-el=\"list\" class=\"\">$<span style=\"color: #ffb997;\" class=\"\">prefix</span> : A string that is used as a prefix for all or some of the variable names, depending on the $flags used.<br></li><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The function returns the number of variables successfully extracted</p></ul></div>\n        </div>\n</div>\n</div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Example :<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//Basic Example</span>\n<span class=\"hljs-variable\">$data</span> = [\n    <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Alice\"</span>,\n    <span class=\"hljs-string\">\"age\"</span> =&gt; <span class=\"hljs-number\">30</span>,\n    <span class=\"hljs-string\">\"city\"</span> =&gt; <span class=\"hljs-string\">\"New York\"</span>\n];\n<span class=\"hljs-title function_ invoke__\">extract</span>(<span class=\"hljs-variable\">$data</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$name</span>;  <span class=\"hljs-comment\">// Outputs: Alice</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$age</span>;   <span class=\"hljs-comment\">// Outputs: 30</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$city</span>;  <span class=\"hljs-comment\">// Outputs: New York</span>\n\n\n<span class=\"hljs-comment\">//Using a Prefix</span>\n<span class=\"hljs-variable\">$data</span> = [\n    <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Alice\"</span>,\n    <span class=\"hljs-string\">\"age\"</span> =&gt; <span class=\"hljs-number\">30</span>,\n    <span class=\"hljs-string\">\"city\"</span> =&gt; <span class=\"hljs-string\">\"New York\"</span>\n];\n<span class=\"hljs-title function_ invoke__\">extract</span>(<span class=\"hljs-variable\">$data</span>, EXTR_PREFIX_ALL, <span class=\"hljs-string\">\"user\"</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$user_name</span>;  <span class=\"hljs-comment\">// Outputs: Alice</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$user_age</span>;   <span class=\"hljs-comment\">// Outputs: 30</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$user_city</span>;  <span class=\"hljs-comment\">// Outputs: New York</span>\n\n\n<span class=\"hljs-comment\">//Handling Conflicts with Existing Variables</span>\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"Bob\"</span>;\n<span class=\"hljs-variable\">$data</span> = [\n    <span class=\"hljs-string\">\"name\"</span> =&gt; <span class=\"hljs-string\">\"Alice\"</span>,\n    <span class=\"hljs-string\">\"age\"</span> =&gt; <span class=\"hljs-number\">30</span>\n];\n<span class=\"hljs-title function_ invoke__\">extract</span>(<span class=\"hljs-variable\">$data</span>, EXTR_SKIP);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$name</span>;  <span class=\"hljs-comment\">// Outputs: Bob (because EXTR_SKIP was used)</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$age</span>;   <span class=\"hljs-comment\">// Outputs: 30</span>\n\n      </code></pre></div><div class=\"w-100 my-2 py-1\"></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 content-section rounded-2\" data-el=\"section\"><div class=\"w-100 my-2 py-1\"></div><div class=\"w-100 my-2 py-1\"></div><p style=\"--note-bar-color:var(--bs-danger)\" class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Caution : <br><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"color: #ef1f79;\" class=\"\">Security Considerations</span> : Be careful when using extract() with data from untrusted sources (like user input) as it can potentially overwrite important variables, leading to security vulnerabilities or unexpected behavior.<br></li> <li data-el=\"list\" class=\"\"><span style=\"color: #ef1f79;\" class=\"\">Readability</span> : Overusing extract()&nbsp; can make code harder to understand, as it may not be clear where certain variables are coming from, explicit variable assignment is generally preferred for better readability and maintainability.</li></ul></p><p></p></div>","topic_id":37},{"topic_name":"array compact","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">array compact<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The <code>compact()</code> function in PHP creates an array from a list of variables and their values. It essentially does the reverse of the <code>extract()</code> function: it takes variable names and creates an associative array where the keys are the variable names and the values are the variable values.</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Basic Syntax :<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">compact</span>(<span class=\"hljs-keyword\">mixed</span> ...<span class=\"hljs-variable\">$var_names</span>): <span class=\"hljs-keyword\">array</span>\n\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">$var_names : This can be a string (the name of a variable) or an array of variable names. You can pass multiple variable names as separate arguments or an array of variable names.<br></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The function returns an associative array with the variable names as keys and their corresponding values as values</p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Example :<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Basic Example :<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"Alice\"</span>;\n<span class=\"hljs-variable\">$age</span> = <span class=\"hljs-number\">30</span>;\n<span class=\"hljs-variable\">$city</span> = <span class=\"hljs-string\">\"New York\"</span>;\n\n<span class=\"hljs-comment\">// Create an associative array from the variables</span>\n<span class=\"hljs-variable\">$data</span> = <span class=\"hljs-title function_ invoke__\">compact</span>(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'age'</span>, <span class=\"hljs-string\">'city'</span>);\n\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$data</span>);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-comment\">// (</span>\n<span class=\"hljs-comment\">//     [name] =&gt; Alice</span>\n<span class=\"hljs-comment\">//     [age] =&gt; 30</span>\n<span class=\"hljs-comment\">//     [city] =&gt; New York</span>\n<span class=\"hljs-comment\">// )</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">Using an Array of Variable Names :<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"Bob\"</span>;\n<span class=\"hljs-variable\">$age</span> = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-variable\">$country</span> = <span class=\"hljs-string\">\"Canada\"</span>;\n\n<span class=\"hljs-variable\">$variables</span> = [<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'age'</span>, <span class=\"hljs-string\">'country'</span>];\n\n<span class=\"hljs-comment\">// Create an associative array from the array of variable names</span>\n<span class=\"hljs-variable\">$data</span> = <span class=\"hljs-title function_ invoke__\">compact</span>(<span class=\"hljs-variable\">$variables</span>);\n\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$data</span>);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-comment\">// (</span>\n<span class=\"hljs-comment\">//     [name] =&gt; Bob</span>\n<span class=\"hljs-comment\">//     [age] =&gt; 25</span>\n<span class=\"hljs-comment\">//     [country] =&gt; Canada</span>\n<span class=\"hljs-comment\">// )</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">Handling Undefined Variables :<br><pre class=\"copy-container my-2 code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">\"Charlie\"</span>;\n<span class=\"hljs-variable\">$city</span> = <span class=\"hljs-string\">\"London\"</span>;\n\n<span class=\"hljs-comment\">// $age is not defined</span>\n\n<span class=\"hljs-variable\">$data</span> = <span class=\"hljs-title function_ invoke__\">compact</span>(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'age'</span>, <span class=\"hljs-string\">'city'</span>);\n\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$data</span>);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-comment\">// (</span>\n<span class=\"hljs-comment\">//     [name] =&gt; Charlie</span>\n<span class=\"hljs-comment\">//     [age] =&gt;  // 'age' is included but has no value</span>\n<span class=\"hljs-comment\">//     [city] =&gt; London</span>\n<span class=\"hljs-comment\">// )</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 content-section rounded-2\" data-el=\"section\"><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note :<br><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>Undefined Variables</strong>: If a variable passed to <code>compact()</code> does not exist in the current scope, the key will still be created in the resulting array, but its value will be <code>NULL</code></li> <li data-el=\"list\" class=\"\"><strong>Use Case</strong>: <code>compact()</code> is useful when you want to pass a set of variables to a function that expects an array, such as a template rendering function, without manually creating the array.</li></ul></p></div>","topic_id":38},{"topic_name":"array list()","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">array list() function<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The <code>list()</code> function in PHP is used to assign values from an array to a list of variables in one operation. It \"unpacks\" the array into separate variables, which can be particularly useful for working with arrays that have a known structure, such as those returned by certain functions.</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Basic Syntax :<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">list</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$var1</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$var2</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$var3</span>, ...) = <span class=\"hljs-keyword\">array</span>;\n      </code></pre>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-5200\" aria-expanded=\"false\" aria-control=\"cc-5200\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">show</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-5200\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><h5 class=\"p-2 mb-2\" data-el=\"title\">Parameters :<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">$var1 , $var2 , $var3 : These are the variables to which the array values will be assigned</li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">array</span> : The array whose elements will be assigned to the variables listed in <code>list()</code></li></ul><h5 class=\"p-2 mb-2\" data-el=\"title\">Important Notes :<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Order Matters</span>: The order of variables in list() corresponds to the order of elements in the array</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">Numeric Indexes Only</span>: list() only works with arrays that use numeric indexes, starting from 0 , associative arrays with string keys cannot be used directly with list()</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">Skipping Values</span>: You can skip certain values by leaving a variable position empty (e.g , list($a, , $c))</li></ul></div>\n        </div>\n</div>\n</div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Examples :<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">Basic Example :<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// An array with three elements</span>\n<span class=\"hljs-variable\">$data</span> = [<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-string\">\"New York\"</span>];\n\n<span class=\"hljs-comment\">// Unpack the array into variables</span>\n<span class=\"hljs-keyword\">list</span>(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$age</span>, <span class=\"hljs-variable\">$city</span>) = <span class=\"hljs-variable\">$data</span>;\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Name: <span class=\"hljs-subst\">$name</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: Name: Alice</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Age: <span class=\"hljs-subst\">$age</span>\\n\"</span>;   <span class=\"hljs-comment\">// Outputs: Age: 30</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"City: <span class=\"hljs-subst\">$city</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: City: New York</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">Skiping values :<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// An array with three elements</span>\n<span class=\"hljs-variable\">$data</span> = [<span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">\"Los Angeles\"</span>];\n\n<span class=\"hljs-comment\">// Only unpack the first and third elements</span>\n<span class=\"hljs-keyword\">list</span>(<span class=\"hljs-variable\">$name</span>, , <span class=\"hljs-variable\">$city</span>) = <span class=\"hljs-variable\">$data</span>;\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Name: <span class=\"hljs-subst\">$name</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: Name: Bob</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"City: <span class=\"hljs-subst\">$city</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: City: Los Angeles</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">Using with function<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// A function that returns an array</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserInfo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">\"Charlie\"</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-string\">\"Chicago\"</span>];\n}\n\n<span class=\"hljs-comment\">// Unpack the return value into variables</span>\n<span class=\"hljs-keyword\">list</span>(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$age</span>, <span class=\"hljs-variable\">$city</span>) = <span class=\"hljs-title function_ invoke__\">getUserInfo</span>();\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Name: <span class=\"hljs-subst\">$name</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: Name: Charlie</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Age: <span class=\"hljs-subst\">$age</span>\\n\"</span>;   <span class=\"hljs-comment\">// Outputs: Age: 28</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"City: <span class=\"hljs-subst\">$city</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: City: Chicago</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">Combining <code>list()</code> with <code>array</code> Functions : You can use <code>list()</code> in combination with functions like <code>explode()</code> or <code>array_slice()</code> to quickly assign array values to variables.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// Split a string into an array</span>\n<span class=\"hljs-variable\">$data</span> = <span class=\"hljs-string\">\"John,35,Boston\"</span>;\n<span class=\"hljs-keyword\">list</span>(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$age</span>, <span class=\"hljs-variable\">$city</span>) = <span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-variable\">$data</span>);\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Name: <span class=\"hljs-subst\">$name</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: Name: John</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Age: <span class=\"hljs-subst\">$age</span>\\n\"</span>;   <span class=\"hljs-comment\">// Outputs: Age: 35</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"City: <span class=\"hljs-subst\">$city</span>\\n\"</span>; <span class=\"hljs-comment\">// Outputs: City: Boston</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></li><li data-el=\"list\" class=\"\">Assigning to new array :<br><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$old_arr</span> = [<span class=\"hljs-string\">'emon'</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-string\">'Barishal'</span>];\n<span class=\"hljs-keyword\">list</span>(<span class=\"hljs-variable\">$new_arr</span>[<span class=\"hljs-number\">0</span>],,<span class=\"hljs-variable\">$new_arr</span>[<span class=\"hljs-number\">2</span>])=<span class=\"hljs-variable\">$old_arr</span>;\nphp &gt; <span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$new_arr</span>);\n<span class=\"hljs-comment\">//Array</span>\n<span class=\"hljs-comment\">//(</span>\n<span class=\"hljs-comment\">//    [0] =&gt; emon</span>\n <span class=\"hljs-comment\">//   [2] =&gt; Barishal</span>\n<span class=\"hljs-comment\">//)</span>\n      </code></pre></li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 content-section rounded-2\" data-el=\"section\"><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Summary : The <code>list()</code> function in PHP is a convenient way to assign values from an indexed array to individual variables in a single line. It's especially useful when you know the structure of the array you're working with and want to quickly access its elements in a more readable way.</p></div>","topic_id":39},{"topic_name":"Array Traversing","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Traversing<br></h3><p>In PHP, array traversing refers to iterating or looping through the elements of an array to access, modify, or display its values. Here are some common ways to traverse arrays in PHP:</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">foreach</span>(<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$value</span>) {}\n<span class=\"hljs-keyword\">foreach</span>(<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>) {}\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-variable\">$i</span>++) {}\n<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-variable\">$condition</span>) {}\n</code></pre>\n<h3><code>foreach</code> (Traversing values)</h3>\n<p>This method loops through each element of the array by value.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$value</span>;  <span class=\"hljs-comment\">// Output: 12345</span>\n}\n</code></pre>\n<h3><code>foreach</code> (Traversing keys and values)</h3>\n<p>This method allows access to both keys and values of the array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$key</span> =&gt; <span class=\"hljs-subst\">$value</span> \"</span>;  <span class=\"hljs-comment\">// Output: a =&gt; 1 b =&gt; 2 c =&gt; 3</span>\n}\n</code></pre>\n<h3><code>for</code> loop</h3>\n<p>This method uses a traditional <code>for</code> loop to iterate over arrays by index.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-variable\">$i</span>++) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>];  <span class=\"hljs-comment\">// Output: 10203040</span>\n}\n</code></pre>\n<h3><code>while</code> loop</h3>\n<p>This method traverses an array while a condition holds true.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>];\n<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>)) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>];  <span class=\"hljs-comment\">// Output: 51015</span>\n    <span class=\"hljs-variable\">$i</span>++;\n}\n</code></pre>\n</section>","topic_id":139},{"topic_name":"Array Sort","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array sort<br></h3><p>PHP provides various functions for sorting arrays in different ways, such as sorting by values, keys, in ascending or descending order, and maintaining or not maintaining the key-value association. Below are some commonly used array sorting functions.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">sort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">rsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">asort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">arsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">ksort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">krsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">usort</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n<span class=\"hljs-title function_ invoke__\">uasort</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n<span class=\"hljs-title function_ invoke__\">uksort</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n</code></pre>\n<h3><code>sort()</code> - Sorts an array in ascending order by value</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">sort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 1 [1] =&gt; 1 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 )</span>\n</code></pre>\n<h3><code>rsort()</code> - Sorts an array in descending order by value</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">rsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 5 [1] =&gt; 4 [2] =&gt; 3 [3] =&gt; 1 [4] =&gt; 1 )</span>\n</code></pre>\n<h3><code>asort()</code> - Sorts an array in ascending order while maintaining key association</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">asort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [b] =&gt; 1 [a] =&gt; 3 [c] =&gt; 4 )</span>\n</code></pre>\n<h3><code>arsort()</code> - Sorts an array in descending order while maintaining key association</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">arsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [c] =&gt; 4 [a] =&gt; 3 [b] =&gt; 1 )</span>\n</code></pre>\n<h3><code>ksort()</code> - Sorts an array by key in ascending order</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">ksort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [a] =&gt; 1 [b] =&gt; 4 [c] =&gt; 3 )</span>\n</code></pre>\n<h3><code>krsort()</code> - Sorts an array by key in descending order</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">krsort</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [c] =&gt; 3 [b] =&gt; 4 [a] =&gt; 1 )</span>\n</code></pre>\n<h3><code>usort()</code> - Sorts values of an array using a user-defined comparison function</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">usort</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> - <span class=\"hljs-variable\">$b</span>; });\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 1 [1] =&gt; 1 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 )</span>\n</code></pre>\n<h3><code>uasort()</code> - Sorts values of an array with a user-defined comparison function, maintaining key association</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">uasort</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> - <span class=\"hljs-variable\">$b</span>; });\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [b] =&gt; 1 [a] =&gt; 3 [c] =&gt; 4 )</span>\n</code></pre>\n<h3><code>uksort()</code> - Sorts an array by keys using a user-defined comparison function</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"c\"</span> =&gt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"a\"</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span> =&gt; <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">uksort</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">strcmp</span>(<span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span>); });\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [a] =&gt; 1 [b] =&gt; 4 [c] =&gt; 3 )</span>\n</code></pre>\n</section>","topic_id":140},{"topic_name":"Array Reduce","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Reduce<br></h3><p>The <code>array_reduce()</code> function in PHP iterates over an array and reduces it to a single value using a callback function. The callback function is applied cumulatively to the array elements, starting from an optional initial value.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n<span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>, <span class=\"hljs-variable\">$initial</span>);\n</code></pre>\n<h3><code>array_reduce()</code> - Reduces an array to a single value using a callback function</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-comment\">// Sum of all values in the array</span>\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$carry</span>, <span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$carry</span> + <span class=\"hljs-variable\">$item</span>;\n});\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$result</span>;  <span class=\"hljs-comment\">// Output: 15</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">without inital parameter<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-comment\">// Product of all values in the array</span>\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$carry</span>, <span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$carry</span> * <span class=\"hljs-variable\">$item</span>;\n});\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$result</span>;  <span class=\"hljs-comment\">// Output: 0</span>\n</code></pre><pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">with intial parameter&nbsp; 1<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-comment\">// Product of all values in the array</span>\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$carry</span>, <span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$carry</span> * <span class=\"hljs-variable\">$item</span>;\n}, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$result</span>;  <span class=\"hljs-comment\">// Output: 120</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">with initail parameter \" \"<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>];\n\n<span class=\"hljs-comment\">// Concatenate all values in the array</span>\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_reduce</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$carry</span>, <span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$carry</span> . <span class=\"hljs-variable\">$item</span>;\n}, <span class=\"hljs-string\">\"\"</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$result</span>;  <span class=\"hljs-comment\">// Output: applebananacherry</span>\n</code></pre>\n<p>In these examples:</p>\n<ul class=\"\">\n<li>The <code>carry</code> variable holds the accumulated result.</li>\n<li>The <code>item</code> variable holds the current array element.</li>\n<li class=\"\">An initial value can be specified, or the first element will be used as the initial value if omitted.</li>\n</ul>\n</section><section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">How Array Reduce work?<br></h3>\n<h3 class=\"\">Example: Sum of an Array <code>[1, 2, 3, 4]</code> using <code class=\"\">array_reduce()</code></h3>\n<h4>Initial Array:</h4>\n<p><code>[1, 2, 3, 4]</code></p>\n<h4>Callback:</h4>\n<p><code>callback(accumulator, currentValue)</code></p>\n\n<table class=\"table mx-auto\">\n<thead>\n<tr>\n<th>Step</th>\n<th>Accumulator</th>\n<th>Current Value</th>\n<th>Action Performed</th>\n<th class=\"\">Result (Accumulator)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Initial (0)</td>\n<td>1</td>\n<td><code>0 + 1</code></td>\n<td class=\"text-danger\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td class=\"text-danger\">1</td>\n<td>2</td>\n<td><code>1 + 2</code></td>\n<td class=\"text-primary\">3</td>\n</tr>\n<tr>\n<td>3</td>\n<td class=\"text-primary\">3</td>\n<td>3</td>\n<td><code>3 + 3</code></td>\n<td class=\"text-info\">6</td>\n</tr>\n<tr>\n<td>4</td>\n<td class=\"text-info\">6</td>\n<td>4</td>\n<td><code>6 + 4</code></td>\n<td class=\"bg-success\">10</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3>Final Result: <strong>10</strong></h3>\n<hr>\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Initial Value</strong>: We start with an accumulator (initial value), which is often 0, or another initial value if specified.</li>\n<li><strong>Iteration</strong>: Each element of the array (<code>currentValue</code>) is passed along with the <code>accumulator</code> to the callback function.</li>\n<li><strong>Update</strong>: The result of the callback is stored in the <code>accumulator</code> and used in the next iteration.</li>\n<li><strong>Final Result</strong>: After all iterations, the final value of the accumulator is returned as the result.</li>\n</ul>\n<hr>\n<p>This logic can be applied to any kind of operation: sum, product, concatenation, etc., using the appropriate callback function for <code>array_reduce()</code> in any programming language.</p>\n</section>","topic_id":141},{"topic_name":"Array Map","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Map<br></h3><p>The <code>array_map()</code> function in PHP applies a callback function to each element of an array (or multiple arrays) and returns a new array with the results. It's commonly used for transforming array elements.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_map</span>(<span class=\"hljs-variable\">$callback</span>, <span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">array_map</span>(<span class=\"hljs-variable\">$callback</span>, <span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>, ...);\n</code></pre>\n<h3><code>array_map()</code> - Applies a callback function to each element of an array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Squaring each element of an array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_map</span>(function(<span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$item</span> * <span class=\"hljs-variable\">$item</span>;\n}, <span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$result</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 1 [1] =&gt; 4 [2] =&gt; 9 [3] =&gt; 16 [4] =&gt; 25 )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Converting each element to uppercase</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_map</span>(<span class=\"hljs-string\">'strtoupper'</span>, <span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$result</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; APPLE [1] =&gt; BANANA [2] =&gt; CHERRY )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Using multiple arrays (adding elements at corresponding indices)</span>\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">array_map</span>(function(<span class=\"hljs-variable\">$a</span>, <span class=\"hljs-variable\">$b</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> + <span class=\"hljs-variable\">$b</span>;\n}, <span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$result</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 5 [1] =&gt; 7 [2] =&gt; 9 )</span>\n</code></pre>\n<p>In these examples:</p>\n<ul>\n<li>The callback function is applied to each element in the input array(s).</li>\n<li>The result of the callback is collected into a new array.</li>\n<li>Multiple arrays can be passed, and the callback function will receive elements from each array at the same index.</li>\n</ul>\n</section>","topic_id":142},{"topic_name":"Array Walk","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Walk<br></h3><p>The <code>array_walk()</code> and <code>array_walk_recursive()</code> functions in PHP allow you to apply a user-defined callback function to every element of an array. The main difference is that <code>array_walk_recursive()</code> processes multi-dimensional arrays recursively, while <code>array_walk()</code> only operates on the top level of the array.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_walk</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n<span class=\"hljs-title function_ invoke__\">array_walk</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>, <span class=\"hljs-variable\">$userdata</span>);\n<span class=\"hljs-title function_ invoke__\">array_walk_recursive</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>);\n<span class=\"hljs-title function_ invoke__\">array_walk_recursive</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$callback</span>, <span class=\"hljs-variable\">$userdata</span>);\n</code></pre>\n<h3><code>array_walk()</code> - Applies a callback function to each element of an array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Modify each element of an array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">array_walk</span>(<span class=\"hljs-variable\">$array</span>, function(&amp;<span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-variable\">$item</span> *= <span class=\"hljs-number\">2</span>;\n});\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  <span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; 6 [3] =&gt; 8 [4] =&gt; 10 )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Access array keys and values</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">array_walk</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$value</span>, <span class=\"hljs-variable\">$key</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$key</span> =&gt; <span class=\"hljs-subst\">$value</span>\\n\"</span>;\n});\n<span class=\"hljs-comment\">// Output: </span>\n<span class=\"hljs-comment\">// a =&gt; apple</span>\n<span class=\"hljs-comment\">// b =&gt; banana</span>\n<span class=\"hljs-comment\">// c =&gt; cherry</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Using user-defined data</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">array_walk</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$value</span>, <span class=\"hljs-variable\">$key</span>, <span class=\"hljs-variable\">$prefix</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$prefix</span>: <span class=\"hljs-subst\">$value</span>\\n\"</span>;\n}, <span class=\"hljs-string\">'Fruit'</span>);\n<span class=\"hljs-comment\">// Output: </span>\n<span class=\"hljs-comment\">// Fruit: apple</span>\n<span class=\"hljs-comment\">// Fruit: banana</span>\n<span class=\"hljs-comment\">// Fruit: cherry</span>\n</code></pre>\n<h3><code>array_walk_recursive()</code> - Applies a callback function to each element of a multi-dimensional array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Traverse a multi-dimensional array</span>\n<span class=\"hljs-variable\">$array</span> = [\n    <span class=\"hljs-string\">'fruits'</span> =&gt; [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>],\n    <span class=\"hljs-string\">'vegetables'</span> =&gt; [<span class=\"hljs-string\">'carrot'</span>, <span class=\"hljs-string\">'lettuce'</span>]\n];\n<span class=\"hljs-title function_ invoke__\">array_walk_recursive</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$item</span>, <span class=\"hljs-variable\">$key</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$key</span> =&gt; <span class=\"hljs-subst\">$item</span>\\n\"</span>;\n});\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// 0 =&gt; apple</span>\n<span class=\"hljs-comment\">// 1 =&gt; banana</span>\n<span class=\"hljs-comment\">// 0 =&gt; carrot</span>\n<span class=\"hljs-comment\">// 1 =&gt; lettuce</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Modify elements of a multi-dimensional array</span>\n<span class=\"hljs-variable\">$array</span> = [\n    <span class=\"hljs-string\">'numbers'</span> =&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\n    <span class=\"hljs-string\">'letters'</span> =&gt; [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>]\n];\n<span class=\"hljs-title function_ invoke__\">array_walk_recursive</span>(<span class=\"hljs-variable\">$array</span>, function(&amp;<span class=\"hljs-variable\">$item</span>) {\n    <span class=\"hljs-variable\">$item</span> = <span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-title function_ invoke__\">strval</span>(<span class=\"hljs-variable\">$item</span>));\n});\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: </span>\n<span class=\"hljs-comment\">// Array ( </span>\n<span class=\"hljs-comment\">//   [numbers] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 ) </span>\n<span class=\"hljs-comment\">//   [letters] =&gt; Array ( [0] =&gt; A [1] =&gt; B ) </span>\n<span class=\"hljs-comment\">// )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Using user-defined data with a multi-dimensional array</span>\n<span class=\"hljs-variable\">$array</span> = [\n    <span class=\"hljs-string\">'a'</span> =&gt; [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'apricot'</span>],\n    <span class=\"hljs-string\">'b'</span> =&gt; [<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'blueberry'</span>]\n];\n<span class=\"hljs-title function_ invoke__\">array_walk_recursive</span>(<span class=\"hljs-variable\">$array</span>, function(<span class=\"hljs-variable\">$item</span>, <span class=\"hljs-variable\">$key</span>, <span class=\"hljs-variable\">$prefix</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$prefix</span>: <span class=\"hljs-subst\">$item</span>\\n\"</span>;\n}, <span class=\"hljs-string\">'Fruit'</span>);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Fruit: apple</span>\n<span class=\"hljs-comment\">// Fruit: apricot</span>\n<span class=\"hljs-comment\">// Fruit: banana</span>\n<span class=\"hljs-comment\">// Fruit: blueberry</span>\n</code></pre>\n<p>In these examples:</p>\n<ul>\n<li><code>array_walk()</code> applies the callback only to the top-level elements.</li>\n<li><code>array_walk_recursive()</code> goes deeper and processes all elements in multi-dimensional arrays.</li>\n</ul>\n</section>","topic_id":143},{"topic_name":"Array fill","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Fill<br></h3><p>The <code>array_fill()</code> and <code>array_fill_keys()</code> functions in PHP allow you to populate arrays with specific values. <code>array_fill()</code> fills an array with a specified value starting from a given index, while <code>array_fill_keys()</code> fills an array with values based on specified keys.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_fill</span>(<span class=\"hljs-variable\">$start_index</span>, <span class=\"hljs-variable\">$num</span>, <span class=\"hljs-variable\">$value</span>);\n<span class=\"hljs-title function_ invoke__\">array_fill_keys</span>(<span class=\"hljs-variable\">$keys</span>, <span class=\"hljs-variable\">$value</span>);\n</code></pre>\n<h3><code>array_fill()</code> - Fills an array with values starting at a specified index</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Filling an array with the value \"apple\" from index 0, for 5 elements</span>\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"apple\"</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  \n<span class=\"hljs-comment\">// Output: Array ( [0] =&gt; apple [1] =&gt; apple [2] =&gt; apple [3] =&gt; apple [4] =&gt; apple )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Filling an array with the value 1 starting from index 3, for 4 elements</span>\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [3] =&gt; 1 [4] =&gt; 1 [5] =&gt; 1 [6] =&gt; 1 )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Filling an array with negative start index</span>\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill</span>(-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"banana\"</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [-2] =&gt; banana [-1] =&gt; banana [0] =&gt; banana )</span>\n</code></pre>\n<h3><code>array_fill_keys()</code> - Fills an array with values using an array of keys</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Filling an array with values using specific keys</span>\n<span class=\"hljs-variable\">$keys</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill_keys</span>(<span class=\"hljs-variable\">$keys</span>, <span class=\"hljs-string\">'fruit'</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);  \n<span class=\"hljs-comment\">// Output: Array ( [a] =&gt; fruit [b] =&gt; fruit [c] =&gt; fruit )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Using numeric keys</span>\n<span class=\"hljs-variable\">$keys</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill_keys</span>(<span class=\"hljs-variable\">$keys</span>, <span class=\"hljs-number\">100</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [1] =&gt; 100 [2] =&gt; 100 [3] =&gt; 100 )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Filling an array with a null value</span>\n<span class=\"hljs-variable\">$keys</span> = [<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'z'</span>];\n<span class=\"hljs-variable\">$array</span> = <span class=\"hljs-title function_ invoke__\">array_fill_keys</span>(<span class=\"hljs-variable\">$keys</span>, <span class=\"hljs-literal\">null</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [x] =&gt; [y] =&gt; [z] =&gt; )</span>\n</code></pre>\n<p>In these examples:</p>\n<ul>\n<li><code>array_fill()</code> creates an array by filling it with a specified value, starting from a given index.</li>\n<li><code>array_fill_keys()</code> creates an array where the keys come from an existing array, and each key is assigned the same value.</li>\n</ul>\n</section>","topic_id":144},{"topic_name":"Array Random and Shuffle","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h3 class=\"\">Array Rand and Shuffle<br></h3><p>The <code>array_rand()</code> and <code>shuffle()</code> functions in PHP work with arrays, but they serve different purposes. <code>array_rand()</code> selects one or more random keys from an array, while <code>shuffle()</code> shuffles the entire array in place, changing the order of its elements.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_rand</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">array_rand</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$num</span>);\n<span class=\"hljs-title function_ invoke__\">shuffle</span>(<span class=\"hljs-variable\">$array</span>);\n</code></pre>\n<h3><code>array_rand()</code> - Selects one or more random keys from an array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Picking one random key from an array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-variable\">$randomKey</span> = <span class=\"hljs-title function_ invoke__\">array_rand</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$randomKey</span> . <span class=\"hljs-string\">\" =&gt; \"</span> . <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$randomKey</span>];  \n<span class=\"hljs-comment\">// Output: (random) e.g., \"b =&gt; banana\"</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Picking multiple random keys from an array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-variable\">$randomKeys</span> = <span class=\"hljs-title function_ invoke__\">array_rand</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$randomKeys</span>);\n<span class=\"hljs-comment\">// Output: (random) e.g., Array ( [0] =&gt; a [1] =&gt; c )</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Using random keys to fetch values from an array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-variable\">$randomKeys</span> = <span class=\"hljs-title function_ invoke__\">array_rand</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$randomKeys</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$key</span>] . <span class=\"hljs-string\">\"\\n\"</span>;\n}\n<span class=\"hljs-comment\">// Output: (random) e.g., \"1\\n3\\n5\"</span>\n</code></pre>\n<h3><code>shuffle()</code> - Randomly shuffles the elements of an array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 1: Shuffling a numeric array</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">shuffle</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [0] =&gt; 3 [1] =&gt; 5 [2] =&gt; 1 [3] =&gt; 4 [4] =&gt; 2 ) // Output will vary</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 2: Shuffling an associative array (Note: keys are not preserved)</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">shuffle</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [0] =&gt; banana [1] =&gt; cherry [2] =&gt; apple ) // Output will vary</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Example 3: Shuffling a multi-dimensional array</span>\n<span class=\"hljs-variable\">$array</span> = [\n    [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>],\n    [<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>],\n    [<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n];\n<span class=\"hljs-title function_ invoke__\">shuffle</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>);\n<span class=\"hljs-comment\">// Output: Array ( [0] =&gt; Array ( [0] =&gt; e [1] =&gt; f ) [1] =&gt; Array ( [0] =&gt; a [1] =&gt; b ) [2] =&gt; Array ( [0] =&gt; c [1] =&gt; d ) ) // Output will vary</span>\n</code></pre>\n<p>In these examples:</p>\n<ul>\n<li><code>array_rand()</code> returns a random key or an array of random keys. You can then use these keys to access the corresponding values.</li>\n<li><code>shuffle()</code> reorders the array elements randomly, but associative array keys are lost during shuffling.</li>\n</ul>\n</section>","topic_id":145},{"topic_name":"Array Sum Product","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Sum and Product Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">\n<span class=\"hljs-title function_ invoke__\">array_sum</span>(<span class=\"hljs-keyword\">array</span>)\n<span class=\"hljs-title function_ invoke__\">array_product</span>(<span class=\"hljs-keyword\">array</span>)\n</code></pre>\n<h3>array_sum</h3>\n<p>Returns the sum of all values in an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_sum</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>): <span class=\"hljs-keyword\">float</span>|<span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_sum</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_sum</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]);     <span class=\"hljs-comment\">// 18</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_sum</span>([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]);      <span class=\"hljs-comment\">// 30</span>\n</code></pre>\n<h3>array_product</h3>\n<p>Returns the product of all values in an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_product</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>): <span class=\"hljs-keyword\">float</span>|<span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_product</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// 24</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_product</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]);     <span class=\"hljs-comment\">// 210</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_product</span>([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]);      <span class=\"hljs-comment\">// 200</span>\n</code></pre>\n</section>","topic_id":146},{"topic_name":"Array Flip","topic_html":"","topic_id":147},{"topic_name":"Array Column and Chunk","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Column and Array Chunk Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_column</span>(<span class=\"hljs-keyword\">array</span>, column_key, index_key)\n<span class=\"hljs-title function_ invoke__\">array_chunk</span>(<span class=\"hljs-keyword\">array</span>, size, preserve_keys)\n</code></pre>\n<h3>array_column</h3>\n<p>Returns the values from a single column in the input array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_column</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-variable\">$column_key</span>, <span class=\"hljs-variable\">$index_key</span> = <span class=\"hljs-literal\">null</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$data</span> = [\n    [<span class=\"hljs-string\">'id'</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'Alice'</span>],\n    [<span class=\"hljs-string\">'id'</span> =&gt; <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'Bob'</span>],\n];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_column</span>(<span class=\"hljs-variable\">$data</span>, <span class=\"hljs-string\">'name'</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; Alice [1] =&gt; Bob )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_column</span>(<span class=\"hljs-variable\">$data</span>, <span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'name'</span>)); <span class=\"hljs-comment\">// Array ( [Alice] =&gt; 1 [Bob] =&gt; 2 )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_column</span>(<span class=\"hljs-variable\">$data</span>, <span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'id'</span>)); <span class=\"hljs-comment\">// Array ( [1] =&gt; Alice [2] =&gt; Bob )</span>\n</code></pre>\n<h3>array_chunk</h3>\n<p>Splits an array into chunks of a specified size.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_chunk</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$size</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$preserve_keys</span> = <span class=\"hljs-literal\">false</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_chunk</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 ) [1] =&gt; Array ( [0] =&gt; 3 [1] =&gt; 4 ) [2] =&gt; Array ( [0] =&gt; 5 ) )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_chunk</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">3</span>, <span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 ) [1] =&gt; Array ( [3] =&gt; 4 [4] =&gt; 5 ) )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_chunk</span>([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>], <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; Array ( [0] =&gt; a [1] =&gt; b ) [1] =&gt; Array ( [0] =&gt; c [1] =&gt; d ) )</span>\n</code></pre>\n</section>","topic_id":148},{"topic_name":"Array key","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Key Function</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_keys</span>(<span class=\"hljs-keyword\">array</span>, search_value, strict)\n</code></pre>\n<h3>array_keys</h3>\n<p>Returns all the keys or a subset of the keys of an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_keys</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$search_value</span> = <span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$strict</span> = <span class=\"hljs-literal\">false</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_keys</span>([<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'apple'</span>])); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_keys</span>([<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'apple'</span>], <span class=\"hljs-string\">'apple'</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; c )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_keys</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 )</span>\n</code></pre>\n</section>","topic_id":152},{"topic_name":"Array Splice","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Splice Function</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_splice</span>(<span class=\"hljs-keyword\">array</span>, offset, length, replacement)\n</code></pre>\n<h3>array_splice</h3>\n<p>Removes a portion of the original array and replaces it with something else.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_splice</span>(<span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$offset</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$replacement</span> = []): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">array_splice</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Removes 1 element at index 2</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 5 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n<span class=\"hljs-title function_ invoke__\">array_splice</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>]); <span class=\"hljs-comment\">// Removes 'b' and 'c', replaces with 'x' and 'y'</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; x [2] =&gt; y [3] =&gt; d )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'one'</span>, <span class=\"hljs-string\">'two'</span>, <span class=\"hljs-string\">'three'</span>, <span class=\"hljs-string\">'four'</span>];\n<span class=\"hljs-variable\">$removed</span> = <span class=\"hljs-title function_ invoke__\">array_splice</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// Removes 'two' and 'three'</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$removed</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; two [1] =&gt; three )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; one [1] =&gt; four )</span>\n</code></pre>\n</section>","topic_id":153},{"topic_name":"Array Slice","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Slice Function</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-keyword\">array</span>, offset, length, preserve_keys)\n</code></pre>\n<h3>array_slice</h3>\n<p>Extracts a portion of the array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$offset</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span> = <span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$preserve_keys</span> = <span class=\"hljs-literal\">false</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; 3 [1] =&gt; 4 [2] =&gt; 5 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; b [1] =&gt; c [2] =&gt; d )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-variable\">$array</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; 40 )</span>\n</code></pre>\n<p class=\"\" data-el=\"text\">The length always select value from left to right,including the value from the offset provided<br></p></section>","topic_id":153},{"topic_name":"Array Merge and Combine","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Merge and Combine Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_merge</span>(<span class=\"hljs-keyword\">array</span>..., <span class=\"hljs-keyword\">array</span>)\n<span class=\"hljs-title function_ invoke__\">array_combine</span>(keys, values)\n</code></pre>\n<h3>array_merge</h3>\n<p>Merges one or more arrays into one.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_merge</span>(<span class=\"hljs-keyword\">array</span> ...<span class=\"hljs-variable\">$arrays</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_merge</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_merge</span>([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>], [<span class=\"hljs-string\">'e'</span>])); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d [4] =&gt; e )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_merge</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 2 [3] =&gt; 3 [4] =&gt; 3 [5] =&gt; 4 )</span>\n</code></pre>\n<h3>array_combine</h3>\n<p>Creates an array by using one array for keys and another for its values.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_combine</span>(<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$keys</span>, <span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$values</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_combine</span>([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])); <span class=\"hljs-comment\">// Array ( [a] =&gt; 1 [b] =&gt; 2 [c] =&gt; 3 )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_combine</span>([<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'y'</span>], [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>])); <span class=\"hljs-comment\">// Array ( [x] =&gt; 10 [y] =&gt; 20 )</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_combine</span>([<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'age'</span>], [<span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-number\">25</span>])); <span class=\"hljs-comment\">// Array ( [name] =&gt; Alice [age] =&gt; 25 )</span>\n</code></pre>\n</section>","topic_id":154},{"topic_name":"Array Shift Unshift","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Shift and Unshift Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-keyword\">array</span>)\n<span class=\"hljs-title function_ invoke__\">array_unshift</span>(<span class=\"hljs-keyword\">array</span>, value...)\n</code></pre>\n<h3>array_shift</h3>\n<p>Removes the first element from an array and returns it.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$array</span>): <span class=\"hljs-keyword\">mixed</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 2 [1] =&gt; 3 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// a</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; b [1] =&gt; c )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_shift</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 20 [1] =&gt; 30 )</span>\n</code></pre>\n<h3>array_unshift</h3>\n<p>Adds one or more elements to the beginning of an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_unshift</span>(<span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">mixed</span> ...<span class=\"hljs-variable\">$values</span>): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-title function_ invoke__\">array_unshift</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">1</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-title function_ invoke__\">array_unshift</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'z'</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; z [2] =&gt; b [3] =&gt; c )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-title function_ invoke__\">array_unshift</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 4 [1] =&gt; 3 [2] =&gt; 2 [3] =&gt; 5 [4] =&gt; 6 )</span>\n</code></pre>\n<p class=\"light-note\" data-el=\"text\">new value added at the beginning of the array<br></p></section>","topic_id":155},{"topic_name":"Array Pop Push","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Pop and Push Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_pop</span>(<span class=\"hljs-keyword\">array</span>)\n<span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-keyword\">array</span>, value...)\n</code></pre>\n<h3>array_pop</h3>\n<p>Removes the last element from an array and returns it.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_pop</span>(<span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$array</span>): <span class=\"hljs-keyword\">mixed</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_pop</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_pop</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// c</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; b )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_pop</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 30</span>\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 10 [1] =&gt; 20 )</span>\n</code></pre>\n<h3>array_push</h3>\n<p>Adds one or more elements to the end of an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-keyword\">mixed</span> ...<span class=\"hljs-variable\">$values</span>): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">4</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>];\n<span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d )</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">5</span>];\n<span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$array</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>); \n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// Array ( [0] =&gt; 5 [1] =&gt; 6 [2] =&gt; 7 [3] =&gt; 8 )</span>\n</code></pre>\n<div class=\"light-note mb-2\">Note : array_unshift add new value at the beginning and the array_pop function add new value at the end<br></div></section>","topic_id":156},{"topic_name":"Array Replace","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Replace and Replace Recursive Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_replace</span>(<span class=\"hljs-keyword\">array</span>..., <span class=\"hljs-keyword\">array</span>)\n<span class=\"hljs-title function_ invoke__\">array_replace_recursive</span>(<span class=\"hljs-keyword\">array</span>..., <span class=\"hljs-keyword\">array</span>)\n</code></pre>\n<h3>array_replace</h3>\n<p>Replaces elements from the first array with elements from the following arrays.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_replace</span>(<span class=\"hljs-keyword\">array</span> ...<span class=\"hljs-variable\">$arrays</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'blueberry'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [a] =&gt; apple [b] =&gt; blueberry [c] =&gt; cherry )</span>\n\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-number\">2</span> =&gt; <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">3</span> =&gt; <span class=\"hljs-number\">33</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [0] =&gt; 1 [1] =&gt; 22 [2] =&gt; 33 )</span>\n\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-string\">'x'</span> =&gt; <span class=\"hljs-string\">'first'</span>];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-string\">'y'</span> =&gt; <span class=\"hljs-string\">'second'</span>, <span class=\"hljs-string\">'x'</span> =&gt; <span class=\"hljs-string\">'third'</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [x] =&gt; third [y] =&gt; second )</span>\n</code></pre>\n<h3>array_replace_recursive</h3>\n<p>Replaces elements from the first array with elements from the following arrays recursively.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_replace_recursive</span>(<span class=\"hljs-keyword\">array</span> ...<span class=\"hljs-variable\">$arrays</span>): <span class=\"hljs-keyword\">array</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-string\">'a'</span> =&gt; [<span class=\"hljs-string\">'x'</span> =&gt; <span class=\"hljs-string\">'apple'</span>], <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-string\">'a'</span> =&gt; [<span class=\"hljs-string\">'y'</span> =&gt; <span class=\"hljs-string\">'yellow'</span>], <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace_recursive</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [a] =&gt; Array ( [x] =&gt; apple [y] =&gt; yellow ) [b] =&gt; banana [c] =&gt; cherry )</span>\n\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-string\">'a'</span> =&gt; [<span class=\"hljs-string\">'b'</span> =&gt; [<span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'old_value'</span>]]];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-string\">'a'</span> =&gt; [<span class=\"hljs-string\">'b'</span> =&gt; [<span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'new_value'</span>]]];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace_recursive</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [a] =&gt; Array ( [b] =&gt; Array ( [c] =&gt; new_value ) ) )</span>\n\n<span class=\"hljs-variable\">$array1</span> = [<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-string\">'attributes'</span> =&gt; [<span class=\"hljs-string\">'height'</span> =&gt; <span class=\"hljs-number\">180</span>]];\n<span class=\"hljs-variable\">$array2</span> = [<span class=\"hljs-string\">'attributes'</span> =&gt; [<span class=\"hljs-string\">'height'</span> =&gt; <span class=\"hljs-number\">190</span>, <span class=\"hljs-string\">'weight'</span> =&gt; <span class=\"hljs-number\">70</span>]];\n<span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-title function_ invoke__\">array_replace_recursive</span>(<span class=\"hljs-variable\">$array1</span>, <span class=\"hljs-variable\">$array2</span>)); <span class=\"hljs-comment\">// Array ( [name] =&gt; John [attributes] =&gt; Array ( [height] =&gt; 190 [weight] =&gt; 70 ) )</span>\n</code></pre>\n</section>","topic_id":157},{"topic_name":"Array In and Search","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP In Array and Array Search Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">in_array</span>(needle, haystack, strict)\n<span class=\"hljs-title function_ invoke__\">array_search</span>(needle, haystack, strict)\n</code></pre>\n<h3>in_array</h3>\n<p>Checks if a value exists in an array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$strict</span> = <span class=\"hljs-literal\">false</span>): <span class=\"hljs-keyword\">bool</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-variable\">$array</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-variable\">$array</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-variable\">$array</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-variable\">$array</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>];\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-variable\">$array</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-title function_ invoke__\">var_dump</span>(<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">// false (strict comparison)</span>\n</code></pre>\n<h3>array_search</h3>\n<p>Searches for a value in an array and returns the corresponding key if successful.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$strict</span> = <span class=\"hljs-literal\">false</span>): <span class=\"hljs-keyword\">mixed</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// b</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-string\">'cherry'</span>, <span class=\"hljs-variable\">$array</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n</section>","topic_id":158},{"topic_name":"Array Count SIzeof","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Array Count and Sizeof Functions</h2>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-keyword\">array</span>, mode)\n<span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-keyword\">array</span>, mode)\n</code></pre>\n<h3>count</h3>\n<p>Counts all elements in an array or something in an object.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$var</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$mode</span> = COUNT_NORMAL): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 4</span>\n\n<span class=\"hljs-variable\">$array</span> = [];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 0</span>\n</code></pre>\n<h3>sizeof</h3>\n<p>Alias of the <code>count()</code> function. Counts all elements in an array or something in an object.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$var</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$mode</span> = COUNT_NORMAL): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-comment\">// Examples</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 5</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'one'</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'two'</span> =&gt; <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">sizeof</span>(<span class=\"hljs-variable\">$array</span>); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n</section>","topic_id":159},{"topic_name":"Multidimensional Array","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP Multidimensional Array</h2>\n<p>A multidimensional array in PHP is an array containing one or more arrays. It can be used to represent more complex data structures, such as tables or matrices.</p>\n<h3>Example of a Multidimensional Array</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$multiArray</span> = [\n    <span class=\"hljs-string\">'fruits'</span> =&gt; [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>],\n    <span class=\"hljs-string\">'vegetables'</span> =&gt; [<span class=\"hljs-string\">'carrot'</span>, <span class=\"hljs-string\">'lettuce'</span>, <span class=\"hljs-string\">'spinach'</span>],\n    <span class=\"hljs-string\">'grains'</span> =&gt; [<span class=\"hljs-string\">'rice'</span>, <span class=\"hljs-string\">'wheat'</span>, <span class=\"hljs-string\">'oats'</span>]\n];\n\n<span class=\"hljs-comment\">// Accessing elements</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$multiArray</span>[<span class=\"hljs-string\">'fruits'</span>][<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// apple</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$multiArray</span>[<span class=\"hljs-string\">'vegetables'</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// lettuce</span>\n</code></pre>\n<h3>Iterating Through a Multidimensional Array</h3>\n<p>You can use nested <code>foreach</code> loops to iterate through a multidimensional array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$multiArray</span> = [\n    <span class=\"hljs-string\">'fruits'</span> =&gt; [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>],\n    <span class=\"hljs-string\">'vegetables'</span> =&gt; [<span class=\"hljs-string\">'carrot'</span>, <span class=\"hljs-string\">'lettuce'</span>, <span class=\"hljs-string\">'spinach'</span>],\n    <span class=\"hljs-string\">'grains'</span> =&gt; [<span class=\"hljs-string\">'rice'</span>, <span class=\"hljs-string\">'wheat'</span>, <span class=\"hljs-string\">'oats'</span>]\n];\n\n<span class=\"hljs-comment\">// Iterating through the multidimensional array</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$multiArray</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$category</span> =&gt; <span class=\"hljs-variable\">$items</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$category</span> . <span class=\"hljs-string\">\":\\n\"</span>;\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$items</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$item</span>) {\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\" - \"</span> . <span class=\"hljs-variable\">$item</span> . <span class=\"hljs-string\">\"\\n\"</span>; \n    }\n}\n\n<span class=\"hljs-comment\">/* Outputs:\nfruits:\n - apple\n - banana\n - cherry\nvegetables:\n - carrot\n - lettuce\n - spinach\ngrains:\n - rice\n - wheat\n - oats\n*/</span>\n</code></pre>\n<h3>Multidimensional Array with Associative Keys</h3>\n<p>You can also use associative arrays as the values in a multidimensional array.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$students</span> = [\n    [\n        <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'John'</span>,\n        <span class=\"hljs-string\">'age'</span> =&gt; <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-string\">'grades'</span> =&gt; [<span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">78</span>]\n    ],\n    [\n        <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'Jane'</span>,\n        <span class=\"hljs-string\">'age'</span> =&gt; <span class=\"hljs-number\">22</span>,\n        <span class=\"hljs-string\">'grades'</span> =&gt; [<span class=\"hljs-number\">88</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">95</span>]\n    ]\n];\n\n<span class=\"hljs-comment\">// Accessing data</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$students</span>[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'name'</span>]; <span class=\"hljs-comment\">// John</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$students</span>[<span class=\"hljs-number\">1</span>][<span class=\"hljs-string\">'grades'</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 92</span>\n</code></pre>\n<h3>Summary</h3>\n<ul>\n<li>Multidimensional arrays can be indexed by both numerical and associative keys.</li>\n<li>They can be used to store complex data structures, making it easy to organize and access related data.</li>\n</ul>\n</section>","topic_id":160},{"topic_name":"foreach loop","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>PHP foreach Loop</h2>\n<p>The <code>foreach</code> loop in PHP is used to iterate over arrays. It is specifically designed for working with arrays and provides a simple way to loop through each element.</p>\n<h3>Syntax</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-comment\">// Code to be executed</span>\n}\n\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-comment\">// Code to be executed</span>\n}\n</code></pre>\n<h3>Examples</h3>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>];\n\n<span class=\"hljs-comment\">// Iterate over values</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$value</span> . <span class=\"hljs-string\">\"\\n\"</span>; <span class=\"hljs-comment\">// Outputs: apple banana cherry</span>\n}\n</code></pre>\n<h3>Example 2: Using Keys and Values</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-string\">'a'</span> =&gt; <span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'b'</span> =&gt; <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'c'</span> =&gt; <span class=\"hljs-string\">'cherry'</span>];\n\n<span class=\"hljs-comment\">// Iterate over keys and values</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Key: <span class=\"hljs-subst\">$key</span>; Value: <span class=\"hljs-subst\">$value</span>\\n\"</span>; \n    <span class=\"hljs-comment\">// Outputs:</span>\n    <span class=\"hljs-comment\">// Key: a; Value: apple</span>\n    <span class=\"hljs-comment\">// Key: b; Value: banana</span>\n    <span class=\"hljs-comment\">// Key: c; Value: cherry</span>\n}\n</code></pre>\n<h3>Example 3: Nested foreach Loop</h3>\n<p>You can also nest <code>foreach</code> loops to iterate through multidimensional arrays.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$multiArray</span> = [\n    <span class=\"hljs-string\">'fruits'</span> =&gt; [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'cherry'</span>],\n    <span class=\"hljs-string\">'vegetables'</span> =&gt; [<span class=\"hljs-string\">'carrot'</span>, <span class=\"hljs-string\">'lettuce'</span>, <span class=\"hljs-string\">'spinach'</span>]\n];\n\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$multiArray</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$category</span> =&gt; <span class=\"hljs-variable\">$items</span>) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$category</span>:\\n\"</span>;\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$items</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$item</span>) {\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\" - <span class=\"hljs-subst\">$item</span>\\n\"</span>; \n    }\n}\n\n<span class=\"hljs-comment\">/* Outputs:\nfruits:\n - apple\n - banana\n - cherry\nvegetables:\n - carrot\n - lettuce\n - spinach\n*/</span>\n</code></pre>\n<h3>Summary</h3>\n<ul>\n<li>The <code>foreach</code> loop is ideal for iterating through arrays in PHP.</li>\n<li>It can be used to access both keys and values, making it flexible for various array structures.</li>\n<li>It simplifies the process of working with arrays compared to traditional <code>for</code> loops.</li>\n</ul>\n</section>","topic_id":161}],"chapter_id":48},{"chapter_name":"13 . Math","topics":[{"topic_name":"intdiv,pow,sqrt","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Intdiv,sqrt,pow in PHP<br></h3><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>Integer Division (<code>intdiv</code>)</strong> : The <code>intdiv</code> function performs integer division<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">intdiv</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// $result will be 3</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Square Root (<code>sqrt</code>)</strong> : The <code>sqrt</code> function returns the square root of a number.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">sqrt</span>(<span class=\"hljs-number\">16</span>);  <span class=\"hljs-comment\">// $result will be 4</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Power (<code>pow</code>)</strong> : The <code>pow</code> function returns the value of a base raised to the power of an exponent.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// $result will be 8</span>\n      </code></pre></li></ul></div>","topic_id":40},{"topic_name":"abs,ceil,floor,round","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">abs,ceil,floor,round in PHP<br></h3><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>Absolute Value (<code>abs</code>) </strong>: The <code>abs</code> function returns the absolute value of a number.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">abs</span>(-<span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">// $result will be 5</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Ceiling (<code>ceil</code>)</strong> : The <code>ceil</code> function rounds a number up to the nearest integer.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">ceil</span>(<span class=\"hljs-number\">4.3</span>);  <span class=\"hljs-comment\">// $result will be 5</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Floor (<code>floor</code>)</strong> : The <code>floor</code> function rounds a number down to the nearest integer.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">floor</span>(<span class=\"hljs-number\">4.7</span>);  <span class=\"hljs-comment\">// $result will be 4</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Rounding (<code>round</code>)</strong> : The <code>round</code> function rounds a number to the nearest integer. It can also round to a specified number of decimal places.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">round</span>(<span class=\"hljs-number\">4.5</span>);       <span class=\"hljs-comment\">// $result will be 5</span>\n<span class=\"hljs-variable\">$result2</span> = <span class=\"hljs-title function_ invoke__\">round</span>(<span class=\"hljs-number\">4.5678</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// $result2 will be 4.57</span>\n      </code></pre></li></ul></div>","topic_id":41},{"topic_name":"max,min","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">max,min in PHP<br></h3><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>Maximum Value (<code>max</code>)</strong> : The <code>max</code> function returns the largest value from a list of values or an array.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">max</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// $result will be 5</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">max</span>(<span class=\"hljs-variable\">$array</span>);      <span class=\"hljs-comment\">// $result will be 5</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\"><strong>Minimum Value (<code>min</code>)</strong> : The <code>min</code> function returns the smallest value from a list of values or an array<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">min</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// $result will be 1</span>\n<span class=\"hljs-variable\">$array</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">min</span>(<span class=\"hljs-variable\">$array</span>);      <span class=\"hljs-comment\">// $result will be 1</span>\n      </code></pre></li></ul></div>","topic_id":42},{"topic_name":"rand , mt_rand , lcg_value","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">rand , mt_rand , lcg_value in PHP<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In PHP, <code>rand</code>, <code>mt_rand</code>, and <code>lcg_value</code> are functions used to generate random numbers</p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">The <code>rand</code> function generates a random integer between two specified value<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//syntax</span>\n<span class=\"hljs-title function_ invoke__\">rand</span>(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$min</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$max</span>): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">rand</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>);  <span class=\"hljs-comment\">// $result will be a random integer between 1 and 10</span>\n\n      </code></pre></li> <li data-el=\"list\" class=\"\">The <code>mt_rand</code> function generates a random integer using the Mersenne Twister algorithm, which is faster and produces better random values than <code>rand</code><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//syntax</span>\n<span class=\"hljs-title function_ invoke__\">mt_rand</span>(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$min</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$max</span>): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">mt_rand</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>);  <span class=\"hljs-comment\">// $result will be a random integer between 1 and 10</span>\n      </code></pre></li> <li data-el=\"list\" class=\"\">The <code>lcg_value</code> function generates a pseudo-random float value between <code>0</code> and <code>1</code>, using a linear congruential generator<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//syntax</span>\n<span class=\"hljs-title function_ invoke__\">lcg_value</span>(): <span class=\"hljs-keyword\">float</span>\n\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-title function_ invoke__\">lcg_value</span>();  <span class=\"hljs-comment\">// $result will be a random float between 0 and 1</span>\n      </code></pre></li><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">&nbsp;Use mt_rand() instead of rand()<br></p></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Lets generate 10 random string value with mt_rand() function :<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">/**\n * Generates a random string of specified length.\n *\n * <span class=\"hljs-doctag\">@param</span> int $length The length of the random string to be generated. Defaults to 10 if not provided.\n * <span class=\"hljs-doctag\">@return</span> string A randomly generated string of the specified length.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRandomString</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$length</span> = <span class=\"hljs-number\">10</span></span>) </span>{\n    <span class=\"hljs-variable\">$characters</span> = <span class=\"hljs-string\">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;\n    <span class=\"hljs-variable\">$charactersLength</span> = <span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$characters</span>);\n    <span class=\"hljs-variable\">$randomString</span> = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$length</span>; <span class=\"hljs-variable\">$i</span>++) {\n        <span class=\"hljs-variable\">$randomString</span> .= <span class=\"hljs-variable\">$characters</span>[<span class=\"hljs-title function_ invoke__\">mt_rand</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">$charactersLength</span> - <span class=\"hljs-number\">1</span>)];\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$randomString</span>;\n}\n\n<span class=\"hljs-variable\">$randomString</span> = <span class=\"hljs-title function_ invoke__\">getRandomString</span>();\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$randomString</span>; <span class=\"hljs-comment\">//output : ex2WYRgdeb</span>\n<span class=\"hljs-meta\">?&gt;</span>\n\n      </code></pre></div>","topic_id":43}],"chapter_id":49},{"chapter_name":"14 . String Functions","topics":[{"topic_name":"string replace","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">String replace functions<br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-variable\">$search</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$subject</span>)\n<span class=\"hljs-title function_ invoke__\">str_ireplace</span>(<span class=\"hljs-variable\">$search</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$subject</span>)\n<span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$replacement</span>, <span class=\"hljs-variable\">$start</span>, <span class=\"hljs-variable\">$length</span>)\n<span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$from</span>, <span class=\"hljs-variable\">$to</span>)\n</code></pre>\n<h3 class=\"\">1. <code>str_replace()</code></h3>\n<p class=\"\">Replaces all occurrences of a search string with a replacement string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$search</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$subject</span>, <span class=\"hljs-keyword\">int</span> &amp;<span class=\"hljs-variable\">$count</span> = <span class=\"hljs-literal\">null</span>): <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-keyword\">array</span>\n<span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-variable\">$search</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$subject</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"I like apple.\"</span>); <span class=\"hljs-comment\">// I like orange.</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_replace</span>([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>], [<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>], <span class=\"hljs-string\">\"I have red and blue pens.\"</span>); <span class=\"hljs-comment\">// I have green and yellow pens.</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-string\">\"world\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"Hello world!\"</span>); <span class=\"hljs-comment\">// Hello !</span>\n<br></code><br><div class=\"light-note mb-2\">Note : str_replace() is case-sensitive means cat and Cat are not same</div></pre>\n<h3>2. <code>str_ireplace()</code></h3>\n<p>Replaces all occurrences of a search string with a replacement string, case-insensitively.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_ireplace</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$search</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$subject</span>, <span class=\"hljs-keyword\">int</span> &amp;<span class=\"hljs-variable\">$count</span> = <span class=\"hljs-literal\">null</span>): <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-keyword\">array</span>\n<span class=\"hljs-title function_ invoke__\">str_ireplace</span>(<span class=\"hljs-variable\">$search</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$subject</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_ireplace</span>(<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"orange\"</span>, <span class=\"hljs-string\">\"I like APPLE.\"</span>); <span class=\"hljs-comment\">// I like orange.</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_ireplace</span>([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"BLUE\"</span>], [<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"yellow\"</span>], <span class=\"hljs-string\">\"I have Red and blue pens.\"</span>); <span class=\"hljs-comment\">// I have green and yellow pens.</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_ireplace</span>(<span class=\"hljs-string\">\"WORLD\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"Hello world!\"</span>); <span class=\"hljs-comment\">// Hello !</span>\n</code></pre>\n<h3>3. <code>substr_replace()</code></h3>\n<p>Replaces a portion of a string with another string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">mixed</span> <span class=\"hljs-variable\">$replacement</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$start</span>, <span class=\"hljs-keyword\">int</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$length</span> = <span class=\"hljs-literal\">null</span>): <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-keyword\">array</span>\n<span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$replacement</span>, <span class=\"hljs-variable\">$start</span>, <span class=\"hljs-variable\">$length</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-string\">\"Hello world!\"</span>, <span class=\"hljs-string\">\"PHP\"</span>, <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// Hello PHP!</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-string\">\"I like apples\"</span>, <span class=\"hljs-string\">\"oranges\"</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// I like oranges</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">substr_replace</span>(<span class=\"hljs-string\">\"abcdef\"</span>, <span class=\"hljs-string\">\"123\"</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// ab123</span>\n</code></pre>\n<h3>4. <code>strtr()</code></h3>\n<p>Translates certain characters or substrings in a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$from</span>, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$to</span> = <span class=\"hljs-literal\">null</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$from</span>, <span class=\"hljs-variable\">$to</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-string\">\"Hello world\"</span>, <span class=\"hljs-string\">\"o\"</span>, <span class=\"hljs-string\">\"0\"</span>); <span class=\"hljs-comment\">// Hell0 w0rld</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-string\">\"Hello world\"</span>, [<span class=\"hljs-string\">\"Hello\"</span> =&gt; <span class=\"hljs-string\">\"Hi\"</span>, <span class=\"hljs-string\">\"world\"</span> =&gt; <span class=\"hljs-string\">\"PHP\"</span>]); <span class=\"hljs-comment\">// Hi PHP</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strtr</span>(<span class=\"hljs-string\">\"abcdef\"</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"123\"</span>); <span class=\"hljs-comment\">// 123def</span>\n</code></pre>\n</div>","topic_id":79},{"topic_name":"string repeat","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">String Padding and Repeat<br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$length</span>, <span class=\"hljs-variable\">$pad_string</span> = <span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-variable\">$pad_type</span> = STR_PAD_RIGHT)\n<span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$multiplier</span>)\n</code></pre>\n<h3>1. <code>str_pad()</code></h3>\n<p>Pads a string to a certain length with another string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$pad_string</span> = <span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$pad_type</span> = STR_PAD_RIGHT): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$length</span>, <span class=\"hljs-variable\">$pad_string</span> = <span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-variable\">$pad_type</span> = STR_PAD_RIGHT)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"*\"</span>); <span class=\"hljs-comment\">// Hello*****</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"*\"</span>, STR_PAD_LEFT); <span class=\"hljs-comment\">// *****Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_pad</span>(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"*\"</span>, STR_PAD_BOTH); <span class=\"hljs-comment\">// **Hello***</span>\n</code></pre>\n<h3>2. <code>str_repeat()</code></h3>\n<p>Repeats a string a specified number of times.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$multiplier</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$multiplier</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-string\">\"Ha\"</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// HaHaHa</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// xxxxx</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">str_repeat</span>(<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// abcabc</span>\n</code></pre>\n</div>","topic_id":80},{"topic_name":"trim","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">String Trim<br></h3><span></span><p class=\"\">&nbsp;<code>trim()</code>, <code>rtrim()</code>, <code>ltrim()</code>, and <code>chop()</code></p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n<span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n<span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n<span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n</code></pre>\n<h3>1. <code>trim()</code></h3>\n<p>Removes whitespace or other characters from both ends of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-string\">\"   Hello   \"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-string\">\"...Hello...\"</span>, <span class=\"hljs-string\">\".\"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">trim</span>(<span class=\"hljs-string\">\"000123000\"</span>, <span class=\"hljs-string\">\"0\"</span>); <span class=\"hljs-comment\">// 123</span>\n</code></pre>\n<h3>2. <code>rtrim()</code></h3>\n<p>Removes whitespace or other characters from the end of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-string\">\"Hello   \"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-string\">\"Hello...\"</span>, <span class=\"hljs-string\">\".\"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">rtrim</span>(<span class=\"hljs-string\">\"123000\"</span>, <span class=\"hljs-string\">\"0\"</span>); <span class=\"hljs-comment\">// 123</span>\n</code></pre>\n<h3>3. <code>ltrim()</code></h3>\n<p>Removes whitespace or other characters from the beginning of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-string\">\"   Hello\"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-string\">\"...Hello\"</span>, <span class=\"hljs-string\">\".\"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ltrim</span>(<span class=\"hljs-string\">\"000123\"</span>, <span class=\"hljs-string\">\"0\"</span>); <span class=\"hljs-comment\">// 123</span>\n</code></pre>\n<h3>4. <code>chop()</code></h3>\n<p>Alias of <code>rtrim()</code>; removes whitespace or other characters from the end of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>): <span class=\"hljs-keyword\">string</span>\n<span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$character_mask</span> = <span class=\"hljs-string\">\" \"</span>)\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-string\">\"Hello   \"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-string\">\"Hello...\"</span>, <span class=\"hljs-string\">\".\"</span>); <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chop</span>(<span class=\"hljs-string\">\"123000\"</span>, <span class=\"hljs-string\">\"0\"</span>); <span class=\"hljs-comment\">// 123</span>\n</code></pre>\n</div>","topic_id":81},{"topic_name":"stripTags and wordwrap","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">strip-tags and word_wrap<br><br><br></h3><span></span>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">short syntax</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strip_tags</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">allowable_tags</span>);\n<span class=\"hljs-title function_ invoke__\">wordwrap</span>(<span class=\"hljs-variable\">string</span>,<span class=\"hljs-variable\">width</span>,<span class=\"hljs-variable\">break</span>,<span class=\"hljs-variable\">cut</span>);\n</code></pre>\n<hr>\n<h3>1. <code>strip_tags()</code></h3>\n<p>Removes HTML and PHP tags from a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strip_tags</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$allowable_tags</span> = <span class=\"hljs-literal\">null</span>)\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strip_tags</span>(<span class=\"hljs-string\">\"&lt;p&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/p&gt;\"</span>); \n<span class=\"hljs-comment\">// Hello World</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strip_tags</span>(<span class=\"hljs-string\">\"&lt;p&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/p&gt;\"</span>, <span class=\"hljs-string\">\"&lt;b&gt;\"</span>); \n<span class=\"hljs-comment\">// Hello &lt;b&gt;World&lt;/b&gt;</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">strip_tags</span>(<span class=\"hljs-string\">\"&lt;div&gt;Welcome to PHP!&lt;/div&gt;\"</span>); \n<span class=\"hljs-comment\">// Welcome to PHP!</span>\n</code></pre>\n<hr>\n<h3>2. <code>wordwrap()</code></h3>\n<p>Wraps a string to a given number of characters.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">wordwrap</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$width</span> = <span class=\"hljs-number\">75</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$break</span> = <span class=\"hljs-string\">\"\\n\"</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$cut</span> = <span class=\"hljs-literal\">false</span>)\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">wordwrap</span>(<span class=\"hljs-string\">\"This is a test string.\"</span>, <span class=\"hljs-number\">8</span>); \n<span class=\"hljs-comment\">// This is</span>\n<span class=\"hljs-comment\">// a test</span>\n<span class=\"hljs-comment\">// string.</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">wordwrap</span>(<span class=\"hljs-string\">\"This is a long string.\"</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"&lt;br&gt;\\n\"</span>); \n<span class=\"hljs-comment\">// This&lt;br&gt;</span>\n<span class=\"hljs-comment\">// is a&lt;br&gt;</span>\n<span class=\"hljs-comment\">// long&lt;br&gt;</span>\n<span class=\"hljs-comment\">// string.</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">wordwrap</span>(<span class=\"hljs-string\">\"This-is-a-long-word\"</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"\\n\"</span>, <span class=\"hljs-literal\">true</span>); \n<span class=\"hljs-comment\">// This-</span>\n<span class=\"hljs-comment\">// is-a-</span>\n<span class=\"hljs-comment\">// long-</span>\n<span class=\"hljs-comment\">// word</span>\n</code></pre>\n</div>","topic_id":92},{"topic_name":"chr and odr","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">chr and odr<br><br><br><br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-variable\">ascii</span>);\n<span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-variable\">str</span>);\n</code></pre>\n<hr>\n<h3>1. <code>chr()</code></h3>\n<p>Returns a character from an ASCII value.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$ascii</span>): <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-number\">65</span>); \n<span class=\"hljs-comment\">// A</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-number\">97</span>); \n<span class=\"hljs-comment\">// a</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-number\">48</span>); \n<span class=\"hljs-comment\">// 0</span>\n</code></pre>\n<hr>\n<h3>2. <code>ord()</code></h3>\n<p>Returns the ASCII value of the first character of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>): <span class=\"hljs-keyword\">int</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-string\">\"A\"</span>); \n<span class=\"hljs-comment\">// 65</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-string\">\"a\"</span>); \n<span class=\"hljs-comment\">// 97</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-string\">\"0\"</span>); \n<span class=\"hljs-comment\">// 48</span>\n</code></pre>\n</div>","topic_id":93},{"topic_name":"bin2hex and hex2bin","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">bin2hex and hex2bin<br><br><br></h3><span></span><h3>Simplified Syntax:</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">bin2hex</span>(<font color=\"#d19a66\">str</font>);\n<span class=\"hljs-title function_ invoke__\">hex2bin</span>(<font color=\"#d19a66\">str</font>);\n</code></pre>\n<hr>\n<h3>1. <code>bin2hex()</code></h3>\n<p>Converts binary data into hexadecimal representation.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">bin2hex</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$data</span>): <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">bin2hex</span>(<span class=\"hljs-string\">\"Hello\"</span>); \n<span class=\"hljs-comment\">// 48656c6c6f</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">bin2hex</span>(<span class=\"hljs-string\">\"\\x00\\x01\\x02\"</span>); \n<span class=\"hljs-comment\">// 000102</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">bin2hex</span>(<span class=\"hljs-string\">\"PHP\"</span>); \n<span class=\"hljs-comment\">// 505048</span>\n</code></pre>\n<hr>\n<h3>2. <code>hex2bin()</code></h3>\n<p>Converts a hexadecimal string into binary data.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">hex2bin</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$data</span>): <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">hex2bin</span>(<span class=\"hljs-string\">\"48656c6c6f\"</span>); \n<span class=\"hljs-comment\">// Hello</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">hex2bin</span>(<span class=\"hljs-string\">\"000102\"</span>); \n<span class=\"hljs-comment\">// \\x00\\x01\\x02</span>\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">hex2bin</span>(<span class=\"hljs-string\">\"505048\"</span>); \n<span class=\"hljs-comment\">// PHP</span>\n</code></pre>\n</div>","topic_id":94},{"topic_name":"uuencdoe and uudecode","topic_html":"","topic_id":95},{"topic_name":"md5 and sha","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">md5 and sha<br><br><br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-variable\">str,</span><span class=\"hljs-variable\">raw_output</span>)\n<span class=\"hljs-title function_ invoke__\">sha1</span>(<span class=\"hljs-variable\">str<font color=\"#c4c8cf\">,</font></span><span class=\"hljs-variable\">raw_output</span>)\n</code></pre>\n<h3 class=\"\"><code>md5</code> Function</h3>\n<p>Calculates the MD5 hash of a string.</p>\n<p></p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">Example<br></p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$str</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$raw_output</span> = <span class=\"hljs-literal\">false</span>]) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-string\">'hello'</span>);       <span class=\"hljs-comment\">// '5d41402abc4b2a76b9719d911017c592'</span>\n<span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-string\">'world'</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// '7d793037a0760186574b0282f2f435e7' (binary format)</span>\n<span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-string\">'example'</span>);    <span class=\"hljs-comment\">// '50d858b6b5a44b44043e9e68e00d8c7d'</span>\n</code></pre>\n<h3><code>sha1</code> Function</h3>\n<p>Calculates the SHA-1 hash of a string.</p>\n<p></p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">sha1</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$str</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$raw_output</span> = <span class=\"hljs-literal\">false</span>]) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">sha1</span>(<span class=\"hljs-string\">'hello'</span>);       <span class=\"hljs-comment\">// '5d41402abc4b2a76b9719d911017c592f49c4e9'</span>\n<span class=\"hljs-title function_ invoke__\">sha1</span>(<span class=\"hljs-string\">'world'</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 'e9b6635cb9db817d88c61fc5103b3a848a67c724' (binary format)</span>\n<span class=\"hljs-title function_ invoke__\">sha1</span>(<span class=\"hljs-string\">'example'</span>);    <span class=\"hljs-comment\">// '3a2c6fc558a0d99b335544ffed9a5e44d2c03d6c'</span>\n</code></pre>\n</div>","topic_id":96},{"topic_name":"htmlentites and specialcharaceter","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">htmlentites and htmlspecialcharacters<br><br><br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">htmlentities</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>[, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$flags</span> = ENT_COMPAT | ENT_HTML401[, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$encoding</span> = <span class=\"hljs-literal\">null</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$double_encode</span> = <span class=\"hljs-literal\">true</span>]]])\n<span class=\"hljs-title function_ invoke__\">htmlspecialchars</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>[, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$flags</span> = ENT_COMPAT | ENT_HTML401[, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$encoding</span> = <span class=\"hljs-literal\">null</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$double_encode</span> = <span class=\"hljs-literal\">true</span>]]])\n</code></pre>\n<h3 class=\"\"><code>htmlentities</code> Function</h3>\n<p class=\"\">Converts special characters to HTML entities.</p>\n<p></p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">htmlentities</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>[, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$flags</span> = ENT_COMPAT | ENT_HTML401[, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$encoding</span> = <span class=\"hljs-literal\">null</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$double_encode</span> = <span class=\"hljs-literal\">true</span>]]]) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">htmlentities</span>(<span class=\"hljs-string\">'&lt;div&gt;Test&lt;/div&gt;'</span>); <span class=\"hljs-comment\">// '&amp;lt;div&amp;gt;Test&amp;lt;/div&amp;gt;'</span>\n<span class=\"hljs-title function_ invoke__\">htmlentities</span>(<span class=\"hljs-string\">'It\\'s a \"test\".'</span>); <span class=\"hljs-comment\">// 'It&amp;#039;s a &amp;quot;test&amp;quot;.'</span>\n<span class=\"hljs-title function_ invoke__\">htmlentities</span>(<span class=\"hljs-string\">'© 2024'</span>, ENT_HTML5); <span class=\"hljs-comment\">// '&amp;copy; 2024'</span>\n</code></pre>\n\n\n<p></p>\n<pre class=\"copy-container\"></pre>\n</div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\"><code>htmlspecialchars</code> Function</h3><p class=\"\">Converts special characters to HTML entities, but with fewer options than <code>htmlentities</code>.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">php</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-php code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">htmlspecialchars</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>[, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$flags</span> = ENT_COMPAT | ENT_HTML401[, <span class=\"hljs-keyword\">string</span>|<span class=\"hljs-literal\">null</span> <span class=\"hljs-variable\">$encoding</span> = <span class=\"hljs-literal\">null</span>[, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$double_encode</span> = <span class=\"hljs-literal\">true</span>]]]) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">htmlspecialchars</span>(<span class=\"hljs-string\">'&lt;div&gt;Test&lt;/div&gt;'</span>); <span class=\"hljs-comment\">// '&lt;div&gt;Test&lt;/div&gt;'</span>\n<span class=\"hljs-title function_ invoke__\">htmlspecialchars</span>(<span class=\"hljs-string\">'It\\'s a \"test\".'</span>); <span class=\"hljs-comment\">// 'It's a \"test\".'</span>\n<span class=\"hljs-title function_ invoke__\">htmlspecialchars</span>(<span class=\"hljs-string\">'© 2024'</span>, ENT_HTML5); <span class=\"hljs-comment\">// '© 2024'</span>\n\n      </code></pre></div>","topic_id":97},{"topic_name":"addslashes and stripslashes","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">addslashes and stripslashes<br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">addslashes</span>(<span class=\"hljs-variable\">$str</span>)\n<span class=\"hljs-title function_ invoke__\">stripslashes</span>(<span class=\"hljs-variable\">$str</span>)\n</code></pre>\n<h3><code>addslashes</code> Function</h3>\n<p>Escapes special characters in a string with backslashes.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">addslashes</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$str</span>) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">addslashes</span>(<span class=\"hljs-string\">\"O'Reilly\"</span>);    <span class=\"hljs-comment\">// 'O\\'Reilly'</span>\n<span class=\"hljs-title function_ invoke__\">addslashes</span>(<span class=\"hljs-string\">'A \"quote\"'</span>);   <span class=\"hljs-comment\">// 'A \\\"quote\\\"'</span>\n<span class=\"hljs-title function_ invoke__\">addslashes</span>(<span class=\"hljs-string\">\"Hello\\nWorld\"</span>); <span class=\"hljs-comment\">// 'Hello\\nWorld'</span>\n</code></pre>\n<h3 class=\"\"><code>stripslashes</code> Function</h3>\n<p>Removes backslashes added by <code>addslashes</code>.</p>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">stripslashes</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$str</span>) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">stripslashes</span>(<span class=\"hljs-string\">\"O\\'Reilly\"</span>);    <span class=\"hljs-comment\">// 'O'Reilly'</span>\n<span class=\"hljs-title function_ invoke__\">stripslashes</span>(<span class=\"hljs-string\">'A \\\"quote\\\"'</span>);  <span class=\"hljs-comment\">// 'A \"quote\"'</span>\n<span class=\"hljs-title function_ invoke__\">stripslashes</span>(<span class=\"hljs-string\">\"Hello\\nWorld\"</span>); <span class=\"hljs-comment\">// 'Hello\\nWorld'</span>\n</code></pre>\n</div>","topic_id":98},{"topic_name":"substr","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"\" data-el=\"heading\">substr<br></h3><span></span>\n\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">substr</span>(<span class=\"hljs-variable\">$string</span>,<span class=\"hljs-variable\">$start</span>,<span class=\"hljs-variable\">$length</span>)\n</code></pre>\n<h3><code>substr</code> Function</h3>\n<p class=\"\">Extracts a portion of a string.</p>\n<p></p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">substr</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$start</span>[, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span>]) : <span class=\"hljs-keyword\">string</span>\n\n<span class=\"hljs-comment\">// Examples:</span>\n<span class=\"hljs-title function_ invoke__\">substr</span>(<span class=\"hljs-string\">'Hello, world!'</span>, <span class=\"hljs-number\">7</span>);      <span class=\"hljs-comment\">// 'world!' , by default the length is from start to end</span>\n<span class=\"hljs-title function_ invoke__\">substr</span>(<span class=\"hljs-string\">'Hello, world!'</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// 'world'</span>\n<span class=\"hljs-title function_ invoke__\">substr</span>(<span class=\"hljs-string\">'Hello, world!'</span>, -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">// 'world',the substr start from w to 5 character after it</span>\n</code></pre>\n<div class=\"light-note mb-2\">Note : The index selection can be done from left to right where index start from 0 and from right to left where index start from -1,The length parameter always count character from left to right</div></div>","topic_id":99},{"topic_name":"implode and explode","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">PHP implode and explode<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-variable\">$glue</span>, <span class=\"hljs-variable\">$pieces</span>)\n<span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-variable\">$delimiter</span>, <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$limit</span>)\n</code></pre>\n<h3 class=\"\">implode(array to string)</h3>\n<p>Combines array elements into a single string using a specified delimiter.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$glue</span>, <span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$pieces</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-string\">\", \"</span>, [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>]); <span class=\"hljs-comment\">// \"apple, banana, cherry\"</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-string\">\"-\"</span>, [<span class=\"hljs-string\">\"2024\"</span>, <span class=\"hljs-string\">\"09\"</span>, <span class=\"hljs-string\">\"25\"</span>]); <span class=\"hljs-comment\">// \"2024-09-25\"</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">implode</span>(<span class=\"hljs-string\">\" \"</span>, [<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-string\">\"World\"</span>]); <span class=\"hljs-comment\">// \"Hello World\"</span>\n</code></pre>\n<h3 class=\"\">explode(string to array)</h3>\n<p>Splits a string into an array based on a specified delimiter.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$delimiter</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$limit</span> = PHP_INT_MAX) <span class=\"hljs-comment\">// returns an array</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-string\">\", \"</span>, <span class=\"hljs-string\">\"apple, banana, cherry\"</span>); <span class=\"hljs-comment\">// [\"apple\", \"banana\", \"cherry\"]</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-string\">\"-\"</span>, <span class=\"hljs-string\">\"2024-09-25\"</span>); <span class=\"hljs-comment\">// [\"2024\", \"09\", \"25\"]</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">explode</span>(<span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-string\">\"Hello World\"</span>); <span class=\"hljs-comment\">// [\"Hello\", \"World\"]</span>\n</code></pre>\n</section>","topic_id":132},{"topic_name":"reverse and shuffle","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">strrev and str_shuffle<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strrev</span>(<span class=\"hljs-variable\">$string</span>)\n<span class=\"hljs-title function_ invoke__\">str_shuffle</span>(<span class=\"hljs-variable\">$string</span>)\n</code></pre>\n<h3>strrev</h3>\n<p>Reverses the given string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">php<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strrev</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strrev</span>(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// \"olleh\"</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strrev</span>(<span class=\"hljs-string\">\"PHP\"</span>); <span class=\"hljs-comment\">// \"PHP\"</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strrev</span>(<span class=\"hljs-string\">\"12345\"</span>); <span class=\"hljs-comment\">// \"54321\"</span>\n</code></pre>\n<h3>str_shuffle</h3>\n<p>Randomly shuffles the characters in a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">php<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">str_shuffle</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_shuffle</span>(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// \"loleh\" (output may vary)</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_shuffle</span>(<span class=\"hljs-string\">\"PHP\"</span>); <span class=\"hljs-comment\">// \"PPH\" (output may vary)</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_shuffle</span>(<span class=\"hljs-string\">\"12345\"</span>); <span class=\"hljs-comment\">// \"41352\" (output may vary)</span>\n</code></pre>\n</section>","topic_id":133},{"topic_name":"split","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">str_split &amp; chunk_split<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$length</span>)\n<span class=\"hljs-title function_ invoke__\">chunk_split</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$length</span>, <span class=\"hljs-variable\">$separator</span>)\n</code></pre>\n<h3>str_split</h3>\n<p>Splits a string into an array based on a specified length.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span> = <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// returns an array</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [\"he\", \"ll\", \"o\"]</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-string\">\"abcdef\"</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// [\"abc\", \"def\"]</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-string\">\"123456789\"</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// [\"1234\", \"5678\", \"9\"]</span>\n</code></pre>\n<h3>chunk_split</h3>\n<p>Splits a string into smaller chunks and adds a specified separator between them.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">chunk_split</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$length</span> = <span class=\"hljs-number\">76</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$separator</span> = <span class=\"hljs-string\">\"\\r\\n\"</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">chunk_split</span>(<span class=\"hljs-string\">\"abcdefghijklmno\"</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"-\"</span>); <span class=\"hljs-comment\">// \"abc-def-ghi-jkl-mno-\"</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">chunk_split</span>(<span class=\"hljs-string\">\"1234567890\"</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\" \"</span>); <span class=\"hljs-comment\">// \"12 34 56 78 90 \"</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">chunk_split</span>(<span class=\"hljs-string\">\"Lorem ipsum dolor sit amet\"</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"|\"</span>); <span class=\"hljs-comment\">// \"Lorem| ipsum| dolor| sit |amet|\"</span>\n</code></pre>\n</section>","topic_id":134},{"topic_name":"length and count","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">strlen and count<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$string</span>)\n<span class=\"hljs-title function_ invoke__\">str_word_count</span>(<span class=\"hljs-variable\">$string</span>, <span class=\"hljs-variable\">$format</span>, <span class=\"hljs-variable\">$charlist</span>)\n</code></pre>\n<h3>strlen</h3>\n<p>Calculates the length of a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>) <span class=\"hljs-comment\">// returns an integer</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// 5</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-string\">\"PHP is great!\"</span>); <span class=\"hljs-comment\">// 14</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-string\">\"\"</span>); <span class=\"hljs-comment\">// 0</span>\n</code></pre>\n<h3>str_word_count</h3>\n<p>Counts the number of words in a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title function_ invoke__\">str_word_count</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$format</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$charlist</span> = <span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-comment\">// returns an integer or array</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_word_count</span>(<span class=\"hljs-string\">\"Hello world!\"</span>); <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_word_count</span>(<span class=\"hljs-string\">\"PHP is a popular scripting language.\"</span>); <span class=\"hljs-comment\">// 7</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_word_count</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// [0 =&gt; \"Hello\", 1 =&gt; \"world\"]</span>\n</code></pre>\n</section>","topic_id":135},{"topic_name":"lowercase and uppercase","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">strtolower and strtoupper<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$string</span>)\n<span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-variable\">$string</span>)\n</code></pre>\n<h3>strtolower</h3>\n<p>Converts all characters in a string to lowercase.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-string\">\"HELLO\"</span>); <span class=\"hljs-comment\">// \"hello\"</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-string\">\"PHP is GREAT!\"</span>); <span class=\"hljs-comment\">// \"php is great!\"</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-string\">\"Mixed CASE\"</span>); <span class=\"hljs-comment\">// \"mixed case\"</span>\n</code></pre>\n<h3>strtoupper</h3>\n<p>Converts all characters in a string to uppercase.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span>) <span class=\"hljs-comment\">// returns a string</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// \"HELLO\"</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-string\">\"php is great!\"</span>); <span class=\"hljs-comment\">// \"PHP IS GREAT!\"</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strtoupper</span>(<span class=\"hljs-string\">\"Mixed case\"</span>); <span class=\"hljs-comment\">// \"MIXED CASE\"</span>\n</code></pre>\n</section>","topic_id":136},{"topic_name":"Position","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">strpos &amp; strrpos<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">strpos</span>(<span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-variable\">$offset</span>)\n<span class=\"hljs-title function_ invoke__\">strrpos</span>(<span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-variable\">$offset</span>)\n</code></pre>\n<h3>strpos</h3>\n<p>Finds the position of the first occurrence of a substring within a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">int</span>|<span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strpos</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$offset</span> = <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// returns an integer or false</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"o\"</span>); <span class=\"hljs-comment\">// 4</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"l\"</span>); <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"z\"</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h3>strrpos</h3>\n<p>Finds the position of the last occurrence of a substring within a string.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">int</span>|<span class=\"hljs-keyword\">string</span> <span class=\"hljs-title function_ invoke__\">strrpos</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$needle</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$offset</span> = <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// returns an integer or false</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">strrpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"o\"</span>); <span class=\"hljs-comment\">// 7</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">strrpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"l\"</span>); <span class=\"hljs-comment\">// 9</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">strrpos</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"z\"</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n</section>","topic_id":137},{"topic_name":"search","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\">\n<h3 class=\"\">String Search<br></h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-title function_ invoke__\">str_contains</span>(<span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-variable\">$needle</span>)\n<span class=\"hljs-title function_ invoke__\">str_starts_with</span>(<span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-variable\">$needle</span>)\n<span class=\"hljs-title function_ invoke__\">str_ends_with</span>(<span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-variable\">$needle</span>)\n</code></pre>\n<h3>str_contains</h3>\n<p>Determines if a string contains a given substring.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title function_ invoke__\">str_contains</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$needle</span>) <span class=\"hljs-comment\">// returns a boolean</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_contains</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"World\"</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_contains</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"world\"</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_contains</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"Hello\"</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3>str_starts_with</h3>\n<p>Checks if a string starts with a given substring.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title function_ invoke__\">str_starts_with</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$needle</span>) <span class=\"hljs-comment\">// returns a boolean</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_starts_with</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"Hello\"</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_starts_with</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"World\"</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_starts_with</span>(<span class=\"hljs-string\">\"PHP Programming\"</span>, <span class=\"hljs-string\">\"PHP\"</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3>str_ends_with</h3>\n<p>Checks if a string ends with a given substring.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-php copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title function_ invoke__\">str_ends_with</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$haystack</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$needle</span>) <span class=\"hljs-comment\">// returns a boolean</span>\n\n<span class=\"hljs-comment\">// Example 1</span>\n<span class=\"hljs-title function_ invoke__\">str_ends_with</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"World\"</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// Example 2</span>\n<span class=\"hljs-title function_ invoke__\">str_ends_with</span>(<span class=\"hljs-string\">\"Hello World\"</span>, <span class=\"hljs-string\">\"Hello\"</span>); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// Example 3</span>\n<span class=\"hljs-title function_ invoke__\">str_ends_with</span>(<span class=\"hljs-string\">\"PHP Programming\"</span>, <span class=\"hljs-string\">\"Programming\"</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</section>","topic_id":138}],"chapter_id":67}]}