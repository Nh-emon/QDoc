{"subject_name":"math","chapters":[{"chapter_name":"Mit Calculas","topics":[{"topic_name":"what is calculas","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><pre class=\"copy-container code-container\" data-el=\"code-container\">\n      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <i class=\"fa-solid fa-clipboard copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-params\">val</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">element,child</span>){\n    <span class=\"hljs-keyword\">if</span>(child){<span class=\"hljs-keyword\">return</span> element.<span class=\"hljs-title function_\">querySelector</span>(child)}\n    <span class=\"hljs-keyword\">else</span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(element)}}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-params\">element,child</span>){\n    <span class=\"hljs-keyword\">if</span>(child){<span class=\"hljs-keyword\">return</span> element.<span class=\"hljs-title function_\">querySelectorAll</span>(child)}\n    <span class=\"hljs-keyword\">else</span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(element)}}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">trigger</span>(<span class=\"hljs-params\">El,callback</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span><span class=\"hljs-title function_\">callback</span>(e))        \n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Trigger</span>(<span class=\"hljs-params\">El,event,callback</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    el.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${event}</span>`</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span><span class=\"hljs-title function_\">callback</span>(e))        \n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">text</span>(<span class=\"hljs-params\">El,text,join</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    <span class=\"hljs-keyword\">if</span>(text || text === <span class=\"hljs-string\">''</span>){\n     <span class=\"hljs-keyword\">if</span>(join &amp;&amp; join === <span class=\"hljs-literal\">true</span>){\n     el.<span class=\"hljs-property\">innerText</span> += text        \n     }<span class=\"hljs-keyword\">else</span>{\n        el.<span class=\"hljs-property\">innerText</span> = text\n     }\n    }<span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> el.<span class=\"hljs-property\">innerText</span>\n    }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">html</span>(<span class=\"hljs-params\">El,html,join</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    <span class=\"hljs-keyword\">if</span>(html || html === <span class=\"hljs-string\">''</span>){\n        <span class=\"hljs-keyword\">if</span>(join &amp;&amp; join === <span class=\"hljs-literal\">true</span>){\n         el.<span class=\"hljs-property\">innerHTML</span> += html            \n        }<span class=\"hljs-keyword\">else</span>{\n         el.<span class=\"hljs-property\">innerHTML</span> = html            \n        }\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> el.<span class=\"hljs-property\">innerHTML</span>\n    }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-params\">El,attr,value</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    <span class=\"hljs-keyword\">if</span>(value){\n        el.<span class=\"hljs-title function_\">setAttribute</span>(attr,value)\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> el.<span class=\"hljs-title function_\">getAttribute</span>(attr)\n    }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">elClass</span>(<span class=\"hljs-params\">El,method,class_name,replace_class</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    <span class=\"hljs-keyword\">if</span>(method === <span class=\"hljs-string\">'add'</span>){\n        <span class=\"hljs-keyword\">if</span>(!el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">contains</span>(class_name)){\n            el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(class_name)\n        }\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(method === <span class=\"hljs-string\">'remove'</span>){\n        <span class=\"hljs-keyword\">if</span>(el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">contains</span>(class_name)){\n            el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(class_name)\n        }\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(method === <span class=\"hljs-string\">'toggle'</span>){\n        el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">toggle</span>(class_name)\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(method === <span class=\"hljs-string\">'has'</span> || method === <span class=\"hljs-string\">'check'</span>){\n        <span class=\"hljs-keyword\">return</span> el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">contains</span>(class_name)\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(method === <span class=\"hljs-string\">'replace'</span>){\n       el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(class_name)\n       el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(replace_class)       \n    }\n\n}\n\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>    \n    el.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">removeChild</span>(el)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\">el_type,el_obj,parent</span>){\n    <span class=\"hljs-keyword\">let</span> newEl = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(el_type)\n    <span class=\"hljs-keyword\">if</span>(!el_obj || !parent) <span class=\"hljs-keyword\">return</span> newEl;\n\n    <span class=\"hljs-keyword\">if</span>(el_obj){\n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">class</span>){\n        <span class=\"hljs-keyword\">let</span> class_arr = <span class=\"hljs-title function_\">stdText</span>(el_obj.<span class=\"hljs-property\">class</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">' '</span>)\n        class_arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">each_class</span>=&gt;</span><span class=\"hljs-title function_\">elClass</span>(newEl,<span class=\"hljs-string\">'add'</span>,each_class) )\n    }\n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">attr</span>){\n        <span class=\"hljs-keyword\">let</span> attr_arr = <span class=\"hljs-title function_\">stdText</span>(el_obj.<span class=\"hljs-property\">attr</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">' '</span>)\n        attr_arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">each_attr</span>=&gt;</span><span class=\"hljs-title function_\">attr</span>(newEl,each_attr.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'='</span>)[<span class=\"hljs-number\">0</span>],each_attr.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'='</span>)[<span class=\"hljs-number\">1</span>]))\n    }\n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">html</span>){ <span class=\"hljs-title function_\">html</span>(newEl,el_obj.<span class=\"hljs-property\">html</span>)    }\n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">text</span>){ <span class=\"hljs-title function_\">text</span>(newEl,el_obj.<span class=\"hljs-property\">text</span>)    }        \n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">id</span>)  { <span class=\"hljs-title function_\">attr</span>(newEl,<span class=\"hljs-string\">'id'</span>,el_obj.<span class=\"hljs-property\">id</span>) }                \n    <span class=\"hljs-keyword\">if</span>(el_obj.<span class=\"hljs-property\">src</span>)  { <span class=\"hljs-title function_\">attr</span>(newEl,<span class=\"hljs-string\">'src'</span>,el_obj.<span class=\"hljs-property\">src</span>) }                \n\n    }\n    <span class=\"hljs-keyword\">if</span>(parent){\n     <span class=\"hljs-keyword\">let</span> parentEl = <span class=\"hljs-keyword\">typeof</span> parent === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(parent) : parent            \n     parentEl.<span class=\"hljs-title function_\">appendChild</span>(newEl)\n    }\n    <span class=\"hljs-keyword\">return</span> newEl\n}\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">stdText</span>(<span class=\"hljs-params\">text</span>){\n    <span class=\"hljs-keyword\">return</span> text.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">' '</span>).<span class=\"hljs-title function_\">trim</span>();\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">redirectTo</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    <span class=\"hljs-keyword\">let</span> link = <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-string\">'a'</span>)\n    link.<span class=\"hljs-property\">href</span> = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${el.id}</span>`</span>\n    <span class=\"hljs-title function_\">click</span>(link)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hide</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    <span class=\"hljs-title function_\">elClass</span>(el,<span class=\"hljs-string\">'add'</span>,<span class=\"hljs-string\">'d-none'</span>)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    <span class=\"hljs-title function_\">elClass</span>(el,<span class=\"hljs-string\">'remove'</span>,<span class=\"hljs-string\">'d-none'</span>)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleView</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>\n    <span class=\"hljs-title function_\">elClass</span>(el,<span class=\"hljs-string\">'toggle'</span>,<span class=\"hljs-string\">'d-none'</span>)    \n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ?  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    el.<span class=\"hljs-title function_\">click</span>()\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addSpinner</span>(<span class=\"hljs-params\">El,join</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>    \n    <span class=\"hljs-title function_\">attr</span>(el,<span class=\"hljs-string\">'disabled'</span>,<span class=\"hljs-string\">'true'</span>)\n    <span class=\"hljs-keyword\">if</span>(join){\n        <span class=\"hljs-title function_\">html</span>(el,<span class=\"hljs-string\">`&lt;span class=\"mx-1 spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/span&gt;`</span>,<span class=\"hljs-literal\">true</span>)\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-title function_\">html</span>(el,<span class=\"hljs-string\">`&lt;button class='btn w-100' disabled&gt;&lt;span class=\"mx-1 spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/span&gt;&lt;/button&gt;`</span>)        \n    }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeSpinner</span>(<span class=\"hljs-params\">El</span>){\n        <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>    \n        el.<span class=\"hljs-title function_\">removeAttribute</span>(<span class=\"hljs-string\">'disabled'</span>)\n        <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-title function_\">get</span>(el,<span class=\"hljs-string\">'.spinner-grow'</span>))\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addBottomLoading</span>(<span class=\"hljs-params\">El,loading_type</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    <span class=\"hljs-keyword\">let</span> loading_class = loading_type === <span class=\"hljs-string\">'once'</span> ? <span class=\"hljs-string\">'load-once'</span> : <span class=\"hljs-string\">'load-infinite'</span> \n    el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'loading'</span>,loading_class)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeBottomLoading</span>(<span class=\"hljs-params\">El</span>){\n    <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>        \n    el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">'loading'</span>,<span class=\"hljs-string\">'load-once'</span>,<span class=\"hljs-string\">'load-infinite'</span>)\n}\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getTimeGap</span>(<span class=\"hljs-params\">dateFrom</span>){\n<span class=\"hljs-keyword\">let</span> d1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(dateFrom)\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">isNaN</span>(d1.<span class=\"hljs-title function_\">getTime</span>())) <span class=\"hljs-keyword\">return</span> ; \n<span class=\"hljs-keyword\">let</span> d2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n<span class=\"hljs-keyword\">let</span> df_ms = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(d2-d1)<span class=\"hljs-comment\">//gap in mili second</span>\n<span class=\"hljs-keyword\">let</span> df_s = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(df_ms/<span class=\"hljs-number\">1000</span>)<span class=\"hljs-comment\">//gap in second</span>\n<span class=\"hljs-keyword\">let</span> df_mn = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(df_s/<span class=\"hljs-number\">60</span>) <span class=\"hljs-comment\">//gap in minute</span>\n<span class=\"hljs-keyword\">let</span> df_hr = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(df_mn/<span class=\"hljs-number\">60</span>) <span class=\"hljs-comment\">//gap in hour</span>\n<span class=\"hljs-keyword\">let</span> df_d = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(df_hr/<span class=\"hljs-number\">24</span>) <span class=\"hljs-comment\">//gap in day</span>\n<span class=\"hljs-keyword\">let</span> df_yr = d2.<span class=\"hljs-title function_\">getFullYear</span>() - d1.<span class=\"hljs-title function_\">getFullYear</span>()\n<span class=\"hljs-keyword\">let</span> df_mo = (df_yr*<span class=\"hljs-number\">12</span>)+(d2.<span class=\"hljs-title function_\">getMonth</span>()-d1.<span class=\"hljs-title function_\">getMonth</span>())\n<span class=\"hljs-keyword\">if</span>(d2.<span class=\"hljs-title function_\">getDate</span>() &lt; d1.<span class=\"hljs-title function_\">getDate</span>()){\n    df_mo--\n}\ndf_mo = df_mo &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : df_mo\n<span class=\"hljs-keyword\">let</span> df_gap = \ndf_yr &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${df_yr}</span>yr`</span> :\ndf_mo &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${df_mo}</span>mon`</span>:\ndf_d  &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${df_d}</span>d`</span>   :\ndf_hr &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${df_hr}</span>hr`</span> :\ndf_mn &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${df_mn}</span>min`</span>: <span class=\"hljs-string\">'just now'</span>\n<span class=\"hljs-keyword\">return</span> df_gap\n}\n<span class=\"hljs-comment\">// end function</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debugMsg</span>(<span class=\"hljs-params\">msg</span>){\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>) !== <span class=\"hljs-string\">'true'</span>) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(debugMsg)\n}\n<span class=\"hljs-comment\">//function name must be same as module name</span>\n\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateUrl</span>(<span class=\"hljs-params\">urlText</span>){\n    <span class=\"hljs-keyword\">if</span>(urlText){\n       <span class=\"hljs-keyword\">let</span> defaultUrl = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span>\n       <span class=\"hljs-keyword\">let</span> newUrl = defaultUrl + urlText\n       <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">history</span>.<span class=\"hljs-title function_\">pushState</span>({<span class=\"hljs-attr\">path</span>:newUrl},<span class=\"hljs-string\">''</span>,newUrl)\n   }\n}\n\n\n\n\n<span class=\"hljs-comment\">//initialize tooltip </span>\n<span class=\"hljs-keyword\">const</span> tooltipTriggerList = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'[data-bs-toggle=\"tooltip\"]'</span>)\n<span class=\"hljs-keyword\">const</span> tooltipList = [...tooltipTriggerList].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">tooltipTriggerEl</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> bootstrap.<span class=\"hljs-title class_\">Tooltip</span>(tooltipTriggerEl))\n\n<span class=\"hljs-comment\">// initialize popup</span>\n<span class=\"hljs-keyword\">const</span> popoverTriggerList = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'[data-bs-toggle=\"popover\"]'</span>)\n<span class=\"hljs-keyword\">const</span> popoverList = [...popoverTriggerList].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">popoverTriggerEl</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> bootstrap.<span class=\"hljs-title class_\">Popover</span>(popoverTriggerEl))\n\n\n<span class=\"hljs-comment\">// initialize toast</span>\n<span class=\"hljs-keyword\">const</span> toastElList = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.toast'</span>)\n<span class=\"hljs-keyword\">const</span> toastList = [...toastElList].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">toastEl</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> bootstrap.<span class=\"hljs-title class_\">Toast</span>(toastEl,{<span class=\"hljs-attr\">autohide</span>:<span class=\"hljs-literal\">true</span>}))\n\n<span class=\"hljs-comment\">// open toast on button trigger</span>\n<span class=\"hljs-keyword\">const</span> toastTrigger = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'liveToastBtn'</span>)\n<span class=\"hljs-keyword\">const</span> toastLiveExample = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'liveToast'</span>)\n\n<span class=\"hljs-keyword\">let</span> allBtnHasToast = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.btn-has-toast'</span>)\nallBtnHasToast.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachBtn</span>=&gt;</span>{\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_\">attr</span>(eachBtn,<span class=\"hljs-string\">'data-target-toast'</span>)) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-keyword\">let</span> toastBootstrap = bootstrap.<span class=\"hljs-property\">Toast</span>.<span class=\"hljs-title function_\">getOrCreateInstance</span>(<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">`#<span class=\"hljs-subst\">${attr(eachBtn,<span class=\"hljs-string\">'data-target-toast'</span>)}</span>`</span>))\n    <span class=\"hljs-title function_\">trigger</span>(eachBtn,<span class=\"hljs-function\">()=&gt;</span>toastBootstrap.<span class=\"hljs-title function_\">show</span>())\n})\n\n\n\n<span class=\"hljs-comment\">//ripple</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addRippleEffect</span>(<span class=\"hljs-params\">eachBtn,e</span>){\n  <span class=\"hljs-keyword\">let</span> clickX =e.<span class=\"hljs-property\">clientX</span> \n  <span class=\"hljs-keyword\">let</span> clickY =e.<span class=\"hljs-property\">clientY</span>\n  <span class=\"hljs-keyword\">let</span> elementFromLeft =e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">offsetLeft</span> \n  <span class=\"hljs-keyword\">let</span> elementFromTop = e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">offsetTop</span>\n  <span class=\"hljs-keyword\">let</span> rippleX = clickX-elementFromLeft\n  <span class=\"hljs-keyword\">let</span> rippleY = clickY-elementFromTop\n  <span class=\"hljs-keyword\">let</span> ripple = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'span'</span>)\n  ripple.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'ripple'</span>)\n  ripple.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${rippleY}</span>px`</span>\n  ripple.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span>= <span class=\"hljs-string\">`<span class=\"hljs-subst\">${rippleX}</span>px`</span>          \n  eachBtn.<span class=\"hljs-title function_\">appendChild</span>(ripple)\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>{ripple.<span class=\"hljs-title function_\">remove</span>()},<span class=\"hljs-number\">500</span>)\n}\n\n <span class=\"hljs-comment\">// ripple Effect</span>\n<span class=\"hljs-keyword\">const</span> ripple_buttons = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.has_ripple'</span>)\n<span class=\"hljs-keyword\">if</span>(ripple_buttons.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>){\nripple_buttons.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachBtn</span>=&gt;</span>{\n    <span class=\"hljs-title function_\">trigger</span>(eachBtn,<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span><span class=\"hljs-title function_\">addRippleEffect</span>(eachBtn,e))\n})\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initTabAutoId</span>(<span class=\"hljs-params\">tab</span>){\n    <span class=\"hljs-keyword\">if</span>(!tab) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-title function_\">attr</span>(tab,<span class=\"hljs-string\">'data-has-auto-id'</span>,<span class=\"hljs-string\">'true'</span>)\n    <span class=\"hljs-keyword\">let</span> randomNum = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*<span class=\"hljs-number\">10000</span>)\n    <span class=\"hljs-title function_\">attr</span>(tab,<span class=\"hljs-string\">'id'</span>,<span class=\"hljs-string\">`tab<span class=\"hljs-subst\">${randomNum}</span>`</span>)\n    <span class=\"hljs-title function_\">getAll</span>(tab,<span class=\"hljs-string\">'.tab-btn-container .tab-btn'</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eachTabBtn,btnIndex</span>)=&gt;</span>{\n        <span class=\"hljs-title function_\">attr</span>(eachTabBtn,<span class=\"hljs-string\">'id'</span>,<span class=\"hljs-string\">`tab<span class=\"hljs-subst\">${randomNum}</span>-btn<span class=\"hljs-subst\">${btnIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n        <span class=\"hljs-title function_\">attr</span>(eachTabBtn,<span class=\"hljs-string\">'data-bs-target'</span>,<span class=\"hljs-string\">`#tab<span class=\"hljs-subst\">${randomNum}</span>-pane<span class=\"hljs-subst\">${btnIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n    })\n    <span class=\"hljs-title function_\">getAll</span>(tab,<span class=\"hljs-string\">'.tab-content-container .tab-pane'</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eachPane,paneIndex</span>)=&gt;</span>{\n        <span class=\"hljs-title function_\">attr</span>(eachPane,<span class=\"hljs-string\">'id'</span>,<span class=\"hljs-string\">`tab<span class=\"hljs-subst\">${randomNum}</span>-pane<span class=\"hljs-subst\">${paneIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n        <span class=\"hljs-title function_\">attr</span>(eachPane,<span class=\"hljs-string\">'aria-labelledby'</span>,<span class=\"hljs-string\">`#tab<span class=\"hljs-subst\">${randomNum}</span>-btn<span class=\"hljs-subst\">${paneIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n    })    \n}\n    <span class=\"hljs-comment\">// dynamic id for tab btn and tab pane</span>\n    <span class=\"hljs-keyword\">const</span> allTabContainer = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.tab-container'</span>);\n    <span class=\"hljs-keyword\">if</span>(allTabContainer){\n        allTabContainer.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eachContainer,tabIndex</span>)=&gt;</span>{\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">attr</span>(eachContainer,<span class=\"hljs-string\">'data-has-auto-id'</span>) === <span class=\"hljs-string\">'true'</span>) <span class=\"hljs-keyword\">return</span> ;\n            <span class=\"hljs-title function_\">attr</span>(eachContainer,<span class=\"hljs-string\">'data-has-auto-id'</span>,<span class=\"hljs-string\">'true'</span>)\n            <span class=\"hljs-title function_\">getAll</span>(eachContainer,<span class=\"hljs-string\">'.tab-btn-container .tab-btn'</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eachTabBtn,btnIndex</span>)=&gt;</span>{\n                <span class=\"hljs-title function_\">attr</span>(eachTabBtn,<span class=\"hljs-string\">'id'</span>,<span class=\"hljs-string\">`tab<span class=\"hljs-subst\">${tabIndex+<span class=\"hljs-number\">1</span>}</span>-btn<span class=\"hljs-subst\">${btnIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n                <span class=\"hljs-title function_\">attr</span>(eachTabBtn,<span class=\"hljs-string\">'data-bs-target'</span>,<span class=\"hljs-string\">`#tab<span class=\"hljs-subst\">${tabIndex+<span class=\"hljs-number\">1</span>}</span>-pane<span class=\"hljs-subst\">${btnIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n            })\n            <span class=\"hljs-title function_\">getAll</span>(eachContainer,<span class=\"hljs-string\">'.tab-content-container .tab-pane'</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">eachPane,paneIndex</span>)=&gt;</span>{\n                <span class=\"hljs-title function_\">attr</span>(eachPane,<span class=\"hljs-string\">'id'</span>,<span class=\"hljs-string\">`tab<span class=\"hljs-subst\">${tabIndex+<span class=\"hljs-number\">1</span>}</span>-pane<span class=\"hljs-subst\">${paneIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n                <span class=\"hljs-title function_\">attr</span>(eachPane,<span class=\"hljs-string\">'aria-labelledby'</span>,<span class=\"hljs-string\">`#tab<span class=\"hljs-subst\">${tabIndex+<span class=\"hljs-number\">1</span>}</span>-btn<span class=\"hljs-subst\">${paneIndex+<span class=\"hljs-number\">1</span>}</span>`</span>)\n            })\n        })\n    }\n\n<span class=\"hljs-comment\">// initialize hightlight js</span>\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'code'</span>)){hljs.<span class=\"hljs-title function_\">highlightAll</span>();}\n\n\n\n<span class=\"hljs-comment\">// start slider</span>\n<span class=\"hljs-comment\">// const allSliderContainer = getAll('.slider-container') </span>\n<span class=\"hljs-comment\">// if(allSliderContainer.length &gt; 0){</span>\n<span class=\"hljs-comment\">//     allSliderContainer.forEach(eachSliderContainer=&gt;{</span>\n<span class=\"hljs-comment\">//         let slider = get(eachSliderContainer,'.slider')</span>\n<span class=\"hljs-comment\">//         let slides = getAll(slider,'.slide')</span>\n<span class=\"hljs-comment\">//         console.log(slides[0])</span>\n<span class=\"hljs-comment\">//         if(slider &amp;&amp; slides){</span>\n<span class=\"hljs-comment\">//             let currentIndex = 0;</span>\n<span class=\"hljs-comment\">//             const slideWidth = slides[0].offsetWidth;</span>\n<span class=\"hljs-comment\">//             function goToSlide(index){</span>\n<span class=\"hljs-comment\">//                 if(index &lt; 0 || index &gt;= slides.length) return ;</span>\n<span class=\"hljs-comment\">//                 currentIndex = index</span>\n<span class=\"hljs-comment\">//                 const offSet = - currentIndex * slideWidth;</span>\n<span class=\"hljs-comment\">//                 slider.style.transform = `translateX(${offSet}px)`</span>\n<span class=\"hljs-comment\">//                 console.log(`translateX(${offSet}px)`)</span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             function nextSlide(){</span>\n<span class=\"hljs-comment\">//                 console.log('next slide init')</span>\n<span class=\"hljs-comment\">//                 if(currentIndex === slides.length -1){</span>\n<span class=\"hljs-comment\">//                     console.log(currentIndex)</span>\n<span class=\"hljs-comment\">//                     goToSlide(0)</span>\n<span class=\"hljs-comment\">//                 }else{</span>\n<span class=\"hljs-comment\">//                     goToSlide(currentIndex+1)</span>\n<span class=\"hljs-comment\">//                 }</span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             function prevSlide(){</span>\n<span class=\"hljs-comment\">//                 if(currentIndex === 0){</span>\n<span class=\"hljs-comment\">//                     goToSlide(slides.length -1)</span>\n<span class=\"hljs-comment\">//                 }else{</span>\n<span class=\"hljs-comment\">//                     goToSlide(currentIndex-1)</span>\n<span class=\"hljs-comment\">//                 }</span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             function autoSlide(autoslideDuration){</span>\n<span class=\"hljs-comment\">//                 let duration = autoslideDuration ? autoslideDuration : 5000;</span>\n<span class=\"hljs-comment\">//                  setInterval(()=&gt;{</span>\n<span class=\"hljs-comment\">//                     nextSlide()</span>\n<span class=\"hljs-comment\">//                  },duration)</span>\n<span class=\"hljs-comment\">//             }</span>\n\n<span class=\"hljs-comment\">//             if(attr(eachSliderContainer,'data-autoslide') === 'true'){</span>\n<span class=\"hljs-comment\">//                 let slideDuration = parseInt(atrr(eachSliderContainer,'data-autoslide-duration')) ?</span>\n<span class=\"hljs-comment\">//                                     parseInt(atrr(eachSliderContainer,'data-autoslide-duration')) : 500  </span>\n<span class=\"hljs-comment\">//                 autoSlide(slideDuration)                                                                </span>\n<span class=\"hljs-comment\">//             }</span>\n\n<span class=\"hljs-comment\">//             if(attr(eachSliderContainer,'data-slide-type')){</span>\n<span class=\"hljs-comment\">//             if(attr(eachSliderContainer,'data-slide-type') === 'inner-btn'){</span>\n<span class=\"hljs-comment\">//                 addBtnToSlider()</span>\n<span class=\"hljs-comment\">//             }else{</span>\n<span class=\"hljs-comment\">//                 addPointToSlider()</span>\n<span class=\"hljs-comment\">//             }                                </span>\n\n<span class=\"hljs-comment\">//             function addBtnToSlider(){</span>\n<span class=\"hljs-comment\">//             let sliderPrevBtn = document.createElement('i')</span>\n<span class=\"hljs-comment\">//             sliderPrevBtn.classList.add('sliderPrevBtn','fa-solid','fa-chevron-left','i-btn','rounded-circle','light-bg','fs-5')</span>\n<span class=\"hljs-comment\">//             let sliderNextBtn = document.createElement('i')</span>\n<span class=\"hljs-comment\">//             sliderNextBtn.classList.add('sliderNextBtn','fa-solid','fa-chevron-right','i-btn','rounded-circle','light-bg','fs-5')</span>\n<span class=\"hljs-comment\">//             eachSliderContainer.appendChild(sliderPrevBtn)</span>\n<span class=\"hljs-comment\">//             eachSliderContainer.appendChild(sliderNextBtn)</span>\n<span class=\"hljs-comment\">//             trigger(sliderPrevBtn,'click',()=&gt;prevSlide())</span>\n<span class=\"hljs-comment\">//             trigger(sliderNextBtn,'click',()=&gt;nextSlide())            </span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             // end add btn to slider</span>\n\n<span class=\"hljs-comment\">//             function addPointToSlider(){</span>\n<span class=\"hljs-comment\">//                 let sliderBottomPoint = document.createElement('div')</span>\n<span class=\"hljs-comment\">//                 sliderBottomPoint.classList.add('slider-points')</span>\n<span class=\"hljs-comment\">//                 slides.forEach((eachSlide,i)=&gt;{</span>\n<span class=\"hljs-comment\">//                     let defaultelClassForPointSlide = i == 0 ? 'active' : ''</span>\n<span class=\"hljs-comment\">//                     html(sliderBottomPoint,`&lt;span elClass= \"${defaultelClassForPointSlide} slider-point-btn \" &gt;&lt;/span&gt;`,true)</span>\n<span class=\"hljs-comment\">//                 })</span>\n<span class=\"hljs-comment\">//                eachSliderContainer.appendChild(sliderBottomPoint) </span>\n<span class=\"hljs-comment\">//                 getAll(sliderBottomPoint,'.slider-point-btn').forEach((eachPoint,i)=&gt;{</span>\n<span class=\"hljs-comment\">//                     trigger(eachPoint,'click',()=&gt;{</span>\n<span class=\"hljs-comment\">//                         // remove active elClass from span</span>\n<span class=\"hljs-comment\">//                         sliderBottomPoint.querySelectorAll('.slider-point-btn').forEach(eachSpan=&gt;{</span>\n<span class=\"hljs-comment\">//                             if(eachSpan.classList.contains('active')){</span>\n<span class=\"hljs-comment\">//                                 eachSpan.classList.remove('active')</span>\n<span class=\"hljs-comment\">//                             }                        </span>\n<span class=\"hljs-comment\">//                     })</span>\n<span class=\"hljs-comment\">//                     eachPoint.classList.add('active')</span>\n<span class=\"hljs-comment\">//                     goToSlide(i)</span>\n<span class=\"hljs-comment\">//                      })</span>\n<span class=\"hljs-comment\">//                 })</span>\n\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             //  add point to slider</span>\n\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//         // end data-slider-type consition</span>\n<span class=\"hljs-comment\">//         else{</span>\n<span class=\"hljs-comment\">//             addStdBtnToSlider()</span>\n<span class=\"hljs-comment\">//             function addStdBtnToSlider(){</span>\n<span class=\"hljs-comment\">//             let div = document.createElement('div')</span>\n<span class=\"hljs-comment\">//             div.classList.add('w-100','d-flex','py-2','justify-content-between','gap-2','align-items-center')</span>\n<span class=\"hljs-comment\">//             let sliderPrevBtn = document.createElement('button')</span>\n<span class=\"hljs-comment\">//             sliderPrevBtn.classList.add('btn','btn-secondary','flex-grow-1')</span>\n<span class=\"hljs-comment\">//             text(sliderPrevBtn,'prev')</span>\n<span class=\"hljs-comment\">//             let sliderNextBtn = document.createElement('button')</span>\n<span class=\"hljs-comment\">//             sliderNextBtn.classList.add('btn','btn-primary','flex-grow-1')</span>\n<span class=\"hljs-comment\">//             text(sliderNextBtn,'next')</span>\n<span class=\"hljs-comment\">//             div.appendChild(sliderPrevBtn)</span>\n<span class=\"hljs-comment\">//             div.appendChild(sliderNextBtn)</span>\n<span class=\"hljs-comment\">//             eachSliderContainer.appendChild(div)</span>\n<span class=\"hljs-comment\">//             trigger(sliderPrevBtn,'click',()=&gt;prevSlide())</span>\n<span class=\"hljs-comment\">//             trigger(sliderNextBtn,'click',()=&gt;nextSlide()) </span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             // end add stdbtn to slider</span>\n<span class=\"hljs-comment\">//         }//end else</span>\n\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//        // end slider,slides exist condition</span>\n\n<span class=\"hljs-comment\">//     })</span>\n<span class=\"hljs-comment\">//     // end each-container loop</span>\n<span class=\"hljs-comment\">// } </span>\n<span class=\"hljs-comment\">// // end container exist conditon</span>\n<span class=\"hljs-comment\">// // end slider</span>\n\n\n\n\n\n\n\n\n\n<span class=\"hljs-comment\">// change website theme</span>\n<span class=\"hljs-keyword\">const</span> themeBtn = <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'#themeChangerBtn'</span>);\n<span class=\"hljs-keyword\">if</span> (themeBtn) {\n    themeBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> currentTheme = <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>,<span class=\"hljs-string\">'data-theme'</span>) || <span class=\"hljs-string\">'dark'</span>;\n        themeBtn.<span class=\"hljs-property\">className</span> = <span class=\"hljs-string\">''</span>;\n        themeBtn.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'fa-solid'</span>, currentTheme === <span class=\"hljs-string\">'dark'</span> ? <span class=\"hljs-string\">'fa-moon'</span> : <span class=\"hljs-string\">'fa-sun'</span>, <span class=\"hljs-string\">'i-btn'</span>, <span class=\"hljs-string\">'rounded-circle'</span>);\n        <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>,<span class=\"hljs-string\">'data-theme'</span>,currentTheme === <span class=\"hljs-string\">'dark'</span> ? <span class=\"hljs-string\">'light'</span> : <span class=\"hljs-string\">'dark'</span>)\n        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-property\">BSpageTheme</span> = <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>,<span class=\"hljs-string\">'data-theme'</span>)\n    });\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadPageTheme</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> currentTheme = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-property\">BSpageTheme</span> || <span class=\"hljs-string\">'dark'</span>;\n    themeBtn.<span class=\"hljs-property\">className</span> = <span class=\"hljs-string\">''</span>;\n    themeBtn.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'fa-solid'</span>, currentTheme === <span class=\"hljs-string\">'dark'</span> ? <span class=\"hljs-string\">'fa-sun'</span> : <span class=\"hljs-string\">'fa-moon'</span>, <span class=\"hljs-string\">'i-btn'</span>, <span class=\"hljs-string\">'rounded-circle'</span>);\n    <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>,<span class=\"hljs-string\">'data-theme'</span>,currentTheme)\n}\n\n<span class=\"hljs-title function_\">loadPageTheme</span>();\n\n\n<span class=\"hljs-comment\">//dropdown as select menu </span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initAllSelectMenu</span>(<span class=\"hljs-params\"></span>){\n <span class=\"hljs-keyword\">const</span> allDropdownSelectMenu = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.dropdown-menu.dropdown-select-menu'</span>)\n <span class=\"hljs-keyword\">if</span>(allDropdownSelectMenu.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n allDropdownSelectMenu.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachMenu</span>=&gt;</span>{\n     <span class=\"hljs-title function_\">initSelectMenu</span>(eachMenu.<span class=\"hljs-property\">id</span>)    \n })\n}\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initSelectMenu</span>(<span class=\"hljs-params\">id</span>){\n    <span class=\"hljs-keyword\">let</span> targetMenu = <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">`#<span class=\"hljs-subst\">${id}</span>`</span>)\n    <span class=\"hljs-keyword\">if</span>(!targetMenu) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-title function_\">attr</span>(targetMenu,<span class=\"hljs-string\">'data-has-auto-id'</span>,<span class=\"hljs-string\">'true'</span>)    \n    <span class=\"hljs-keyword\">let</span> allMenuItem = <span class=\"hljs-title function_\">getAll</span>(targetMenu,<span class=\"hljs-string\">'*[data-value]'</span>)\n    <span class=\"hljs-title function_\">attr</span>(targetMenu,<span class=\"hljs-string\">'data-value'</span>,<span class=\"hljs-title function_\">attr</span>(allMenuItem[<span class=\"hljs-number\">0</span>],<span class=\"hljs-string\">'data-value'</span>))\n    allMenuItem.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachMenuItem</span>=&gt;</span>{\n        <span class=\"hljs-title function_\">trigger</span>(eachMenuItem,<span class=\"hljs-function\">()=&gt;</span>{\n            <span class=\"hljs-title function_\">attr</span>(targetMenu,<span class=\"hljs-string\">'data-value'</span>,<span class=\"hljs-title function_\">attr</span>(eachMenuItem,<span class=\"hljs-string\">'data-value'</span>))\n            <span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">`#<span class=\"hljs-subst\">${attr(targetMenu,<span class=\"hljs-string\">'data-field'</span>)}</span>`</span>,eachMenuItem.<span class=\"hljs-property\">innerText</span>)\n        })\n    })\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSelectMenuValue</span>(<span class=\"hljs-params\">id</span>){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">`#<span class=\"hljs-subst\">${id}</span>`</span>,<span class=\"hljs-string\">'data-value'</span>)\n}\n\n<span class=\"hljs-title function_\">initAllSelectMenu</span>()\n<span class=\"hljs-comment\">// let menuValue = getSelectMenuValue('exampleMenu')</span>\n<span class=\"hljs-comment\">// end select menu</span>\n\n\n<span class=\"hljs-comment\">//initialize one accordion auto id</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setAccordionItemAutoId</span>(<span class=\"hljs-params\">Accordion</span>){\n    <span class=\"hljs-keyword\">let</span> accordion = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Accordion</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">Accordion</span>) : <span class=\"hljs-title class_\">Accordion</span> \n    <span class=\"hljs-keyword\">if</span> (!accordion) <span class=\"hljs-keyword\">return</span>;    \n    <span class=\"hljs-keyword\">let</span> randomNumber = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()*<span class=\"hljs-number\">1000</span>)\n    accordion.<span class=\"hljs-property\">id</span> = <span class=\"hljs-string\">`acr-<span class=\"hljs-subst\">${randomNumber}</span>`</span>\n    <span class=\"hljs-keyword\">let</span> accordionItems = <span class=\"hljs-title function_\">getAll</span>(accordion,<span class=\"hljs-string\">'.accordion-item'</span>);\n    <span class=\"hljs-keyword\">if</span> (!accordionItems || accordionItems.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n    accordionItems.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acr_item, index</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">let</span> accordionButton   = <span class=\"hljs-title function_\">get</span>(acr_item,<span class=\"hljs-string\">'.accordion-button'</span>)\n        <span class=\"hljs-keyword\">let</span> accordionCollapse = <span class=\"hljs-title function_\">get</span>(acr_item,<span class=\"hljs-string\">'.accordion-collapse'</span>)\n        <span class=\"hljs-keyword\">if</span> (accordionButton &amp;&amp; accordionCollapse) {\n            acr_item.<span class=\"hljs-property\">id</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${accordion.id}</span>-item<span class=\"hljs-subst\">${index+<span class=\"hljs-number\">1</span>}</span>`</span>\n            <span class=\"hljs-keyword\">let</span> acr_item_collapse_id = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${acr_item.id}</span>-collapse`</span>;\n            <span class=\"hljs-title function_\">elClass</span>(accordionCollapse,<span class=\"hljs-string\">'remove'</span>,<span class=\"hljs-string\">'show'</span>)\n            accordionCollapse.<span class=\"hljs-property\">id</span> = acr_item_collapse_id;\n            <span class=\"hljs-title function_\">attr</span>(accordionCollapse,<span class=\"hljs-string\">'data-bs-parent'</span>,<span class=\"hljs-string\">`#acr-<span class=\"hljs-subst\">${randomNumber}</span>`</span>)\n            <span class=\"hljs-title function_\">elClass</span>(accordionButton,<span class=\"hljs-string\">'add'</span>,<span class=\"hljs-string\">'collapsed'</span>)\n            <span class=\"hljs-title function_\">attr</span>(accordionButton,<span class=\"hljs-string\">'data-bs-target'</span>,<span class=\"hljs-string\">`#<span class=\"hljs-subst\">${acr_item_collapse_id}</span>`</span>)\n            <span class=\"hljs-title function_\">attr</span>(accordionButton,<span class=\"hljs-string\">'aria-controls'</span>,acr_item_collapse_id)\n            <span class=\"hljs-title function_\">attr</span>(accordionButton,<span class=\"hljs-string\">'aria-expanded'</span>,<span class=\"hljs-string\">'false'</span>)\n        }\n    });\n}\n\n<span class=\"hljs-comment\">//initialize all accordion of a contaner else in document</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initAccordionAutoId</span>(<span class=\"hljs-params\">container</span>){\n   <span class=\"hljs-keyword\">let</span> allAccordions = container ? <span class=\"hljs-title function_\">getAll</span>(container,<span class=\"hljs-string\">'.accordion'</span>) : <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.accordion'</span>)\n   <span class=\"hljs-keyword\">if</span>(!allAccordions || allAccordions.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n   allAccordions.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachAccordion</span>=&gt;</span>{\n    <span class=\"hljs-title function_\">setAccordionItemAutoId</span>(eachAccordion)\n   })<span class=\"hljs-comment\">//end loop</span>\n}\n\n\n<span class=\"hljs-title function_\">initAccordionAutoId</span>()\n<span class=\"hljs-comment\">// end accordion</span>\n\n\n<span class=\"hljs-comment\">// start read-more,read-once btn</span>\n<span class=\"hljs-keyword\">let</span> allReadOnceBtn = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.btn-read-once'</span>)\n<span class=\"hljs-keyword\">if</span>(allReadOnceBtn.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>){\nallReadOnceBtn.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachReadOnceBtn</span>=&gt;</span>{\n    <span class=\"hljs-title function_\">trigger</span>(eachReadOnceBtn,<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-title function_\">elClass</span>(eachReadOnceBtn,<span class=\"hljs-string\">'add'</span>,<span class=\"hljs-string\">'d-none'</span>) )\n})    \n}\n<span class=\"hljs-comment\">// end function</span>\n\n<span class=\"hljs-keyword\">let</span> allReadTwiceBtn = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.btn-read-twice'</span>)\n<span class=\"hljs-keyword\">if</span>(allReadTwiceBtn.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>){\nallReadTwiceBtn.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachBtn</span>=&gt;</span>{\n    <span class=\"hljs-title function_\">text</span>(eachBtn,<span class=\"hljs-string\">'...read more'</span>)\n    <span class=\"hljs-title function_\">trigger</span>(eachBtn,<span class=\"hljs-function\">()=&gt;</span>{\n        <span class=\"hljs-title function_\">text</span>(eachBtn,<span class=\"hljs-string\">`<span class=\"hljs-subst\">${eachBtn.innerText === <span class=\"hljs-string\">'...read more'</span> ? <span class=\"hljs-string\">'...read less'</span> : <span class=\"hljs-string\">'...read more'</span>}</span>`</span>)\n     })\n})\n}\n<span class=\"hljs-comment\">// end fucntion</span>\n\n\n\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">BtnActiveEffect</span>(<span class=\"hljs-params\">btnContainer</span>){\n    <span class=\"hljs-keyword\">if</span>(!btnContainer) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-keyword\">let</span> elType = <span class=\"hljs-title function_\">attr</span>(btnContainer,<span class=\"hljs-string\">'data-eltype'</span>) ? <span class=\"hljs-title function_\">attr</span>(btnContainer,<span class=\"hljs-string\">'data-eltype'</span>) : <span class=\"hljs-string\">'button'</span>\n    <span class=\"hljs-keyword\">let</span> btnArr = <span class=\"hljs-title function_\">getAll</span>(btnContainer,elType) \n    <span class=\"hljs-keyword\">if</span>(btnArr.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n    <span class=\"hljs-title function_\">elClass</span>(btnArr[<span class=\"hljs-number\">0</span>],<span class=\"hljs-string\">'add'</span>,<span class=\"hljs-string\">'active-btn'</span>)\n    btnArr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachBtn</span>=&gt;</span>{\n        <span class=\"hljs-title function_\">trigger</span>(eachBtn,<span class=\"hljs-function\">()=&gt;</span>{\n            btnArr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">btn</span>=&gt;</span><span class=\"hljs-title function_\">elClass</span>(btn,<span class=\"hljs-string\">'remove'</span>,<span class=\"hljs-string\">'active-btn'</span>))\n            <span class=\"hljs-title function_\">elClass</span>(eachBtn,<span class=\"hljs-string\">'add'</span>,<span class=\"hljs-string\">'active-btn'</span>)\n        })\n    })\n}\n\n<span class=\"hljs-keyword\">let</span> allBtnList = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.btn-list'</span>)\n<span class=\"hljs-keyword\">if</span>(allBtnList.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>){\nallBtnList.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachBtnList</span>=&gt;</span><span class=\"hljs-title class_\">BtnActiveEffect</span>(eachBtnList))    \n}\n\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initCopyContainer</span>(<span class=\"hljs-params\">El</span>){\n  <span class=\"hljs-keyword\">let</span> el = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">El</span> === <span class=\"hljs-string\">'string'</span> ? <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">El</span>) : <span class=\"hljs-title class_\">El</span>    \n  <span class=\"hljs-keyword\">let</span> allCopyContainer = <span class=\"hljs-title class_\">El</span> ? <span class=\"hljs-title function_\">getAll</span>(el,<span class=\"hljs-string\">'.copy-container'</span>) :\n                              <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.copy-container'</span>)                                                          \n  <span class=\"hljs-keyword\">if</span>(!allCopyContainer || allCopyContainer.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n  allCopyContainer.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">container</span>=&gt;</span>{\n    <span class=\"hljs-keyword\">let</span> copy_btn = <span class=\"hljs-title function_\">get</span>(container,<span class=\"hljs-string\">'.copy-btn'</span>)\n    <span class=\"hljs-keyword\">let</span> copy_text = <span class=\"hljs-title function_\">get</span>(container,<span class=\"hljs-string\">'.copy-text'</span>)\n    <span class=\"hljs-title function_\">trigger</span>(copy_btn,<span class=\"hljs-function\">()=&gt;</span>{\n        <span class=\"hljs-title function_\">copyText</span>(<span class=\"hljs-title function_\">text</span>(copy_text),<span class=\"hljs-function\">()=&gt;</span>{   \n        <span class=\"hljs-title function_\">elClass</span>(copy_btn,<span class=\"hljs-string\">'replace'</span>,<span class=\"hljs-string\">'fa-clipboard'</span>,<span class=\"hljs-string\">'fa-circle-check'</span>)\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-title function_\">elClass</span>(copy_btn,<span class=\"hljs-string\">'replace'</span>,<span class=\"hljs-string\">'fa-circle-check'</span>,<span class=\"hljs-string\">'fa-clipboard'</span>),<span class=\"hljs-number\">2500</span>)            \n        })<span class=\"hljs-comment\">//end callback</span>\n    })<span class=\"hljs-comment\">//end trigger</span>\n  })<span class=\"hljs-comment\">//end loop</span>\n}\n\n\n\n\n<span class=\"hljs-title function_\">initCopyContainer</span>()\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">copyText</span>(<span class=\"hljs-params\">text,callback</span>) {\n<span class=\"hljs-keyword\">if</span> (navigator.<span class=\"hljs-property\">clipboard</span>) {\n    navigator.<span class=\"hljs-property\">clipboard</span>.<span class=\"hljs-title function_\">writeText</span>(text).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title function_\">callback</span>()\n    }).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'Could not copy text: '</span>, err);\n    });\n}\n}\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">utf8ToBase64</span>(<span class=\"hljs-params\">str</span>) {\n    <span class=\"hljs-comment\">// Encode the string as UTF-8</span>\n    <span class=\"hljs-keyword\">let</span> utf8Bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextEncoder</span>().<span class=\"hljs-title function_\">encode</span>(str);\n    <span class=\"hljs-comment\">// Convert bytes to Base64</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">btoa</span>(<span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(...utf8Bytes));\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">base64ToUtf8</span>(<span class=\"hljs-params\">str</span>) {\n    <span class=\"hljs-comment\">// Decode Base64 to a string</span>\n    <span class=\"hljs-keyword\">let</span> binaryString = <span class=\"hljs-title function_\">atob</span>(str);\n    <span class=\"hljs-comment\">// Convert binary string to a Uint8Array</span>\n    <span class=\"hljs-keyword\">let</span> bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Uint8Array</span>(binaryString.<span class=\"hljs-property\">length</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; binaryString.<span class=\"hljs-property\">length</span>; i++) {\n        bytes[i] = binaryString.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n    <span class=\"hljs-comment\">// Decode bytes to a UTF-8 string</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextDecoder</span>().<span class=\"hljs-title function_\">decode</span>(bytes);\n}\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">translateLanguage</span>(<span class=\"hljs-params\">word,soruce,target,callback</span>){\n <span class=\"hljs-keyword\">let</span> res    = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`https://api.mymemory.translated.net/get?q=<span class=\"hljs-subst\">${word}</span>!&amp;langpair=<span class=\"hljs-subst\">${soruce}</span>|<span class=\"hljs-subst\">${target}</span>`</span>)\n <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>()\n <span class=\"hljs-keyword\">if</span>(!res.<span class=\"hljs-property\">ok</span>){\n    <span class=\"hljs-title function_\">callback</span>()\n    <span class=\"hljs-keyword\">return</span> ;\n }\n <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-property\">ok</span> ? result.<span class=\"hljs-property\">matches</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">translation</span> : <span class=\"hljs-literal\">false</span> \n}\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initMediaDownloader</span>(<span class=\"hljs-params\"></span>){\n<span class=\"hljs-keyword\">let</span> allMediaDownloadLink = <span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">'.media-container .media-download-link'</span>)\n<span class=\"hljs-keyword\">if</span>(allMediaDownloadLink.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n    allMediaDownloadLink.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">eachLink</span>=&gt;</span>{\n        <span class=\"hljs-title function_\">trigger</span>(eachLink,<span class=\"hljs-title function_\">async</span>(e)=&gt;{\n            e.<span class=\"hljs-title function_\">preventDefault</span>()\n            <span class=\"hljs-keyword\">let</span> downloadUrl = <span class=\"hljs-title function_\">attr</span>(eachLink,<span class=\"hljs-string\">'data-download-url'</span>)\n            <span class=\"hljs-keyword\">let</span> file_name = <span class=\"hljs-title function_\">attr</span>(eachLink,<span class=\"hljs-string\">'data-file-name'</span>)      \n            <span class=\"hljs-keyword\">if</span>(!(downloadUrl&amp;&amp;file_name)) <span class=\"hljs-keyword\">return</span> ;\n            <span class=\"hljs-keyword\">try</span>{\n               <span class=\"hljs-keyword\">let</span> response  = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(downloadUrl)\n               <span class=\"hljs-keyword\">if</span>(response.<span class=\"hljs-property\">ok</span>){\n               <span class=\"hljs-keyword\">let</span> blob = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">blob</span>()\n               <span class=\"hljs-keyword\">let</span> link = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'a'</span>)\n               <span class=\"hljs-keyword\">let</span> downloadUrl = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">URL</span>.<span class=\"hljs-title function_\">createObjectURL</span>(blob)\n               link.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">'href'</span>,downloadUrl)\n               link.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">'download'</span>,file_name)\n               <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(link)\n               link.<span class=\"hljs-title function_\">click</span>()\n               link.<span class=\"hljs-title function_\">remove</span>()\n               <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">URL</span>.<span class=\"hljs-title function_\">revokeObjectURL</span>(downloadUrl)\n            }\n            }<span class=\"hljs-keyword\">catch</span>(err){\n              <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n             }\n        })<span class=\"hljs-comment\">//end trigger</span>\n    })<span class=\"hljs-comment\">//end forEach loop </span>\n}<span class=\"hljs-comment\">// end function</span>\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleFullscreen</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">fullscreenElement</span>) {\n            <span class=\"hljs-comment\">// Request fullscreen mode</span>\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-title function_\">requestFullscreen</span>();\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Exit fullscreen mode</span>\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">exitFullscreen</span>();\n        }\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Failed to change fullscreen mode:\"</span>, err);\n    }\n}\n\n      </code></pre></div>","topic_id":1}],"chapter_id":1}]}