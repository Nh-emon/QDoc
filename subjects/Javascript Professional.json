{"subject_name":"Javascript Professional","chapters":[{"chapter_name":"11.Conditions","topics":[{"topic_name":"1.Ternary Operator","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\" data-el=\"section\"><h2>Ternary Operator</h2>\n<p>The ternary operator can be used to shorten if/else operations, making it useful for returning values quickly.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">syntax<br></p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">let</span> variable = A-condition ? resultA : B-condition ? resultB : C-condition ? resultC : elseResult;\n<span class=\"hljs-keyword\">let</span> variable = A-condition ? (resultA, resultMore, resultMore) : B-condition ? resultB : C-condition ? resultC : elseResult;\n<span class=\"hljs-keyword\">let</span> nested = a ? (b ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">3</span>) : <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">return</span> (a === <span class=\"hljs-string\">'A'</span>) ? <span class=\"hljs-string\">'result1'</span> : <span class=\"hljs-string\">'else result2'</span>; <span class=\"hljs-comment\">// return with ternary operator</span>\n</code></pre>\n<h3>Example 1: Normal way vs. Ternary Operator</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-comment\">// Normal way</span>\n<span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'kitty'</span>;\n<span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-string\">''</span>;\n<span class=\"hljs-keyword\">if</span> (animal === <span class=\"hljs-string\">'kitty'</span>) {\n    result = <span class=\"hljs-string\">'cute'</span>;\n} <span class=\"hljs-keyword\">else</span> {\n    result = <span class=\"hljs-string\">'still nice'</span>;\n}\n\n<span class=\"hljs-comment\">// With ternary operator</span>\n<span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'kitty'</span>;\n<span class=\"hljs-keyword\">var</span> result = (animal === <span class=\"hljs-string\">'kitty'</span>) ? <span class=\"hljs-string\">'cute'</span> : <span class=\"hljs-string\">'still nice'</span>; <span class=\"hljs-comment\">// cute</span>\n</code></pre>\n<p>In this case, <code>result</code> gets the value 'cute' because <code>animal</code> is 'kitty'. If <code>animal</code> had another value, <code>result</code> would be 'still nice'.</p>\n<h3>Example 2: Multiple Operations</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'not a'</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">''</span>;\nb = a === <span class=\"hljs-number\">0</span> ? (a = <span class=\"hljs-number\">1</span>, str += <span class=\"hljs-string\">' test'</span>) : (a = <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 'not a test'</span>\n</code></pre>\n<p>Because <code>a</code> was equal to 0, it becomes 1, and <code>str</code> becomes 'not a test'. The operation involving <code>str</code> is the last, so <code>b</code> receives the value 'not a test'.</p>\n<h3>Example 3: Ternary with Alerts</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\na === <span class=\"hljs-number\">1</span> ? <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hey, it is 1!'</span>) : <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Alerts: Hey, it is 1!</span>\n</code></pre>\n<p>This works similarly to an if statement, but requires an else condition.</p>\n<h3>Example 4: Nested Ternary</h3>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">foo ? bar ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// Evaluated left to right</span>\n</code></pre>\n<p>This can also be expressed as:</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">if</span> (foo) {\n  <span class=\"hljs-keyword\">if</span> (bar) {\n    <span class=\"hljs-number\">1</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-number\">2</span>;\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<h3>Limitations of Ternary Operator</h3>\n<ol>\n<li>\n<p><strong>Control Statements:</strong> Cannot use control statements like <code>return</code> or <code>break</code> directly in a ternary.</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'kitty'</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; ++i) {\n    (animal === <span class=\"hljs-string\">'kitty'</span>) ? <span class=\"hljs-keyword\">break</span> : <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i); <span class=\"hljs-comment\">// Invalid</span>\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Return Statements:</strong> Use return like this:</p>\n<pre class=\"copy-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\"><p class=\"mx-1 flex-grow-1 text-truncate p-0\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-javascript copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'kitty'</span>;\n<span class=\"hljs-keyword\">return</span> (animal === <span class=\"hljs-string\">'kitty'</span>) ? <span class=\"hljs-string\">'meow'</span> : <span class=\"hljs-string\">'woof'</span>; <span class=\"hljs-comment\">// Valid</span>\n</code></pre>\n</li>\n</ol>\n<p>Use ternary operators for concise logic, but be cautious of readability, especially with complex expressions.</p>\n</section>","topic_id":164}],"chapter_id":79}]}