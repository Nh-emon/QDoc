{"subject_name":"javascript","chapters":[{"chapter_name":"Regex in Javascript","topics":[{"topic_name":"What is Regex ?","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\"><span style=\"color: #ef1f79;\" class=\"\">What is Regex ?</span><br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Regular Expressions</span> (Regex) are sequences of characters that define a search pattern. They're used for string <span style=\"\" class=\"bold\">matching</span>, <span style=\"\" class=\"bold\">searching</span>, and <span style=\"\" class=\"bold\">manipulation</span> tasks such as validating inputs, extracting substrings, replacing text, and more. Regex is widely supported across many programming languages, text editors, and command-line utilities.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ef1f79;\" class=\"\">Why Learn Regex ?</span><br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">Search and Replace : Quickly find and replace patterns in large text files</li><li data-el=\"list\">\nData Validation : Validate formats like email addresses, phone numbers, etc</li><li data-el=\"list\">\nText Extraction : Extract specific parts of text like dates, URLs, etc</li><li data-el=\"list\">\nAutomation : Automate text processing tasks in scripts and applications</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ef1f79;\" class=\"\">Basic Syntax and Concept :</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">At its core, a regex pattern is composed of a combination of literal characters and metacharacters that together define a search pattern.<br></p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Literal Characters</span> : <br><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">These are the plain text characters that match exactly what they represent</li><li data-el=\"list\" class=\"\">\nFor example, the regex <span style=\"color: #8080ff;\" class=\"\">`abc</span>` will match the string \"abc\" in a given text</li></ul></li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Metacharacters</span> : Metacharacters have special meanings and are used to create more complex patterns.Some include :<br><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">( . ) : Matches any single character except newline<br></li> <li data-el=\"list\" class=\"\">(\\) : Escapes a metacharacter to match it literally<br></li> <li data-el=\"list\" class=\"\">( ^ ) : Anchors the match at the start of a string<br></li> <li data-el=\"list\" class=\"\">( $ ) : Anchors the match at the end of a string<br></li></ul></li></ul></div>","topic_id":45},{"topic_name":"Literal Character and Metacharacters","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Literal character and Metacharacter<br></h3></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Literal Characters<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Literal characters are the simplest elements of a regex. They match exactly what they represent.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">\"The dog barked loudly.\"</span>;\n<span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/dog/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(text));  <span class=\"hljs-comment\">// Output: true</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Here, <code>/dog/</code> is a regex pattern that matches the exact sequence \"dog\" in the string. The <code>test()</code> method returns <code>true</code> because \"dog\" exists in <code>text</code>.</p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Metacharacters<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Metacharacters are special characters in regex that have a unique meaning. They allow you to create more complex and flexible patterns.</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Common meta characters :<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>dot</strong>(.) : Matches any single character except a newline.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/c.t/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"cat\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"cut\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"coat\"</span>)); <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The regex <code>/c.t/</code> matches any string that has \"c\", followed by any character, followed by \"t\". It matches \"cat\" and \"cut\", but not \"coat\" because \"coat\" has an extra character.</p></li> <li data-el=\"list\" class=\"\"><strong><code>\\</code> (backslash)</strong> : Escapes a metacharacter to match it literally<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/\\./</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The end.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The end\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The dot <code>.</code> is a metacharacter, but by using <code>\\.</code> we escape it to match a literal dot. The regex <code>/\\./</code> matches a period in the string</p></li> <li data-el=\"list\" class=\"\"><strong><code>^</code> (caret) </strong>: Anchors the match at the start of a string.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/^The/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"A cat sat.\"</span>));    <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The regex <code>/^The/</code> matches \"The\" only if it appears at the start of the string.</p></li> <li data-el=\"list\" class=\"\"><strong><code>$</code> (dollar sign)</strong> : Anchors the match at the end of a string.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/sat.$/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre></li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Combining Literal Characters and Metacharacters :<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">You can combine literal characters and metacharacters to build powerful regex patterns.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/^The.*\\.$/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat on the mat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat on the mat\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><code>^The</code> ensures the string starts with \"The\"</li> <li data-el=\"list\" class=\"\"><code>.*</code> allows any sequence of characters</li> <li data-el=\"list\" class=\"\"><code>\\.$</code> ensures the string ends with a period</li></ul></div>","topic_id":46},{"topic_name":"Table of Metacharacters","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Table of Metacharacters<br></h3></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><div class=\"col-12\">\n                \n                </div><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\">Metacharacter<br></th><th scope=\"col\">Description<br></th><th scope=\"col\">Example<br></th><th scope=\"col\">Explanation<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">.</th><td class=\"\">Matches any single character except a newline</td><td class=\"\">/c.t/</td><td class=\"\">Matches \"cat\", \"cut\", but not \"coat\"</td></tr><tr><th scope=\"row\" class=\"\">\\<br></th><td class=\"\">Escapes a metacharacter to match it literally</td><td class=\"\">/\\./</td><td class=\"\">Matches a literal period <code>.</code> in the string.</td></tr><tr><th scope=\"row\" class=\"\">^<br></th><td class=\"\">Anchors the match at the start of a string</td><td class=\"\">/^The/</td><td class=\"\">Matches \"The\" at the beginning of a string<br></td></tr><tr><th scope=\"row\" class=\"\">$<br></th><td class=\"\">Anchors the match at the end of a string<br></td><td class=\"\">/end.$/<br></td><td class=\"\">Matches \"end.\" at the end of a string.<br></td></tr><tr><th scope=\"row\" class=\"\">*<br></th><td class=\"\">Matches 0 or more of the preceding element.<br></td><td class=\"\">/ba*/<br></td><td class=\"\">Matches \"b\", \"ba\", \"baa\", etc. in \"baaa\".<br></td></tr><tr><th scope=\"row\" class=\"\">+<br></th><td class=\"\">Matches 1 or more of the preceding element.<br></td><td class=\"\">/ba+/<br></td><td class=\"\">Matches \"ba\", \"baa\", but not \"b\"<br></td></tr><tr><th scope=\"row\" class=\"\">?<br></th><td class=\"\">Matches 0 or 1 of the preceding element (makes it optional).<br></td><td class=\"\">/ba?b/<br></td><td class=\"\">Matches \"bb\" or \"bab\", but not \"baab\"<br></td></tr><tr><th scope=\"row\" class=\"\">{n}<br></th><td class=\"\">Matches exactly n occurrences of the preceding element.<br></td><td class=\"\">/a{3}/<br></td><td class=\"\">Matches \"aaa\" but not \"aa\"<br></td></tr><tr><th scope=\"row\" class=\"\">{n,}<br></th><td class=\"\">Matches n or more occurrences of the preceding element<br></td><td class=\"\">/a{2,}/</td><td class=\"\">Matches \"aa\", \"aaa\", \"aaaa\", etc.<br></td></tr><tr><th scope=\"row\" class=\"\">{n,m}<br></th><td class=\"\">Matches between n and m occurrences of the preceding element.<br></td><td class=\"\">/a{2,4}/</td><td class=\"\">Matches \"aa\", \"aaa\", or \"aaaa\".<br></td></tr><tr><th scope=\"row\" class=\"\">[]<br></th><td class=\"\">Character class : matches any one of the characters inside the brackets</td><td class=\"\">/[aeiou]/</td><td class=\"\">Matches any vowel in a string</td></tr><tr><th scope=\"row\" class=\"\">[^]<br></th><td class=\"\">Negated character class : matches any character not in the brackets.</td><td class=\"\">/[^aeiou]/</td><td class=\"\">Matches any consonant in a string</td></tr><tr><th scope=\"row\" class=\"\">()<br></th><td class=\"\">Grouping : groups multiple tokens together and creates a capture group.</td><td class=\"\">/(abc)+/</td><td class=\"\">Matches one or more occurrences of \"abc\"</td></tr><tr><th scope=\"row\" class=\"\">\\b<br></th><td class=\"\">Word boundary: matches the position between a word and a non-word character.</td><td class=\"\">/\\bcat\\b/</td><td class=\"\">Matches \"cat\" as a whole word, but not in \"catch\"<br></td></tr><tr><th scope=\"row\" class=\"\">\\B<br></th><td class=\"\">Non-word boundary: matches the position where \\b does not.<br></td><td class=\"\">/\\Bcat\\B/</td><td class=\"\">Matches \"cat\" in \"catch\", but not as a whole word<br></td></tr><tr><th scope=\"row\" class=\"\">\\d<br></th><td class=\"\">Matches any digit (equivalent to <code>[0-9]</code>).</td><td class=\"\">/\\d{3}/</td><td class=\"\">Matches any three-digit number<br></td></tr><tr><th scope=\"row\" class=\"\">\\D<br></th><td class=\"\">Matches any non-digit character (equivalent to <code>[^0-9]</code>).</td><td class=\"\">/\\D{3}/</td><td class=\"\">Matches any three non-digit characters<br></td></tr><tr><th scope=\"row\" class=\"\">\\w<br></th><td class=\"\">Matches any word character (alphanumeric or underscore, <code>[A-Za-z0-9_]</code>).</td><td class=\"\">/\\w+/</td><td class=\"\">Matches one or more word characters</td></tr><tr><th scope=\"row\" class=\"\">\\W<br></th><td class=\"\">Matches any non-word character (equivalent to <code>[^A-Za-z0-9_]</code>).</td><td class=\"\">/\\W+/</td><td class=\"\">Matches one or more non-word characters</td></tr><tr><th scope=\"row\" class=\"\">\\s<br></th><td class=\"\">Matches any whitespace character (spaces, tabs, line breaks)</td><td class=\"\">/\\s+/</td><td class=\"\">Matches one or more whitespace characters</td></tr><tr><th scope=\"row\" class=\"\">\\S<br></th><td class=\"\">Matches any non-whitespace character</td><td class=\"\">/\\S+/</td><td class=\"\">Matches one or more non-whitespace characters</td></tr><tr><th scope=\"row\" class=\"\">\\t<br></th><td class=\"\">Matches a tab character</td><td class=\"\">/\\t/</td><td class=\"\">Matches a tab in the string</td></tr><tr><th scope=\"row\" class=\"\">\\n<br></th><td class=\"\">Matches a newline character</td><td class=\"\">/\\n/</td><td class=\"\">Matches a newline in the string</td></tr><tr><th scope=\"row\" class=\"\">\\0<br></th><td class=\"\">Matches a null character (ASCII NUL, <code>0x00</code>)</td><td class=\"\">/\\0/</td><td class=\"\">Matches a null character in the string</td></tr><tr><th scope=\"row\" class=\"\">\\v<br></th><td class=\"\">Matches a vertical tab character</td><td class=\"\">/\\v/</td><td class=\"\">Matches a vertical tab in the string</td></tr><tr><th scope=\"row\" class=\"\">\\f<br></th><td class=\"\">Matches a form feed character</td><td class=\"\">/\\f/</td><td class=\"\">Matches a form feed in the string</td></tr><tr><th scope=\"row\" class=\"\">\\r<br></th><td class=\"\">Matches a carriage return character</td><td class=\"\">/\\r/</td><td class=\"\">Matches a carriage return in the string</td></tr><tr><th scope=\"row\" class=\"\">(?=...)</th><td class=\"\">Positive lookahead: matches a group before the main pattern without including it in the result</td><td class=\"\">/\\w+(?=\\.)/</td><td class=\"\">Matches a word followed by a period but does not include the period</td></tr><tr><th scope=\"row\" class=\"\">(?!...)</th><td class=\"\">Negative lookahead: ensures that a group does not match after the main pattern</td><td class=\"\">/\\d{3}(?!-)/</td><td class=\"\">Matches a three-digit number not followed by a hyphen</td></tr><tr><th scope=\"row\" class=\"\">(?&lt;=...)</th><td class=\"\">Positive lookbehind: matches a group before the main pattern</td><td class=\"\">/(?&lt;=\\$)\\d+/</td><td class=\"\">Matches a number that follows a dollar sign but does not include the dollar sign</td></tr><tr><th scope=\"row\" class=\"\">(?&lt;!...)</th><td class=\"\">Negative lookbehind: ensures that a group does not match before the main pattern</td><td class=\"\">/(?&lt;!\\$)\\d+/</td><td class=\"\">Matches a number not preceded by a dollar sign</td></tr><tr><th scope=\"row\" class=\"\">(?:...)</th><td class=\"\">Non-capturing group: groups multiple tokens together without creating a capture group</td><td class=\"\">/(?:abc)+/</td><td class=\"\">Matches one or more occurrences of \"abc\" but does not store it in memory</td></tr><tr><th scope=\"row\">col1</th><td>col2</td><td>col3</td><td>col4</td></tr></tbody></table>        \n                </div>\n                </div></div>","topic_id":47}],"chapter_id":53}]}