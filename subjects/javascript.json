{"subject_name":"javascript","chapters":[{"chapter_name":"Regex in Javascript","topics":[{"topic_name":"What is Regex ?","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\"><span style=\"color: #ef1f79;\" class=\"\">What is Regex ?</span><br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Regular Expressions</span> (Regex) are sequences of characters that define a search pattern. They're used for string <span style=\"\" class=\"bold\">matching</span>, <span style=\"\" class=\"bold\">searching</span>, and <span style=\"\" class=\"bold\">manipulation</span> tasks such as validating inputs, extracting substrings, replacing text, and more. Regex is widely supported across many programming languages, text editors, and command-line utilities.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ef1f79;\" class=\"\">Why Learn Regex ?</span><br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">Search and Replace : Quickly find and replace patterns in large text files</li><li data-el=\"list\">\nData Validation : Validate formats like email addresses, phone numbers, etc</li><li data-el=\"list\">\nText Extraction : Extract specific parts of text like dates, URLs, etc</li><li data-el=\"list\">\nAutomation : Automate text processing tasks in scripts and applications</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ef1f79;\" class=\"\">Basic Syntax and Concept :</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">At its core, a regex pattern is composed of a combination of literal characters and metacharacters that together define a search pattern.<br></p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Literal Characters</span> : <br><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">These are the plain text characters that match exactly what they represent</li><li data-el=\"list\" class=\"\">\nFor example, the regex <span style=\"color: #8080ff;\" class=\"\">`abc</span>` will match the string \"abc\" in a given text</li></ul></li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Metacharacters</span> : Metacharacters have special meanings and are used to create more complex patterns.Some include :<br><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">( . ) : Matches any single character except newline<br></li> <li data-el=\"list\" class=\"\">(\\) : Escapes a metacharacter to match it literally<br></li> <li data-el=\"list\" class=\"\">( ^ ) : Anchors the match at the start of a string<br></li> <li data-el=\"list\" class=\"\">( $ ) : Anchors the match at the end of a string<br></li></ul></li></ul></div>","topic_id":45},{"topic_name":"Literal Character and Metacharacters","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Literal character and Metacharacter<br></h3></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Literal Characters<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Literal characters are the simplest elements of a regex. They match exactly what they represent.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">\"The dog barked loudly.\"</span>;\n<span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/dog/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(text));  <span class=\"hljs-comment\">// Output: true</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Here, <code>/dog/</code> is a regex pattern that matches the exact sequence \"dog\" in the string. The <code>test()</code> method returns <code>true</code> because \"dog\" exists in <code>text</code>.</p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Metacharacters<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Metacharacters are special characters in regex that have a unique meaning. They allow you to create more complex and flexible patterns.</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Common meta characters :<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>dot</strong>(.) : Matches any single character except a newline.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/c.t/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"cat\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"cut\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"coat\"</span>)); <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The regex <code>/c.t/</code> matches any string that has \"c\", followed by any character, followed by \"t\". It matches \"cat\" and \"cut\", but not \"coat\" because \"coat\" has an extra character.</p></li> <li data-el=\"list\" class=\"\"><strong><code>\\</code> (backslash)</strong> : Escapes a metacharacter to match it literally<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/\\./</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The end.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The end\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The dot <code>.</code> is a metacharacter, but by using <code>\\.</code> we escape it to match a literal dot. The regex <code>/\\./</code> matches a period in the string</p></li> <li data-el=\"list\" class=\"\"><strong><code>^</code> (caret) </strong>: Anchors the match at the start of a string.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/^The/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"A cat sat.\"</span>));    <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Explanation:</strong> The regex <code>/^The/</code> matches \"The\" only if it appears at the start of the string.</p></li> <li data-el=\"list\" class=\"\"><strong><code>$</code> (dollar sign)</strong> : Anchors the match at the end of a string.<pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/sat.$/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre></li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Combining Literal Characters and Metacharacters :<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">You can combine literal characters and metacharacters to build powerful regex patterns.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">javascript</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-javascript code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">const</span> pattern = <span class=\"hljs-regexp\">/^The.*\\.$/</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat on the mat.\"</span>));  <span class=\"hljs-comment\">// Output: true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(pattern.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">\"The cat sat on the mat\"</span>));   <span class=\"hljs-comment\">// Output: false</span>\n      </code></pre><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><code>^The</code> ensures the string starts with \"The\"</li> <li data-el=\"list\" class=\"\"><code>.*</code> allows any sequence of characters</li> <li data-el=\"list\" class=\"\"><code>\\.$</code> ensures the string ends with a period</li></ul></div>","topic_id":46}],"chapter_id":53}]}