{"subject_name":"TESTSUBJECT","chapters":[{"chapter_name":"New","topics":[{"topic_name":"Check","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\"><p>A <strong>class</strong> in Python is a fundamental building block of object-oriented programming (OOP). It serves as a blueprint for creating <strong>objects</strong> (also known as instances), encapsulating data for the object and methods to manipulate that data. Classes help in organizing code, promoting reusability, and modeling real-world entities in a programmatic way.</p>\n<h2>Key Concepts of Python Classes</h2>\n<ol>\n<li><strong>Class Definition</strong></li>\n<li class=\"\"><strong>Attributes</strong></li>\n<li><strong>Methods</strong></li>\n<li><strong>Inheritance</strong></li>\n<li><strong>Encapsulation</strong></li>\n<li><strong>Polymorphism</strong></li>\n</ol>\n<p>Let's explore each of these concepts in detail, accompanied by examples to illustrate their usage.</p>\n<h3>1. Class Definition</h3>\n<p>A class is defined using the <code>class</code> keyword followed by the class name and a colon. By convention, class names use the <a href=\"https://en.wikipedia.org/wiki/Camel_case#Variants_and_derivatives\">PascalCase</a> naming style.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># A simple class with no attributes or methods</span>\n</code></pre>\n<h3>2. Attributes</h3>\n<p>Attributes are variables that hold data related to the class or its instances. There are two main types of attributes:</p>\n<ul>\n<li><strong>Instance Attributes:</strong> Unique to each instance of the class.</li>\n<li><strong>Class Attributes:</strong> Shared across all instances of the class.</li>\n</ul>\n<h4>Instance Attributes</h4>\n<p>Defined within methods (usually <code>__init__</code>) and prefixed with <code>self</code>.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name  <span class=\"hljs-comment\"># Instance attribute</span>\n        self.age = age    <span class=\"hljs-comment\"># Instance attribute</span>\n</code></pre>\n<h4>Class Attributes</h4>\n<p>Defined directly within the class body, outside any methods.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:\n    species = <span class=\"hljs-string\">\"Homo sapiens\"</span>  <span class=\"hljs-comment\"># Class attribute</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name\n        self.age = age\n</code></pre>\n<h3>3. Methods</h3>\n<p>Methods are functions defined within a class that describe the behaviors of the objects. There are different types of methods:</p>\n<ul>\n<li><strong>Instance Methods:</strong> Operate on instances and can access instance and class attributes.</li>\n<li><strong>Class Methods:</strong> Operate on the class itself and are marked with the <code>@classmethod</code> decorator.</li>\n<li><strong>Static Methods:</strong> Do not access instance or class attributes and are marked with the <code>@staticmethod</code> decorator.</li>\n</ul>\n<h4>Instance Methods</h4>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name\n        self.age = age\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Hello, my name is <span class=\"hljs-subst\">{self.name}</span> and I'm <span class=\"hljs-subst\">{self.age}</span> years old.\"</span>)\n</code></pre>\n<h4>Class Methods</h4>\n<p>Used for factory methods or methods that affect the class state.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:\n    species = <span class=\"hljs-string\">\"Homo sapiens\"</span>\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_species</span>(<span class=\"hljs-params\">cls</span>):\n        <span class=\"hljs-keyword\">return</span> cls.species\n</code></pre>\n<h4>Static Methods</h4>\n<p>Used for utility functions related to the class.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MathUtils</span>:\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>):\n        <span class=\"hljs-keyword\">return</span> a + b\n</code></pre>\n<h3>4. Inheritance</h3>\n<p>Inheritance allows a class (child or subclass) to inherit attributes and methods from another class (parent or superclass). This promotes code reuse and establishes a hierarchical relationship between classes.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        self.name = name\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># To be implemented by subclasses</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.name}</span> says Woof!\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.name}</span> says Meow!\"</span>\n</code></pre>\n<h3>5. Encapsulation</h3>\n<p>Encapsulation restricts direct access to some of an object's components, which means internal representation of an object is hidden from the outside. This is typically done using private attributes and methods (prefixed with double underscores <code>__</code>).</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, balance=<span class=\"hljs-number\">0</span></span>):\n        self.__balance = balance  <span class=\"hljs-comment\"># Private attribute</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">deposit</span>(<span class=\"hljs-params\">self, amount</span>):\n        <span class=\"hljs-keyword\">if</span> amount &gt; <span class=\"hljs-number\">0</span>:\n            self.__balance += amount\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_balance</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.__balance\n</code></pre>\n<h3>6. Polymorphism</h3>\n<p>Polymorphism allows methods to do different things based on the object it is acting upon, even if they share the same name.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Bird</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Chirp\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Parrot</span>(<span class=\"hljs-title class_ inherited__\">Bird</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Squawk\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Penguin</span>(<span class=\"hljs-title class_ inherited__\">Bird</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Honk\"</span>\n</code></pre>\n<h3>Putting It All Together: An Example</h3>\n<p>Here's a complete example that demonstrates defining a class with attributes, methods, inheritance, and encapsulation.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vehicle</span>:\n    <span class=\"hljs-comment\"># Class attribute</span>\n    vehicle_type = <span class=\"hljs-string\">\"Generic Vehicle\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, make, model</span>):\n        <span class=\"hljs-comment\"># Instance attributes</span>\n        self.make = make\n        self.model = model\n        self.__speed = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># Private attribute</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accelerate</span>(<span class=\"hljs-params\">self, amount</span>):\n        self.__speed += amount\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Accelerated by <span class=\"hljs-subst\">{amount}</span> km/h. Current speed: <span class=\"hljs-subst\">{self.__speed}</span> km/h.\"</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">brake</span>(<span class=\"hljs-params\">self, amount</span>):\n        self.__speed = <span class=\"hljs-built_in\">max</span>(self.__speed - amount, <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Decelerated by <span class=\"hljs-subst\">{amount}</span> km/h. Current speed: <span class=\"hljs-subst\">{self.__speed}</span> km/h.\"</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_speed</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.__speed\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_vehicle_type</span>(<span class=\"hljs-params\">cls</span>):\n        <span class=\"hljs-keyword\">return</span> cls.vehicle_type\n\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vehicle_info</span>():\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Vehicles are modes of transportation.\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span>(<span class=\"hljs-title class_ inherited__\">Vehicle</span>):\n    vehicle_type = <span class=\"hljs-string\">\"Car\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, make, model, doors</span>):\n        <span class=\"hljs-built_in\">super</span>().__init__(make, model)\n        self.doors = doors\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">honk</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.make}</span> <span class=\"hljs-subst\">{self.model}</span> says Honk!\"</span>)\n\n<span class=\"hljs-comment\"># Usage</span>\nmy_car = Car(<span class=\"hljs-string\">\"Toyota\"</span>, <span class=\"hljs-string\">\"Corolla\"</span>, <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-built_in\">print</span>(Car.get_vehicle_type())           <span class=\"hljs-comment\"># Output: Car</span>\nmy_car.accelerate(<span class=\"hljs-number\">50</span>)                   <span class=\"hljs-comment\"># Output: Accelerated by 50 km/h. Current speed: 50 km/h.</span>\nmy_car.honk()                           <span class=\"hljs-comment\"># Output: Toyota Corolla says Honk!</span>\n<span class=\"hljs-built_in\">print</span>(my_car.get_speed())               <span class=\"hljs-comment\"># Output: 50</span>\nmy_car.brake(<span class=\"hljs-number\">20</span>)                        <span class=\"hljs-comment\"># Output: Decelerated by 20 km/h. Current speed: 30 km/h.</span>\nVehicle.vehicle_info()                  <span class=\"hljs-comment\"># Output: Vehicles are modes of transportation.</span>\n</code></pre>\n<p><strong>Explanation of the Example:</strong></p>\n<ol>\n<li>\n<p><strong>Vehicle Class:</strong></p>\n<ul>\n<li><strong>Class Attribute:</strong> <code>vehicle_type</code></li>\n<li><strong>Instance Attributes:</strong> <code>make</code>, <code>model</code>, <code>__speed</code></li>\n<li><strong>Methods:</strong>\n<ul>\n<li><code>accelerate</code> and <code>brake</code> to modify speed</li>\n<li><code>get_speed</code> to retrieve the current speed</li>\n<li><code>get_vehicle_type</code> (class method)</li>\n<li><code>vehicle_info</code> (static method)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Car Subclass:</strong></p>\n<ul>\n<li>Inherits from <code>Vehicle</code></li>\n<li>Overrides the <code>vehicle_type</code> class attribute</li>\n<li>Adds a new instance attribute: <code>doors</code></li>\n<li>Adds a new method: <code>honk</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Usage:</strong></p>\n<ul>\n<li>Creates an instance of <code>Car</code></li>\n<li>Demonstrates calling various methods and accessing attributes</li>\n</ul>\n</li>\n</ol>\n<h3>Best Practices</h3>\n<ul>\n<li><strong>Naming Conventions:</strong> Use descriptive names for classes and follow the PascalCase convention.</li>\n<li><strong>Encapsulation:</strong> Keep attributes private unless they need to be accessed or modified directly.</li>\n<li><strong>Inheritance:</strong> Use inheritance to promote code reuse but avoid deep or complex inheritance hierarchies.</li>\n<li><strong>Composition Over Inheritance:</strong> Sometimes, it's better to compose classes with instances of other classes rather than using inheritance.</li>\n<li><strong>Documenting Classes:</strong> Use docstrings to describe the purpose of the class and its methods.</li>\n</ul>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Calculator</span>:\n    <span class=\"hljs-string\">\"\"\"\n    A simple calculator class to perform basic arithmetic operations.\n    \"\"\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, a, b</span>):\n        <span class=\"hljs-string\">\"\"\"Return the sum of two numbers.\"\"\"</span>\n        <span class=\"hljs-keyword\">return</span> a + b\n\n    <span class=\"hljs-comment\"># Additional methods...</span>\n</code></pre>\n<h3>Advanced Topics</h3>\n<p>Once you're comfortable with basic classes, you might explore more advanced topics such as:</p>\n<ul>\n<li>\n<p><strong>Magic Methods (Dunder Methods):</strong> Special methods like <code>__str__</code>, <code>__repr__</code>, <code>__len__</code>, etc., that allow classes to interact with built-in functions and operators.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vector</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, x, y</span>):\n        self.x = x\n        self.y = y\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> Vector(self.x + other.x, self.y + other.y)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"Vector(<span class=\"hljs-subst\">{self.x}</span>, <span class=\"hljs-subst\">{self.y}</span>)\"</span>\n\nv1 = Vector(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\nv2 = Vector(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-built_in\">print</span>(v1 + v2)  <span class=\"hljs-comment\"># Output: Vector(6, 8)</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Properties:</strong> Manage attribute access and validation using the <code>@property</code> decorator.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Temperature</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, celsius</span>):\n        self._celsius = celsius\n\n<span class=\"hljs-meta\">    @property</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">celsius</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self._celsius\n\n<span class=\"hljs-meta\">    @celsius.setter</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">celsius</span>(<span class=\"hljs-params\">self, value</span>):\n        <span class=\"hljs-keyword\">if</span> value &lt; -<span class=\"hljs-number\">273.15</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">\"Temperature cannot be below absolute zero.\"</span>)\n        self._celsius = value\n\n<span class=\"hljs-meta\">    @property</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fahrenheit</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> (self._celsius * <span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">5</span>) + <span class=\"hljs-number\">32</span>\n</code></pre>\n</li>\n<li>\n<p><strong>Multiple Inheritance:</strong> A class can inherit from multiple parent classes, though it should be used cautiously to avoid complexity.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Flyer</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fly</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Flying\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Swimmer</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">swim</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Swimming\"</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Duck</span>(Flyer, Swimmer):\n    <span class=\"hljs-keyword\">pass</span>\n\ndonald = Duck()\ndonald.fly()   <span class=\"hljs-comment\"># Output: Flying</span>\ndonald.swim()  <span class=\"hljs-comment\"># Output: Swimming</span>\n</code></pre>\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Python classes provide a powerful way to structure and organize your code using object-oriented principles. By defining classes with attributes and methods, you can create modular, reusable, and maintainable code that models real-world entities and behaviors effectively.</p>\n<p>Whether you're building simple scripts or complex applications, understanding how to leverage classes will significantly enhance your programming capabilities in Python.</p>\n<p>If you have specific questions or need further examples, feel free to ask!</p>\n</section>","topic_id":209}],"chapter_id":91},{"chapter_name":"Test","topics":[{"topic_name":"NewTopic","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\"><h3 class=\"\">Heading</h3><span></span><div data-media-type=\"webpage\" class=\"media-container mb-2 mx-auto box-bg rounded-1 border\"><header class=\"p-2 d-flex jc-between ai-center\"><div class=\"text-truncate fnx-9 flex-grow-1\"><i class=\"fa-solid fa-globe me-1\"></i><span class=\"copy-text\">https://getbootstrap.com/docs/5.3/components/modal/</span></div><div class=\"flex-shrink-0\"><i class=\"fa-light fa-clone mx-1 i-btn rounded-2 copy-btn\"></i><i class=\"fa-solid fa-eye mx-1 i-btn rounded-2 collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc4218\" aria-expanded=\"false\" aria-control=\"cc4218\"></i></div></header><iframe class=\"w-100 collapse\" height=\"768px\" id=\"cc4218\" src=\"https://getbootstrap.com/docs/5.3/components/modal/\" style=\"\"></iframe></div><h5 class=\"hl1\">title</h5><p class=\"\">new text</p><div class=\"light-note\">light-note</div><ul class=\"\"><li class=\"\">QDoc</li><li class=\"\">QDoc</li><li class=\"\">QDoc</li></ul><div class=\"math-box p-3 border rounded-2 box-bg my-2\"><math title=\"x_3+y^2=6^3\"><mstyle><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mn>6</mn><mn>3</mn></msup></mstyle></math></div></section>","topic_id":208},{"topic_name":"pythonclass","topic_html":"<section class=\"col-12 col-md-11 col-lg-9 content-section rounded-2 border\"><p>A <strong>class</strong> in Python is a blueprint for creating objects (a particular data structure), providing initial values for state (attributes) and implementations of behavior (methods). Classes are fundamental to the object-oriented programming (OOP) paradigm, enabling code reuse, modularity, and organization.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#basic-structure\">Basic Structure of a Python Class</a></li>\n<li><a href=\"#attributes-methods\">Attributes and Methods</a></li>\n<li><a href=\"#creating-instances\">Creating Instances (Objects)</a></li>\n<li class=\"selectedEl\"><a href=\"#inheritance\">Inheritance</a></li>\n<li><a href=\"#encapsulation\">Encapsulation and Access Modifiers</a></li>\n<li><a href=\"#special-methods\">Special Methods</a></li>\n<li><a href=\"#class-vs-instance\">Class vs. Instance Variables</a></li>\n<li><a href=\"#example\">Example: A Simple Python Class</a></li>\n</ol>\n<hr>\n<h3>Basic Structure of a Python Class <a name=\"basic-structure\"></a></h3>\n<p>A Python class is defined using the <code>class</code> keyword, followed by the class name and a colon. By convention, class names use the <a href=\"https://peps.python.org/pep-0008/#class-names\">CapWords</a> convention.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># An empty class</span>\n</code></pre>\n<h3>Attributes and Methods <a name=\"attributes-methods\"></a></h3>\n<p><strong>Attributes</strong> are variables that belong to a class or its instances. <strong>Methods</strong> are functions defined within a class that describe the behaviors of the objects.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    <span class=\"hljs-comment\"># Class attribute</span>\n    species = <span class=\"hljs-string\">\"Canis familiaris\"</span>\n\n    <span class=\"hljs-comment\"># Initializer / Instance attributes</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, age</span>):\n        self.name = name\n        self.age = age\n\n    <span class=\"hljs-comment\"># Instance method</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bark</span>(<span class=\"hljs-params\">self, sound</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.name}</span> says <span class=\"hljs-subst\">{sound}</span>\"</span>\n</code></pre>\n<ul>\n<li><code>species</code> is a class attribute shared by all instances of <code>Dog</code>.</li>\n<li><code>name</code> and <code>age</code> are instance attributes unique to each object.</li>\n<li><code>bark</code> is an instance method that can be called on each object.</li>\n</ul>\n<h3>Creating Instances (Objects) <a name=\"creating-instances\"></a></h3>\n<p>To create an object (instance) of a class, call the class as if it were a function.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">my_dog = Dog(<span class=\"hljs-string\">\"Buddy\"</span>, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-built_in\">print</span>(my_dog.bark(<span class=\"hljs-string\">\"Woof\"</span>))  <span class=\"hljs-comment\"># Output: Buddy says Woof</span>\n</code></pre>\n<p>Each instance has its own separate set of attributes.</p>\n<h3>Inheritance <a name=\"inheritance\"></a></h3>\n<p>Inheritance allows a class (child class) to inherit attributes and methods from another class (parent class), promoting code reuse.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        self.name = name\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># To be implemented by subclasses</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.name}</span> says Meow\"</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{self.name}</span> says Woof\"</span>\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">cat = Cat(<span class=\"hljs-string\">\"Whiskers\"</span>)\ndog = Dog(<span class=\"hljs-string\">\"Buddy\"</span>)\n<span class=\"hljs-built_in\">print</span>(cat.speak())  <span class=\"hljs-comment\"># Output: Whiskers says Meow</span>\n<span class=\"hljs-built_in\">print</span>(dog.speak())  <span class=\"hljs-comment\"># Output: Buddy says Woof</span>\n</code></pre>\n<h3>Encapsulation and Access Modifiers <a name=\"encapsulation\"></a></h3>\n<p>Encapsulation restricts access to certain parts of an object, which can prevent the accidental modification of data.</p>\n<ul>\n<li><strong>Public attributes/methods</strong>: Accessible from anywhere.</li>\n<li><strong>Protected attributes/methods</strong>: Indicated by a single underscore <code>_</code>, suggesting they shouldn't be accessed directly.</li>\n<li><strong>Private attributes/methods</strong>: Indicated by double underscores <code>__</code>, name-mangled to prevent direct access.</li>\n</ul>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, make, model</span>):\n        self.make = make          <span class=\"hljs-comment\"># Public</span>\n        self._model = model       <span class=\"hljs-comment\"># Protected</span>\n        self.__vin = <span class=\"hljs-string\">\"12345ABC\"</span>   <span class=\"hljs-comment\"># Private</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_vin</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.__vin\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">car = Car(<span class=\"hljs-string\">\"Toyota\"</span>, <span class=\"hljs-string\">\"Corolla\"</span>)\n<span class=\"hljs-built_in\">print</span>(car.make)       <span class=\"hljs-comment\"># Accessible</span>\n<span class=\"hljs-built_in\">print</span>(car._model)     <span class=\"hljs-comment\"># Accessible but not recommended</span>\n<span class=\"hljs-comment\"># print(car.__vin)    # Raises AttributeError</span>\n<span class=\"hljs-built_in\">print</span>(car.get_vin())  <span class=\"hljs-comment\"># Access via method</span>\n</code></pre>\n<h3>Special Methods <a name=\"special-methods\"></a></h3>\n<p>Special methods (also known as \"magic methods\") are predefined methods you can implement to add \"magic\" to your classes. They are always surrounded by double underscores (<code>__</code>).</p>\n<ul>\n<li><code>__init__</code>: Constructor method</li>\n<li><code>__str__</code>: Defines the string representation</li>\n<li><code>__repr__</code>: Defines the official string representation</li>\n<li><code>__len__</code>: Defines behavior for <code>len()</code></li>\n<li><code>__eq__</code>: Defines behavior for equality comparison</li>\n</ul>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Book</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, title, author</span>):\n        self.title = title\n        self.author = author\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"'<span class=\"hljs-subst\">{self.title}</span>' by <span class=\"hljs-subst\">{self.author}</span>\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> self.title == other.title <span class=\"hljs-keyword\">and</span> self.author == other.author\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">book1 = Book(<span class=\"hljs-string\">\"1984\"</span>, <span class=\"hljs-string\">\"George Orwell\"</span>)\nbook2 = Book(<span class=\"hljs-string\">\"1984\"</span>, <span class=\"hljs-string\">\"George Orwell\"</span>)\n<span class=\"hljs-built_in\">print</span>(book1)              <span class=\"hljs-comment\"># Output: '1984' by George Orwell</span>\n<span class=\"hljs-built_in\">print</span>(book1 == book2)     <span class=\"hljs-comment\"># Output: True</span>\n</code></pre>\n<h3>Class vs. Instance Variables <a name=\"class-vs-instance\"></a></h3>\n<ul>\n<li><strong>Class variables</strong> are shared across all instances of the class.</li>\n<li><strong>Instance variables</strong> are unique to each instance.</li>\n</ul>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Employee</span>:\n    raise_amount = <span class=\"hljs-number\">1.05</span>  <span class=\"hljs-comment\"># Class variable</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, salary</span>):\n        self.name = name      <span class=\"hljs-comment\"># Instance variable</span>\n        self.salary = salary  <span class=\"hljs-comment\"># Instance variable</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">apply_raise</span>(<span class=\"hljs-params\">self</span>):\n        self.salary *= self.raise_amount\n</code></pre>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\">emp1 = Employee(<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">50000</span>)\nemp2 = Employee(<span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-number\">60000</span>)\n\n<span class=\"hljs-built_in\">print</span>(emp1.raise_amount)  <span class=\"hljs-comment\"># Output: 1.05</span>\n<span class=\"hljs-built_in\">print</span>(emp2.raise_amount)  <span class=\"hljs-comment\"># Output: 1.05</span>\n\nEmployee.raise_amount = <span class=\"hljs-number\">1.10</span>  <span class=\"hljs-comment\"># Modify class variable</span>\n\n<span class=\"hljs-built_in\">print</span>(emp1.raise_amount)  <span class=\"hljs-comment\"># Output: 1.10</span>\n<span class=\"hljs-built_in\">print</span>(emp2.raise_amount)  <span class=\"hljs-comment\"># Output: 1.10</span>\n</code></pre>\n<h3>Example: A Simple Python Class <a name=\"example\"></a></h3>\n<p>Here's a complete example demonstrating various aspects of Python classes.</p>\n<pre class=\"copy-container\"><div class=\"code-header\"><p class=\"text-truncate\" data-el=\"code-title\">code</p><button class=\"btn btn-sm box-hover copy-btn\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button></div><code class=\"language-python code-main copy-text hljs\" data-theme=\"default\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span>:\n    <span class=\"hljs-comment\"># Class attribute</span>\n    shape = <span class=\"hljs-string\">\"Rectangle\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, width, height</span>):\n        self.width = width      <span class=\"hljs-comment\"># Instance attribute</span>\n        self.height = height    <span class=\"hljs-comment\"># Instance attribute</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.width * self.height\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">perimeter</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (self.width + self.height)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"Rectangle(width=<span class=\"hljs-subst\">{self.width}</span>, height=<span class=\"hljs-subst\">{self.height}</span>)\"</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> self.width == other.width <span class=\"hljs-keyword\">and</span> self.height == other.height\n\n<span class=\"hljs-comment\"># Creating instances</span>\nrect1 = Rectangle(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\nrect2 = Rectangle(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>)\nrect3 = Rectangle(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n\n<span class=\"hljs-comment\"># Accessing attributes and methods</span>\n<span class=\"hljs-built_in\">print</span>(rect1.shape)            <span class=\"hljs-comment\"># Output: Rectangle</span>\n<span class=\"hljs-built_in\">print</span>(rect1.area())           <span class=\"hljs-comment\"># Output: 12</span>\n<span class=\"hljs-built_in\">print</span>(rect1.perimeter())      <span class=\"hljs-comment\"># Output: 14</span>\n<span class=\"hljs-built_in\">print</span>(rect1)                  <span class=\"hljs-comment\"># Output: Rectangle(width=3, height=4)</span>\n\n<span class=\"hljs-comment\"># Comparing objects</span>\n<span class=\"hljs-built_in\">print</span>(rect1 == rect2)         <span class=\"hljs-comment\"># Output: False</span>\n<span class=\"hljs-built_in\">print</span>(rect1 == rect3)         <span class=\"hljs-comment\"># Output: True</span>\n</code></pre>\n<h2>Key Takeaways</h2>\n<ul>\n<li><strong>Classes</strong> are blueprints for creating objects with attributes and methods.</li>\n<li><strong>Instance attributes</strong> are unique to each object, while <strong>class attributes</strong> are shared across all instances.</li>\n<li><strong>Methods</strong> define behaviors; special methods enable integration with Python's built-in functions.</li>\n<li><strong>Inheritance</strong> allows classes to inherit features from other classes, promoting code reuse.</li>\n<li><strong>Encapsulation</strong> helps protect the internal state of objects, enhancing modularity and maintainability.</li>\n</ul>\n<p>Understanding classes is essential for leveraging Python's full potential in building organized, scalable, and reusable codebases.</p>\n</section>","topic_id":210}],"chapter_id":90}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"}}