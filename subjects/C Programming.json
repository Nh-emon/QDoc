{"subject_name":"C Programming","chapters":[{"chapter_name":"Introduction to C Programming","topics":[{"topic_name":"Introduction to C","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 text-center mb-2\" data-el=\"heading\">Introduction to C<br><br><br></h3><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">What is C Programming ?</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The B programming language is an early programming language developed by <span style=\"\" class=\"bold\">Ken Thompson</span> at <span style=\"\" class=\"bold\"><span style=\"\" class=\"bold\">Bell Labs</span></span> in the late 1960s. It was designed as a simplified version of the <span style=\"\" class=\"bold\">BCPL</span> (Basic Combined Programming Language) and was one of the precursors to the C programming language.C is the successor of B language<br><br>C programming is a general-purpose, procedural programming language developed by <span style=\"\" class=\"bold\">Dennis Ritchie</span> in 1972 at <span style=\"\" class=\"bold\">Bell Labs</span>. It's known for its efficiency, flexibility, and close interaction with hardware, making it a foundational language in the field of computer science. C provides a structured approach to programming and offers control over low-level operations, which is why it's often used for system programming, including operating systems, embedded systems, and high-performance applications.<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Uses of C Programming :</span><br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"> <span style=\"\" class=\"bold\">Operating Systems</span>: Many operating systems, including Unix, Linux, and parts of Windows, are written in C\n</li><li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Embedded Systems</span>: C is widely used in programming microcontrollers and embedded systems due to its efficiency and control over hardware</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">System Software</span>: Compilers, interpreters, and drivers are often written in C</li><li data-el=\"list\" class=\"\">\n <span style=\"\" class=\"bold\">Application Software</span>: Certain high-performance applications, such as graphics and gaming engines, are developed in C</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">Database Systems</span>: C is used in the development of database systems like MySQL</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">Network Programming</span>: C is used in the development of network protocols and communication systems</li><li data-el=\"list\" class=\"\">\n <span style=\"\" class=\"bold\">Game Development</span>: Some game engines are built using C for optimized performance</li><li data-el=\"list\" class=\"\">\n<span style=\"\" class=\"bold\">High-Performance Computing</span>: C is used in scenarios where performance is critical, like in scientific simulations and financial systems</li><li data-el=\"list\" class=\"\">A real-world example of C programming is the development of the <span style=\"\" class=\"bold\">Linux kernel</span>. The Linux operating system, which powers a large percentage of servers, smartphones (via Android), and other devices, is written primarily in C. The language’s ability to directly interact with hardware, manage memory efficiently, and optimize performance makes it ideal for such a foundational piece of software.<br></li></ul><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Prior Knowledge Before Learning C :</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">While prior programming experience is helpful, it’s not strictly necessary, as C can be your first programming language. However, understanding the basic concepts mentioned above can make the learning process smoother.</p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"hl hl-default\">Basic Computer</span> , <span style=\"\" class=\"hl hl-default\">Knowledge Mathematics</span> ,<span style=\"\" class=\"hl hl-default\">Variables and Data Types</span> ,<span style=\"\" class=\"hl hl-default\">Control Structures</span> etc<br></p></div>","topic_id":20},{"topic_name":"low vs high level language","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 text-center mb-2\" data-el=\"heading\">Low vs High Level Language<br></h3><div class=\"col-12\">\n                \n                </div><h5 class=\"p-2 mb-2\" data-el=\"title\">table : <br></h5><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">feature<br></th><th scope=\"col\">low-level language<br></th><th scope=\"col\">high level language<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">Abstraction<br></th><td>Low (close to Hardware)<br></td><td>High (closer to human language)<br></td></tr><tr><th scope=\"row\">Easy of use<br></th><td>Diffucult to write and understand<br></td><td class=\"\"><span class=\"bold\">Easier to write and understand</span><br></td></tr><tr><th scope=\"row\">Performance<br></th><td class=\"\"><span class=\"bold\">Highly efficient , fast execution</span><br></td><td>Less efficient , slower execution<br></td></tr><tr><th scope=\"row\">Portability<br></th><td>Machine-dependent<br></td><td class=\"\"><span class=\"bold\">Machine-independent</span><br></td></tr><tr><th scope=\"row\">Control over Hardware<br></th><td class=\"\"><span class=\"bold\">High Control</span><br></td><td>Limited Control<br></td></tr><tr><th scope=\"row\">Examples<br></th><td>Assembly,Machine Language<br></td><td>Python,Java,C++<br></td></tr></tbody></table>        \n                </div>\n                </div>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-182\" aria-expanded=\"false\" aria-control=\"cc-182\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">read more</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-182\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 p-2\" data-el=\"colps-section\"><span style=\"color: #ff0080;\" class=\"\">Low-Level Languages</span><br><br><span style=\"color: #ff0080;\" class=\"\">Definition:</span><br><br>Low-level languages are closer to machine language, offering little or no abstraction from a computer's instruction set architecture (ISA). They provide direct control over hardware and are often specific to a particular type of processor.<br><br><span style=\"color: #ff0080;\" class=\"\"><span style=\"color: #ff0080;\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Characteristic</span>s:</span></span><br><br>1. Minimal Abstraction: These languages work closely with the hardware and provide minimal abstraction from the machine code.<br><br>2. Machine-Dependent: Low-level languages are usually machine-dependent, meaning they are designed to run on a specific type of computer architecture.<br><br>3.Performance: Programs written in low-level languages can be very fast and efficient because they allow for direct manipulation of memory and CPU registers.<br><br>4.Complexity: Writing code in a low-level language is more complex and error-prone, as it requires detailed knowledge of the hardware.<br><br>5.Examples:<br>&nbsp;&nbsp; Assembly Language : Uses mnemonics and is one step above machine code, making it slightly more human-readable.<br>&nbsp;&nbsp; Machine Language&nbsp; : The lowest level, consisting of binary code (1s and 0s) that the CPU directly executes.<br><br><span style=\"color: #ff0080;\" class=\"\">Use Cases:</span><br>&nbsp;System Programming: Writing operating systems, device drivers, and firmware.<br>&nbsp;Embedded Systems&nbsp; : Programming microcontrollers and other embedded hardware.<br><br><br><br><span style=\"color: #ff0080;\" class=\"\">High-Level Languages</span><br><br>Definition: High-level languages are closer to human languages and further removed from machine code. They provide a greater level of abstraction from the hardware, making them easier to read, write, and maintain.<br><br><span style=\"color: #ff0080;\" class=\"\">Characteristics:</span><br><br>1.High Abstraction: High-level languages abstract away the details of the computer’s hardware, allowing programmers to focus more on the logic of the program.<br><br>2.Machine-Independent : Programs written in high-level languages can usually run on different types of hardware with little or no modification.<br><br>3.Ease of Use : They are designed to be easy to learn and use, with simpler syntax and more powerful features.<br><br>4.Slower Performance : Programs written in high-level languages are typically less efficient than those written in low-level languages because of the additional abstraction layers.<br><br>5.<span style=\"color: #ff0080;\" class=\"\">Examples :</span><br>&nbsp;&nbsp; Python: Known for its simplicity and readability.<br>&nbsp;&nbsp; Java: Designed to be platform-independent, running on the Java Virtual Machine (JVM).<br>&nbsp;&nbsp; C++: A more complex, feature-rich language often used in application development.<br>&nbsp;&nbsp; C#, JavaScript, Ruby, etc.<br><br><span style=\"color: #ff0080;\" class=\"\">Use Cases:</span><br>&nbsp;Application Development : Building desktop, web, and mobile applications.<br>&nbsp;Data Analysis and Machine Learning : High-level languages like Python are commonly used in these fields.<br>&nbsp;Web Development: High-level languages are used for both frontend and backend web development.<br><br></div>\n        </div>\n</div>\n<p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Conclusion :<br>Low-level languages provide fine-grained control over hardware, making them ideal for system-level programming where performance and efficiency are critical. High-level languages, on the other hand, prioritize ease of use and productivity, making them more suitable for application development and tasks where rapid development is more important than absolute performance.</p></div>","topic_id":21},{"topic_name":"Programming Language Translator","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2 text-center\" data-el=\"heading\">Programming Language Translator<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">A language translator, in the context of programming, is a tool or software that converts code written in one programming language into another language. This process allows programs written in one language to be executed in a different environment or to be used with different systems. There are several types of language translators, each serving a specific purpose<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">&nbsp;Types of Language Translators :<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Compilers</span> translate high-level code into machine code before execution</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Interpreters</span> execute high-level code line by line at runtime</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Assemblers</span> convert assembly language into machine code</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Linkers</span> combine object files into executable programs</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Loaders</span> prepare executables for running in memory</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Transpilers</span> convert code between high-level languages</li><li data-el=\"list\" class=\"\"><span style=\"color: #ff0080;\" class=\"\">Decompilers</span> reverse the compilation process to produce high-level code from machine code</li></ul>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-5684\" aria-expanded=\"false\" aria-control=\"cc-5684\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">read more</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-5684\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 border p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Compiler</span><br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">A compiler translates the entire source code of a program written in a high-level language into machine code or an intermediate code in one go</li><li data-el=\"list\">The translation is done before the program is executed</li><li data-el=\"list\">It Execute code from top to bottom</li><li data-el=\"list\">At the end it show list of error</li><li data-el=\"list\">So debugging is complex than interpreter</li><li data-el=\"list\">After running one time we can run the programme by executable file again and agian so no source code required,and it need storage for that</li><li data-el=\"list\" class=\"\">Compiler is like movie subtitle\n</li></ul><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Example</span><br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">GCC (GNU Compiler Collection): Compiles C, C++, and other languages.</li> <li data-el=\"list\" class=\"\">javac: Compiles Java source code into bytecode.<br></li> <li data-el=\"list\" class=\"\">Output: Machine code or intermediate code files (e.g., `.exe` files, `.class` files).<br></li></ul><p></p><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Interpreter</span><br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">An interpreter translates source code into machine code or bytecode line by line or statement by statement during program execution</li><li data-el=\"list\">It does not produce a separate executable file</li><li data-el=\"list\">Execute line by line,so it is slower than compiler</li><li data-el=\"list\">Stop execution on error,so debuggin is Easier</li><li data-el=\"list\">Every time we run programme it need source code and does not require memory as it has no exe file</li><li data-el=\"list\">Interpreter is like human translator who translate person1 lanuage to person2 line by line,\n</li></ul><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Example</span><br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\">GCC (GNU Compiler Collection): Compiles C, C++, and other languages.</li> <li data-el=\"list\" class=\"\">javac: Compiles Java source code into bytecode.<br></li> <li data-el=\"list\" class=\"\">Output: Machine code or intermediate code files (e.g., `.exe` files, `.class` files).<br></li></ul><p></p><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"color: #ff0080;\" class=\"\">Assembler</span><br>&nbsp;&nbsp; <span style=\"\" class=\"bold\"><span style=\"\" class=\"bold\"><span style=\"\" class=\"bold\">Definition</span></span></span>: An assembler converts assembly language, which is a low-level language closely related to machine code, into machine code.<br>&nbsp;&nbsp; Examples: <br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">MASM</span> (Microsoft Macro Assembler): Converts assembly code into machine code for Windows.<br>&nbsp;&nbsp;&nbsp;&nbsp; GAS (GNU Assembler): Part of the GNU Binutils package, used for various Unix-like systems.<br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">Output</span>: Machine code files.<br><br><br><span style=\"color: #ff0080;\" class=\"\">Linker</span><br>&nbsp;&nbsp; Definition: A linker combines object files generated by a compiler into a single executable program. It resolves references between different modules or files.<br>&nbsp;&nbsp; Examples: <br>&nbsp;&nbsp;&nbsp;&nbsp; GNU Linker (ld): Used to link object files on Unix-like systems.<br>&nbsp;&nbsp;&nbsp;&nbsp; Microsoft Linker: Used for linking object files on Windows.<br>&nbsp;&nbsp;&nbsp;&nbsp; Output: Executable files.<br><br><br><span style=\"color: #ff0080;\" class=\"\">Loader</span><br>&nbsp;&nbsp; Definition: A loader loads the executable file into memory for execution. It is part of the operating system and is responsible for preparing the program for execution.<br>&nbsp;&nbsp; Examples: <br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">Dynamic Link Libraries</span> (DLL): The loader dynamically loads libraries into memory as needed.<br>&nbsp;&nbsp;&nbsp;&nbsp; Output: The running program.<br><br><br><span style=\"color: #ff0080;\" class=\"\">Transpiler</span> (Source-to-Source Compiler)<br><br>&nbsp;&nbsp; Definition: A transpiler translates code from one high-level programming language to another high-level language. This is often done to convert code from an older language to a newer one or to optimize code.<br>&nbsp;&nbsp; Examples: <br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">Babel</span>: Transpiles modern JavaScript (ES6+) to a version compatible with older environments.<br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">TypeScript Compiler</span> (tsc): Transpiles TypeScript code into JavaScript.<br>&nbsp;&nbsp;&nbsp;&nbsp; Output: Source code in a different high-level language.<br><br><br><span style=\"color: #ff0080;\" class=\"\">Decompiler</span><br>&nbsp;&nbsp;&nbsp;&nbsp; Definition: A decompiler translates machine code or bytecode back into high-level source code. It is often used to analyze and understand compiled programs.<br>&nbsp;&nbsp;&nbsp;&nbsp; Examples: <br>&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"\" class=\"bold\">JD-GUI</span>: Decompiles Java bytecode into readable Java source code.<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"\" class=\"bold\"> Ghidra</span>: A software reverse engineering framework that includes a decompiler.<br><br></p></div>\n        </div>\n</div>\n<p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Each type of translator plays a crucial role in the software development process, enabling code to be executed, optimized, and maintained across various platforms and environments.</p></div>","topic_id":22},{"topic_name":"Feature of C Language","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2 text-center\" data-el=\"heading\">Features of C<br></h3><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">High level language\n</li><li data-el=\"list\">Small language (contains only 32 keyword)\n</li><li data-el=\"list\">Core language (many lanuage built in c programming)\n</li><li data-el=\"list\">Portable\n</li><li data-el=\"list\">Has many Built in function and operator\n</li><li data-el=\"list\">Structured language\n</li><li data-el=\"list\">Use of pointers\n</li><li data-el=\"list\">Extensible language\n</li><li data-el=\"list\">Compilation is faster\n</li><li data-el=\"list\">Dynamic memory allocation\n</li><li data-el=\"list\" class=\"\">Support modular programming\n</li><li data-el=\"list\" class=\"\">Case sensitive\n</li><li data-el=\"list\" class=\"\">Popular in embedded sysyem\n</li></ul></div>","topic_id":23},{"topic_name":"Structure of C programme","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2 text-center\" data-el=\"heading\">Structure of C Programme<br><br></h3><h5 class=\"p-2 mb-2\" data-el=\"title\">Basic C structure<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\">| documentation section |\n\n| link section |\n\n| definition section |\n \n| global declaration section |\n\n<span class=\"hljs-comment\">//main function compulsury</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>{\n  \n  declaration part\n\n  excutable part\n\n\n}\n\n| subProgamme section |\n      </code></pre><h5 class=\"p-2 mb-2\" data-el=\"title\">Real Code : <br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">/*\n  Documentation Section:\n  File: example.c\n  Description: This file demonstrates a simple C program structure\n  with documentation, linking, definitions, global declarations, main,\n  and subprogram sections.\n*/</span>\n\n<span class=\"hljs-comment\">// Link Section</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">// This is the header file that contains some important functions</span></span>\n\n<span class=\"hljs-comment\">// Definition Section</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PI 3.14  <span class=\"hljs-comment\">// Defines the value of PI as 3.14</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 170  <span class=\"hljs-comment\">// Defines the value of MAX as 170</span></span>\n\n<span class=\"hljs-comment\">// Global Declaration Section</span>\n<span class=\"hljs-type\">int</span> globalVar = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">// Example of a global variable</span>\n\n<span class=\"hljs-comment\">// Main Section</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n\n    <span class=\"hljs-comment\">// Declaration Part</span>\n    <span class=\"hljs-type\">int</span> localVar;   <span class=\"hljs-comment\">// Declare a local variable</span>\n\n    <span class=\"hljs-comment\">// Executable Part</span>\n    localVar = globalVar + MAX;  <span class=\"hljs-comment\">// Example calculation</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value of localVar: %d\\n\"</span>, localVar);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// Exit the program</span>\n}\n\n<span class=\"hljs-comment\">// SubProgram Section</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">exampleFunction</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Example of a function (subprogram)</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"This is an example subprogram.\\n\"</span>);\n}\n      </code></pre><p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Except main function all section is optional . main function is compulsory and one programme can contain only one main function<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Documentation Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">This section is typically placed at the top of the program as comments. It includes information about the file, such as its name, purpose, author, and date of creation. Documentation helps others (and yourself) understand the purpose and functionality of the code.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">/*\n  Documentation Section:\n  File: example.c\n  Description: This file demonstrates a simple C program structure\n  with documentation, linking, definitions, global declarations, main,\n  and subprogram sections.\n*/</span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Link Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The link section includes header files that provide the program access to standard library functions. Header files contain function declarations, macros, and definitions that are used throughout the program. The most common header file in C is <code>&lt;stdio.h&gt;</code>, which allows you to use functions like <code>printf()</code> and <code>scanf()</code>.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">// This is the header file that contains some important functions</span></span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Definition Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In this section, we define symbolic constants using the <code>#define</code> directive. These constants are used throughout the program, making it easier to maintain and update. For example, if you need to change the value of <code>PI</code>, you only need to update it in one place.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PI 3.14  <span class=\"hljs-comment\">// Defines the value of PI as 3.14</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 170  <span class=\"hljs-comment\">// Defines the value of MAX as 170</span></span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Global Declaration Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Global variables are declared in this section. These variables are accessible from any function within the program, making them \"global.\" They are typically used to store values that need to be shared across multiple functions. However, excessive use of global variables can lead to code that is difficult to debug and maintain</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">int</span> globalVar = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">// Example of a global variable</span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Main Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"></p><p>The main section contains the <code>main()</code> function, which is the entry point of any C program. The program's execution begins and ends here. This section is mandatory in every C program. Inside the <code>main()</code> function, you typically find:</p><ul><li class=\"\"><strong class=\"\">Declaration Part:</strong> Where you declare local variables.</li><li><strong>Executable Part:</strong> Where the actual logic of the program is implemented.</li></ul><p></p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n\n    <span class=\"hljs-comment\">// Declaration Part</span>\n    <span class=\"hljs-type\">int</span> localVar;   <span class=\"hljs-comment\">// Declare a local variable</span>\n\n    <span class=\"hljs-comment\">// Executable Part</span>\n    localVar = globalVar + MAX;  <span class=\"hljs-comment\">// Example calculation</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value of localVar: %d\\n\"</span>, localVar);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// Exit the program</span>\n}\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">SubProgram Section</h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The subprogram section contains user-defined functions that are used to perform specific tasks. These functions are declared outside the <code class=\"\">main()</code> function and can be called within <code>main()</code> or other functions. This modular approach makes the program more organized and easier to</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">exampleFunction</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Example of a function (subprogram)</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"This is an example subprogram.\\n\"</span>);\n}\n      </code></pre></div>","topic_id":24},{"topic_name":"Execution of C programme","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Execution of C Programme<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">The execution process of a C program involves several stages, from writing the source code to running the executable file. Here's a detailed explanation of each step :<br></p><div class=\"d-flex flex-column p-2 gap-1 my-2 mx-auto rounded-1 media-container\" data-el=\"media-container\"><img src=\"https://raw.githubusercontent.com/Nh-emon/QDoc/main/media/image___3658c programmer execution chart.png\"></div></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">1.</span> <span style=\"color: #ff0080;\" class=\"\">Source Code</span> <span style=\"color: #ff0080;\" class=\"\">(test.c)</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Writing the Code</span> : The process begins with writing the C source code in a text editor. The code is saved with a .c extension.<br><br><span style=\"\" class=\"bold\">Example</span>: test.c<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">2 . </span><span style=\"color: #ff0080;\" class=\"\">Preprocessing</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Preprocessor</span> : The first step in compilation involves the preprocessor . The preprocessor handles directives like #include, #define, #ifdef, and so on.<br></p><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Include Directives</span> : The #include directive is used to include the contents of header files (like stdio.h) into the source code. The preprocessor replaces these directives with the actual content of the files.<br></li> <li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Macros</span> : The preprocessor also handles macros, replacing them with their defined values.<br></li> </ul><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Output</span> : The preprocessed file is typically named something like test.i</p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">3 . Compilation</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Compiler</span> : The preprocessed code is then passed to the compiler. The compiler translates the highlevel C code into assembly language, which is a lowlevel language that is closer to machine code.<br><br><span style=\"\" class=\"bold\">Output</span> : The output of this stage is an assembly file, typically named test.s<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">4 . Assembly</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Assembler</span>: The assembly code is then passed to the assembler, which converts it into machine code (binary instructions) that the CPU can execute.<br><br><span style=\"\" class=\"bold\">Object File</span>: The output of the assembler is an object file, typically named <mjx-container class=\"MathJax CtxtMenu_Attached_0\" jax=\"CHTML\" style=\"font-size: 123.9%; position: relative;\" tabindex=\"0\" ctxtmenu_counter=\"0\"><mjx-math class=\"MJX-TEX\" aria-hidden=\"true\"><mjx-mstyle><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D461 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D452 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D460 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D461 TEX-I\"></mjx-c></mjx-mi><mjx-mo class=\"mjx-n\"><mjx-c class=\"mjx-c2E\"></mjx-c></mjx-mo><mjx-mi class=\"mjx-i\" space=\"2\"><mjx-c class=\"mjx-c1D45C TEX-I\"></mjx-c></mjx-mi></mjx-mstyle></mjx-math><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle displaystyle=\"true\"><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>.</mo><mi>o</mi></mstyle></math></mjx-assistive-mml></mjx-container> or <mjx-container class=\"MathJax CtxtMenu_Attached_0\" jax=\"CHTML\" style=\"font-size: 123.9%; position: relative;\" tabindex=\"0\" ctxtmenu_counter=\"1\"><mjx-math class=\"MJX-TEX\" aria-hidden=\"true\"><mjx-mstyle><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D461 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D452 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D460 TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D461 TEX-I\"></mjx-c></mjx-mi><mjx-mo class=\"mjx-n\"><mjx-c class=\"mjx-c2E\"></mjx-c></mjx-mo><mjx-mi class=\"mjx-i\" space=\"2\"><mjx-c class=\"mjx-c1D45C TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D44F TEX-I\"></mjx-c></mjx-mi><mjx-mi class=\"mjx-i\"><mjx-c class=\"mjx-c1D457 TEX-I\"></mjx-c></mjx-mi></mjx-mstyle></mjx-math><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle displaystyle=\"true\"><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>.</mo><mi>o</mi><mi>b</mi><mi>j</mi></mstyle></math></mjx-assistive-mml></mjx-container>. This file contains machine code but is not yet executable because it may contain references to functions or variables that are defined in other files or libraries.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">5 . Linking</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Linker</span> : The linker is responsible for linking all the object files and libraries together to create a final executable file. During this process, the linker resolves all references to external symbols (functions, variables) by linking the object files together and including the necessary libraries (like the C standard library).<br></p><h5 class=\"p-2 mb-2\" data-el=\"title\">Static vs. Dynamic Linking :</h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"><span style=\"\" class=\"bold\">Static Linking</span> : Includes all library code directly into the executable</li><li data-el=\"list\" class=\"\">\nDynamic Linking : Links to shared libraries that are loaded at runtime</li></ul><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Output </span>: The output of this stage is the final executable file, typically named test.exe (on Windows) or just program (on Unixlike systems).<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">6 . Loading</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Loader</span> : When you run the executable, the operating system’s loader is responsible for loading the program into RAM. The loader allocates memory, loads the program’s code into memory, and sets up the stack and heap for the program.<br><br><span style=\"\" class=\"bold\">Dynamic Linking</span> : If dynamic linking was used, the loader also loads the shared libraries into memory and resolves any references to them in the program.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">7 . Execution</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">CPU Execution</span> : Finally, the CPU begins executing the instructions in the program, starting from the main() function.<br><br><span style=\"\" class=\"bold\">RAM Usage</span> : During execution, the program's code, data, stack, and heap reside in different regions of RAM. The CPU fetches instructions from RAM, decodes them, and executes them sequentially (or as directed by control flow statements).<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">8 . PostExecution</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><span style=\"\" class=\"bold\">Program Termination</span> : After execution, the program may return a value to the operating system, which indicates how it terminated (e.g., successfully or with an error).<br><br><span style=\"\" class=\"bold\">Memory Cleanup</span> : The operating system then cleans up the memory that was allocated to the program.<br></p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 content-section rounded-2\" data-el=\"section\"><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">step<br></th><th scope=\"col\" class=\"\">process<br></th><th scope=\"col\">output<br></th></tr></thead><tbody><tr><th scope=\"row\">1.Source Code<br></th><td>Writing the Code<br></td><td>test.c<br></td></tr><tr><th scope=\"row\">2.Preprocessing<br></th><td>Handling directives and macros<br></td><td>test.c to test.i<br></td></tr><tr><th scope=\"row\">3.Compilation<br></th><td>Translating to Assembly language<br></td><td>test.i to test.s<br></td></tr><tr><th scope=\"row\">4.Assembly<br></th><td>Converting to Machine Code<br></td><td>test.s to test.o<br></td></tr><tr><th scope=\"row\">5.Linking<br></th><td>Linking Object files and libraries<br></td><td>test.o to test.exe<br></td></tr><tr><th scope=\"row\">6.Loading<br></th><td>Loading Programme into Ram<br></td><td>Loaded into RAM<br></td></tr><tr><th scope=\"row\">7.Execution<br></th><td>Running the Programme<br></td><td>CPU Run the Programme<br></td></tr></tbody></table>        \n                </div>\n                </div></div>","topic_id":30}],"chapter_id":35},{"chapter_name":"Setting Up the Development Enviroment","topics":[],"chapter_id":36},{"chapter_name":"Constant,Variable,DataType","topics":[{"topic_name":"Constant","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Constant<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In C, a constant is a value that cannot be altered by the program during its execution. Constants are used to define fixed values that remain the same throughout the program</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Why use Constant ?<br><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">Readability: Constants make the code easier to read and understand</li><li data-el=\"list\">Maintainability: Changing a constant value is easier and reduces the risk of errors</li><li data-el=\"list\">Protection: Prevents accidental modification of values that should remain fixed</li></ul></h5></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">const</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Used to define variables whose value cannot be changed after initialization.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> max = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> PI = <span class=\"hljs-number\">3.14159</span>;\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">#<span style=\"color: #ff0080;\" class=\"\">define</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">This is used to define constant values that are replaced by the preprocessor before compilation.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NAME value</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_SIZE 100</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PI 3.14159</span>\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><span style=\"color: #ff0080;\" class=\"\">Examples</span><br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Here some example<br></p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">10</span>;       <span class=\"hljs-comment\">// 10 is an integer literal</span>\n<span class=\"hljs-type\">float</span> b = <span class=\"hljs-number\">3.14</span>;   <span class=\"hljs-comment\">// 3.14 is a floating-point literal</span>\n<span class=\"hljs-type\">char</span> c = <span class=\"hljs-string\">'A'</span>;     <span class=\"hljs-comment\">// 'A' is a character literal</span>\n\n<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> max_attempts = <span class=\"hljs-number\">5</span>;\nmax_attempts = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">// This will cause a compile-time error</span>\n\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PI 3.14159</span>\n<span class=\"hljs-type\">float</span> circumference = <span class=\"hljs-number\">2</span> * PI * radius;\n\n<span class=\"hljs-comment\">//Enumeration</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Colors</span> {</span>RED, GREEN, BLUE};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Colors</span> <span class=\"hljs-title\">myColor</span> =</span> RED;\n      </code></pre></div>","topic_id":31},{"topic_name":"Variable in C","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Variable in C<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In C, a variable is a storage location in memory with a specific <span style=\"\" class=\"hl hl-default\">name</span> and <span style=\"\" class=\"hl hl-default\">type</span> that holds a <span style=\"\" class=\"hl hl-default\">value</span>. Variables are fundamental to programming as they allow you to store, modify, and retrieve data during the execution of a program.</p></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Variable Declaration and Assigning<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//syntax</span>\ndata_type variable_name;\n\n<span class=\"hljs-comment\">//declaration</span>\n<span class=\"hljs-type\">int</span> age;\n<span class=\"hljs-type\">float</span> height;\n<span class=\"hljs-type\">char</span> initial;\n\n<span class=\"hljs-comment\">//assining value into variable after declaration</span>\nage = <span class=\"hljs-number\">25</span>;\nheight = <span class=\"hljs-number\">5.9</span>;\ninitial = <span class=\"hljs-string\">'A'</span>;\n\n\n      </code></pre><h5 class=\"p-2 mb-2\" data-el=\"title\">Variable Initialization<br><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Initialization refers to assigning an initial value to a variable at the time of declaration.</p></h5><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-comment\">//syntax </span>\ndata_type variable_name = value;\n\n<span class=\"hljs-comment\">//declaring varaible and assinging variable at the same time</span>\n<span class=\"hljs-type\">int</span> age = <span class=\"hljs-number\">25</span>;\n<span class=\"hljs-type\">float</span> height = <span class=\"hljs-number\">5.9</span>;\n<span class=\"hljs-type\">char</span> initial = <span class=\"hljs-string\">'A'</span>;\n\n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Variable Naming Rules<br></h5><ul class=\"ul li-decimal ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\">Must begin with a letter (a-z, A-Z) or an underscore (_)</li><li data-el=\"list\" class=\"\">Subsequent characters can include letters, digits (0-9), and underscores</li><li data-el=\"list\" class=\"\">No special characters like @, $, or spaces</li><li data-el=\"list\" class=\"\">C is case-sensitive, so age ,Age and AGE are different variables</li><li data-el=\"list\" class=\"\">keyword name should not use as variable<br></li></ul><div class=\"col-12\">\n                \n                </div>\n      <div class=\"w-100 my-3\" data-el=\"clps-container\">\n        <button class=\"btn w-100 text-end underline text-info collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#cc-7619\" aria-expanded=\"false\" aria-control=\"cc-7619\" data-el=\"collapse title\">\n            <span data-el=\"colps-title\" class=\"\">variable table</span>\n        </button>\n        <div class=\"m-1 collapse-content pb-2 collapse\" id=\"cc-7619\" data-el=\"colps-content\" style=\"\">\n        <div class=\"col-12 rounded-2 p-2\" data-el=\"colps-section\"><script>\n         (function(){\n            let randomNumber = Math.round(Math.random()*10000)\n            let collapseContainer = get('.currentCollpaseContainer')\n            attr(get(collapseContainer,'button'),'data-bs-target',`#cc-${randomNumber}`)\n            attr(get(collapseContainer,'button'),'aria-control',`cc-${randomNumber}`)\n            attr(get(collapseContainer,'.collapse-content'),'id',`cc-${randomNumber}`)\n            collapseContainer.classList.remove('currentCollpaseContainer')\n         })()\n       </script><div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">variablename<br></th><th scope=\"col\" class=\"\">status<br></th><th scope=\"col\" class=\"\">comment<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">username<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\" class=\"\">_username<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">UserName<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">USERNAME<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">username12<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">user_name<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">user__name<br></th><td>valid<br></td><td>empty<br></td></tr><tr><th scope=\"row\">user,name<br></th><td>invalid<br></td><td>variable name contain special character comman(,)<br></td></tr><tr><th scope=\"row\">user name<br></th><td>invalid<br></td><td>variable name contain space<br></td></tr><tr><th scope=\"row\">12username<br></th><td>invalid<br></td><td>valiable name start with number<br></td></tr><tr><th scope=\"row\">^username<br></th><td>invalid<br></td><td>variablename contain and start with special charcter ^<br></td></tr><tr><th scope=\"row\">user'name<br></th><td>invalid<br></td><td>include charcter ' <br></td></tr><tr><th scope=\"row\">include<br></th><td>invalid<br></td><td class=\"\">include keyword used as variable name<br></td></tr><tr><th scope=\"row\">if<br></th><td class=\"\">invalid<br></td><td class=\"\">if keyword used as variable<br></td></tr></tbody></table>        \n                <p class=\"light-note p-3 rounded-1 mx-2 mb-2 text-light box-bg\">Note : variable_name or VariableName ,writing this way variablename is consider good practise<br></p></div></div>\n        </div>\n</div>\n</div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Types of Variable<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">Local Variables : Declared inside a function or block and accessible only within that function or block</li><li data-el=\"list\">\nGlobal Variables : Declared outside all functions and accessible from any function within the program</li><li data-el=\"list\">\nStatic Variables : Retain their value between function calls and are initialized only once</li><li data-el=\"list\" class=\"\">\nAutomatic Variables : These are local variables with the <span style=\"\" class=\"hl hl-default\">auto</span> keyword (default for local variables)</li><li data-el=\"list\" class=\"\">\nExternal Variables : Declared using the <span style=\"\" class=\"hl hl-default\">extern</span> keyword and used to access a global variable from another file</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Scope and Lifetime<br></h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"><strong>Scope</strong>: The part of the program where the variable can be accessed. Local variables have block scope, while global variables have program-wide scope.</li><li data-el=\"list\" class=\"\"><strong>Lifetime</strong>: The period during which the variable exists in memory. Local variables have a lifetime limited to their block, while global variables exist for the lifetime of the program.</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><strong>Storage Classes</strong> :</h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\" class=\"\"><strong>auto</strong>: Default storage class for local variables.</li><li data-el=\"list\" class=\"\"><strong>register</strong>: Suggests that the variable be stored in a CPU register for faster access.</li><li data-el=\"list\" class=\"\"><strong>static</strong>: Preserves the value of the variable between function calls.</li><li data-el=\"list\" class=\"\"><strong>extern</strong>: Declares a global variable that is defined in another file.</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\"><strong class=\"\">Example</strong> :</h5><pre class=\"copy-container code-container\" data-el=\"code-container\">      <div class=\"code-header p-2 px-3 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <i class=\"fa-light fa-clone copy-btn  flex-shrink-0 rounded-circle\" title=\"copy code\"></i>\n      </div>\n      <code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Global variable</span>\n<span class=\"hljs-type\">int</span> globalVar = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">myFunction</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Local variable</span>\n    <span class=\"hljs-type\">int</span> localVar = <span class=\"hljs-number\">5</span>;\n    \n    <span class=\"hljs-comment\">// Static variable</span>\n    <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> staticVar = <span class=\"hljs-number\">0</span>;\n    \n    localVar++;\n    staticVar++;\n    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Local Variable: %d\\n\"</span>, localVar);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Static Variable: %d\\n\"</span>, staticVar);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Local variable</span>\n    <span class=\"hljs-type\">int</span> age = <span class=\"hljs-number\">25</span>;\n    \n    <span class=\"hljs-comment\">// Accessing global variable</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Global Variable: %d\\n\"</span>, globalVar);\n    \n    myFunction(); <span class=\"hljs-comment\">// Outputs: Local Variable: 6, Static Variable: 1</span>\n    myFunction(); <span class=\"hljs-comment\">// Outputs: Local Variable: 6, Static Variable: 2</span>\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n      </code></pre></div>","topic_id":32},{"topic_name":"Identifiers an Keyword","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Identifiers &amp; keywords in C<br></h3><h5 class=\"p-2 mb-2\" data-el=\"title\">Identifier vs keyword<br></h5><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">Features<br></th><th scope=\"col\" class=\"\">Identifiers<br></th><th scope=\"col\" class=\"\">Keyowords<br></th></tr></thead><tbody><tr><th scope=\"row\" class=\"\">Definition<br></th><td>Names given by the programmer to variables,functions,arrays,etc<br></td><td>Reserved words predefined in the C Language<br></td></tr><tr><th scope=\"row\">Purpose<br></th><td>Used to uniquely identify program elements (variables,functions etc)<br></td><td>Used to define the syntax,structure and control flowof the program<br></td></tr><tr><th scope=\"row\">Creation<br></th><td>Defined by the programmer<br></td><td>Predefined by the C language<br></td></tr><tr><th scope=\"row\" class=\"\">Examples<br></th><td class=\"\">totalSum , age , username<br></td><td class=\"\"><span style=\"\" class=\"hl hl-default\">int</span> , <span style=\"\" class=\"hl hl-default\">if</span> , <span style=\"\" class=\"hl hl-default\">include</span> , <span style=\"\" class=\"hl hl-default\">return</span><br></td></tr><tr><th scope=\"row\">Case sensitivity<br></th><td class=\"\">Case-sensitive ( total,Total and TOTAL are different),the rule of naming identifiers is similer to varibales naming rule<br></td><td class=\"\">Case-sensitive (int is a keyword , but Int is not).All keyoword in c are in lowercase<br></td></tr><tr><th scope=\"row\">Length<br></th><td>Can be of any length,but only the first 31 characters may be significant in some compilers<br></td><td>Fixed and short in length<br></td></tr><tr><th scope=\"row\">Modification<br></th><td>Can be chosen and modified by the programmer<br></td><td>Fixed and cannot be altered<br></td></tr><tr></tr><tr></tr><tr></tr></tbody></table>        \n                </div>\n                </div></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto px-2 pb-5 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">List of common keyword in C<br></h5><ul class=\"ul ps-3 ms-2 ps-md-4 py-3 li-disk\" data-el=\"list-container\"> <li data-el=\"list\" class=\"\"><strong>Data Types</strong> : <code>int</code>, <code>float</code>, <code>char</code>, <code>double</code>, <code>void</code></li> <li data-el=\"list\" class=\"\"><strong>Control Flow</strong> : <code>if</code>, <code>else</code>, <code>switch</code>, <code>case</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>break</code>, <code>continue</code>, <code>return</code></li> <li data-el=\"list\" class=\"\"><strong>Storage Classes</strong> : <code>auto</code>, <code>static</code>, <code>extern</code>, <code>register</code></li> <li data-el=\"list\" class=\"\"><strong>Modifiers</strong> : <code>signed</code>, <code>unsigned</code>, <code>short</code>, <code>long</code></li> <li data-el=\"list\" class=\"\"><strong>Others</strong> : <code>const</code>, <code>volatile</code>, <code>typedef</code>, <code>struct</code>, <code>union</code>, <code>enum</code>, <code>sizeof</code>, <code>goto</code>, <code>default</code>, <code>inline</code>, <code>restrict</code></li></ul></div>","topic_id":33},{"topic_name":"Data Types in C","topic_html":"<div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h3 class=\"p-2 mb-2\" data-el=\"heading\">Data Types in C<br></h3><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">In C, data types are used to define the type and size of data that can be stored in a variable. They determine how much memory will be allocated to the variable and what kind of operations can be performed on it.</p><h5 class=\"p-2 mb-2\" data-el=\"title\">Primary Categories of Data Types in C</h5><ul class=\"ul li-disk ps-4 ps-md-5 py-3\" data-el=\"list-container\"><li data-el=\"list\">Basic Data Types\n</li><li data-el=\"list\">Derived Data Types\n</li><li data-el=\"list\" class=\"\">Enumeration Data Type\n</li><li data-el=\"list\">Void Data Type</li></ul></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Basic Data Type<br></h5><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\" class=\"\">Data Type<br></th><th scope=\"col\">keyword<br></th><th scope=\"col\">Description<br></th><th scope=\"col\">Size (in bytes)<br></th><th scope=\"col\">Range<br></th></tr></thead><tbody><tr><th scope=\"row\">Integer<br></th><td>int<br></td><td>Used to store whole numbers (without decimals).<br></td><td>Typically 4<br></td><td>-2147483648 to 2147483647<br></td></tr><tr><th scope=\"row\">Character<br></th><td>char</td><td>Used to store single characters.<br></td><td>1<br></td><td>-128 to 127 (or 0 to 255 if unsigned)<br></td></tr><tr><th scope=\"row\">Float<br></th><td>float<br></td><td>Used to store single precision floating point numbers (decimals)<br></td><td>4</td><td>-3.4e^-38 to 3.4e^+38<br></td></tr><tr><th scope=\"row\">Double<br></th><td>double<br></td><td>Used to store double precision floating-point numbers<br></td><td>8<br></td><td>-1.7e^-308 to 1.7e^+308<br></td></tr></tbody></table>        \n                </div>\n                </div><h5 class=\"p-2 mb-2\" data-el=\"title\">Modifiers<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Modifiers are used to alter the properties of the basic data types. They change the size (and possibly the range) of the variables</p><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\">Modifier<br></th><th scope=\"col\">Used With<br></th><th scope=\"col\">Description<br></th><th scope=\"col\">Example<br></th></tr></thead><tbody><tr><th scope=\"row\">SIgned<br></th><td>int , char<br></td><td>Allows both positive and negative values<br></td><td>signed int x ;<br></td></tr><tr><th scope=\"row\">Unsigned<br></th><td>int , char<br></td><td>Allows only non-negative values (increases the upper limit )<br></td><td>unsigned int x;<br></td></tr><tr><th scope=\"row\">Short<br></th><td>int<br></td><td>Reduces the size of integer<br></td><td>short int y;<br></td></tr><tr><th scope=\"row\">Long<br></th><td>int , double<br></td><td>Increases the size of the variable<br></td><td>long int x; long double d;<br></td></tr></tbody></table>        \n                </div>\n                </div><p></p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// 1. Signed int</span>\n    <span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">int</span> signedInt = <span class=\"hljs-number\">-10</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Signed int: %d\\n\"</span>, signedInt);  \n    <span class=\"hljs-comment\">// Output: Signed int: -10</span>\n    \n    <span class=\"hljs-comment\">// 2. Unsigned int</span>\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> unsignedInt = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Unsigned int: %u\\n\"</span>, unsignedInt);  \n    <span class=\"hljs-comment\">// Output: Unsigned int: 10</span>\n    \n    <span class=\"hljs-comment\">// 3. Short int</span>\n    <span class=\"hljs-type\">short</span> <span class=\"hljs-type\">int</span> shortInt = <span class=\"hljs-number\">32767</span>;  <span class=\"hljs-comment\">// Maximum value for a 16-bit signed short int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Short int: %d\\n\"</span>, shortInt);  \n    <span class=\"hljs-comment\">// Output: Short int: 32767</span>\n    \n    <span class=\"hljs-comment\">// 4. Unsigned short int</span>\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">short</span> <span class=\"hljs-type\">int</span> unsignedShortInt = <span class=\"hljs-number\">65535</span>;  <span class=\"hljs-comment\">// Maximum value for a 16-bit unsigned short int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Unsigned short int: %u\\n\"</span>, unsignedShortInt);  \n    <span class=\"hljs-comment\">// Output: Unsigned short int: 65535</span>\n    \n    <span class=\"hljs-comment\">// 5. Long int</span>\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> longInt = <span class=\"hljs-number\">9223372036854775807L</span>;  <span class=\"hljs-comment\">// Maximum value for a 64-bit signed long int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Long int: %ld\\n\"</span>, longInt);  \n    <span class=\"hljs-comment\">// Output: Long int: 9223372036854775807</span>\n    \n    <span class=\"hljs-comment\">// 6. Unsigned long int</span>\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> unsignedLongInt = <span class=\"hljs-number\">18446744073709551615UL</span>;  <span class=\"hljs-comment\">// Maximum value for a 64-bit unsigned long int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Unsigned long int: %lu\\n\"</span>, unsignedLongInt);  \n    <span class=\"hljs-comment\">// Output: Unsigned long int: 18446744073709551615</span>\n    \n    <span class=\"hljs-comment\">// 7. Long long int</span>\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> longLongInt = <span class=\"hljs-number\">9223372036854775807LL</span>;  <span class=\"hljs-comment\">// Maximum value for a 64-bit signed long long int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Long long int: %lld\\n\"</span>, longLongInt);  \n    <span class=\"hljs-comment\">// Output: Long long int: 9223372036854775807</span>\n    \n    <span class=\"hljs-comment\">// 8. Unsigned long long int</span>\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> unsignedLongLongInt = <span class=\"hljs-number\">18446744073709551615ULL</span>;  <span class=\"hljs-comment\">// Maximum value for a 64-bit unsigned long long int</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Unsigned long long int: %llu\\n\"</span>, unsignedLongLongInt);  \n    <span class=\"hljs-comment\">// Output: Unsigned long long int: 18446744073709551615</span>\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n      \n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Derived Data Type<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">Derived data types are formed from basic data types<br></p><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\">Data Type<br></th><th scope=\"col\">Description<br></th></tr></thead><tbody><tr><th scope=\"row\">Array<br></th><td>A collection of elements of the same type stored in contiguous memory location<br></td></tr><tr><th scope=\"row\">Pointer<br></th><td>A variable that stores the memory addresses of another variable<br></td></tr><tr><th scope=\"row\">Structure<br></th><td>A user defined data type that allows grouping different data types<br></td></tr><tr><th scope=\"row\">Union<br></th><td>Similar to structures but with shared memory for all members<br></td></tr><tr><th scope=\"row\">Function<br></th><td>Functions are also a type of data type in C that returns a specific type<br></td></tr></tbody></table>        \n                </div>\n                </div><h5 class=\"p-2 mb-2\" data-el=\"title\">Example<br></h5><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function declaration</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> {</span>\n    <span class=\"hljs-type\">int</span> rollNumber;\n    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-type\">float</span> marks;\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">Data</span> {</span>\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">float</span> f;\n    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">20</span>];\n};\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// 1. Array</span>\n    <span class=\"hljs-type\">int</span> numbers[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};  <span class=\"hljs-comment\">// An array of 5 integers</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Array elements:\\n\"</span>);\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Element at index %d: %d\\n\"</span>, i, numbers[i]);\n        <span class=\"hljs-comment\">// Output:</span>\n        <span class=\"hljs-comment\">// Element at index 0: 1</span>\n        <span class=\"hljs-comment\">// Element at index 1: 2</span>\n        <span class=\"hljs-comment\">// Element at index 2: 3</span>\n        <span class=\"hljs-comment\">// Element at index 3: 4</span>\n        <span class=\"hljs-comment\">// Element at index 4: 5</span>\n    }\n    \n    <span class=\"hljs-comment\">// 2. Pointer</span>\n    <span class=\"hljs-type\">int</span> number = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int</span> *ptr = &amp;number;  <span class=\"hljs-comment\">// Pointer to an integer</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nPointer example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value of number: %d\\n\"</span>, number);\n    <span class=\"hljs-comment\">// Output: Value of number: 10</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Address of number: %p\\n\"</span>, (<span class=\"hljs-type\">void</span>*)ptr);\n    <span class=\"hljs-comment\">// Output: Address of number: 0x7ffe536f0a94 (Note: The actual address will vary)</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Value pointed to by ptr: %d\\n\"</span>, *ptr);\n    <span class=\"hljs-comment\">// Output: Value pointed to by ptr: 10</span>\n    \n    <span class=\"hljs-comment\">// 3. Structure</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-title\">s1</span>;</span>  <span class=\"hljs-comment\">// Declaring a structure variable</span>\n    s1.rollNumber = <span class=\"hljs-number\">101</span>;\n    s1.marks = <span class=\"hljs-number\">95.5</span>;\n    <span class=\"hljs-built_in\">strcpy</span>(s1.name, <span class=\"hljs-string\">\"John Doe\"</span>);\n    \n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nStructure example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Roll Number: %d\\n\"</span>, s1.rollNumber);\n    <span class=\"hljs-comment\">// Output: Roll Number: 101</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name: %s\\n\"</span>, s1.name);\n    <span class=\"hljs-comment\">// Output: Name: John Doe</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Marks: %.2f\\n\"</span>, s1.marks);\n    <span class=\"hljs-comment\">// Output: Marks: 95.50</span>\n    \n    <span class=\"hljs-comment\">// 4. Union</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">Data</span> <span class=\"hljs-title\">data</span>;</span>  <span class=\"hljs-comment\">// Declaring a union variable</span>\n    data.i = <span class=\"hljs-number\">10</span>;  <span class=\"hljs-comment\">// Assigning an integer value to the union</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nUnion example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"data.i: %d\\n\"</span>, data.i);\n    <span class=\"hljs-comment\">// Output: data.i: 10</span>\n    \n    data.f = <span class=\"hljs-number\">220.5</span>;  <span class=\"hljs-comment\">// Now, assigning a float value to the same union</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"data.f: %.2f\\n\"</span>, data.f);\n    <span class=\"hljs-comment\">// Output: data.f: 220.50</span>\n    \n    <span class=\"hljs-built_in\">strcpy</span>(data.str, <span class=\"hljs-string\">\"C Programming\"</span>);  <span class=\"hljs-comment\">// Assigning a string to the union</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"data.str: %s\\n\"</span>, data.str);\n    <span class=\"hljs-comment\">// Output: data.str: C Programming</span>\n    \n    <span class=\"hljs-comment\">// 5. Function</span>\n    <span class=\"hljs-type\">int</span> sum = add(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nFunction example:\\n\"</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Sum: %d\\n\"</span>, sum);\n    <span class=\"hljs-comment\">// Output: Sum: 30</span>\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">// Function definition</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> {\n    <span class=\"hljs-keyword\">return</span> a + b;  <span class=\"hljs-comment\">// Returning the sum of two integers</span>\n}\n\n      \n      </code></pre></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Enumeration Data Type<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Enumeration</strong> : Defined using the <code>enum</code> keyword, it assigns names to integral constants, which makes the code more readable.</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Weekday</span> {</span>SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY};\n      </code></pre><p></p><div class=\"col-12\">\n                \n                </div></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Void Data Type<br></h5><p class=\"p p-2 px-3 mb-2\" data-el=\"text\"><strong>Void</strong> : Represents the absence of any type. It is used primarily in functions that do not return a value</p><pre class=\"copy-container code-container\" data-el=\"code-container\"><div class=\"code-header py-1 px-2 d-flex align-items-center flex-nowrap\">\n      <p class=\"mx-1 flex-grow-1 text-truncate\" data-el=\"code-title\">c</p>\n      <button class=\"btn btn-sm box-hover copy-btn flex-shrink-0\"><i class=\"fa-light fa-clone mx-1\"></i>copy</button>\n      </div><code data-theme=\"default\" class=\"language-c code-main copy-text scroll scroll-both scroll-on-hover scroll-min hljs\" data-highlighted=\"yes\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">functionName</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Function does not return anything</span>\n}\n      </code></pre><p></p><div class=\"col-12\">\n                \n                </div></div><div class=\"col-12 col-md-11 col-lg-9 my-2 mx-auto p-2 border content-section rounded-2\" data-el=\"section\"><h5 class=\"p-2 mb-2\" data-el=\"title\">Summary of Data Type in C<br></h5><div class=\"col-12\">\n                <div class=\"scroll py-3 scroll-both scroll-min scroll-on-hover\" data-el=\"table-container\">\n                <table class=\"table mx-auto table-striped\" data-el=\"table\"><thead class=\"table-border\"><tr><th scope=\"col\">Category<br></th><th scope=\"col\">Examples<br></th><th scope=\"col\">Description<br></th></tr></thead><tbody><tr><th scope=\"row\">Basic Data Type<br></th><td>int , char , float , dobule<br></td><td>Fundamental types to store simple values like nubers and characters<br></td></tr><tr><th scope=\"row\">Derived Data Type<br></th><td>array , pointer , structure , union<br></td><td>Complex types derived from basic types<br></td></tr><tr><th scope=\"row\">Enumeration Data Type<br></th><td>enum Weekday<br></td><td>User-defined type to define a set of named interger constant<br></td></tr><tr><th scope=\"row\">Void Data Type<br></th><td>Void FunctionName()<br></td><td>Represents no Type, used for functions that do not return a value<br></td></tr></tbody></table>        \n                </div>\n                </div></div><p class=\"p p-2 px-3 mb-2\" data-el=\"text\">This topic created with ChatGpt .See <span style=\"\" class=\"mx-1\"><a target=\"_blank\" href=\"https://chatgpt.com/share/6ad16324-b893-4c70-a849-2016c29001e9\" class=\"\">Topic Chat</a></span><br></p>","topic_id":34}],"chapter_id":38}]}