{"subject_name":"SQL","subject_id":58,"chapters":[{"chapter_name":"01.Getting Started with SQL","topics":[{"topic_name":"chapterList","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n### Chapter List\n\n---\n\n| Index | Chapter Name                                | Description                                                                 |\n|------:|:--------------------------------------------|:---------------------------------------------------------------------------|\n| 1     | Getting Started with SQL                   | Introduction to SQL basics, syntax, and setup.                              |\n| 2     | Identifier                                 | Rules and conventions for naming database objects.                         |\n| 3     | Data Types                                 | Overview of data types used in SQL.                                         |\n| 4     | Null                                       | Understanding NULL values in SQL.                                           |\n| 5     | Example Databases and Tables               | Sample databases and tables for practice.                                   |\n| 6     | SELECT                                     | Retrieving data from databases using SELECT.                                |\n| 7     | GROUP BY                                   | Grouping rows based on column values.                                       |\n| 8     | ORDER BY                                   | Sorting query results.                                                     |\n| 9     | AND OR Operators                           | Using logical AND &amp; OR in conditions.                                       |\n| 10    | CASE                                       | Conditional logic in SQL queries.                                           |\n| 11    | LIKE operator                              | Pattern matching in queries.                                               |\n| 12    | IN clause                                  | Checking if a value exists in a list.                                       |\n| 13    | Filter results using WHERE and HAVING      | Filtering data with WHERE and HAVING clauses.                               |\n| 14    | SKIP TAKE (Pagination)                     | Limiting and skipping records (Pagination).                                 |\n| 15    | EXCEPT                                     | Returning differences between queries.                                     |\n| 16    | EXPLAIN and DESCRIBE                       | Understanding query plans and table structures.                             |\n| 17    | EXIST CLAUSE                               | Checking for the existence of records.                                     |\n| 18    | JOIN                                       | Combining rows from multiple tables.                                       |\n| 19    | UPDATE                                     | Modifying existing records.                                                |\n| 20    | CREATE Database                            | Creating a new database.                                                   |\n| 21    | CREATE TABLE                               | Defining a new table structure.                                            |\n| 22    | CREATE FUNCTION                            | Creating user-defined functions.                                           |\n| 23    | TRY CATCH                                  | Error handling in SQL.                                                     |\n| 24    | UNION UNION ALL                            | Combining results from multiple queries.                                   |\n| 25    | ALTER TABLE                                | Modifying table structure.                                                 |\n| 26    | INSERT                                     | Inserting new records.                                                     |\n| 27    | MERGE                                      | Performing UPSERT (Insert/Update/Delete).                                   |\n| 28    | cross apply outer apply                    | Applying table-valued functions.                                           |\n| 29    | DELETE                                     | Removing records from a table.                                             |\n| 30    | TRUNCATE                                   | Removing all records quickly.                                              |\n| 31    | DROP Table                                 | Deleting a table.                                                          |\n| 32    | DROP or DELETE Database                    | Removing an entire database.                                               |\n| 33    | Cascading Delete                           | Automatically deleting related records.                                    |\n| 34    | GRANT and REVOKE                           | Managing user permissions.                                                 |\n| 35    | XML                                        | Handling XML data in SQL.                                                  |\n| 36    | Primary Keys                               | Ensuring unique row identification.                                        |\n| 37    | Indexes                                    | Speeding up data retrieval.                                                |\n| 38    | Row number                                 | Assigning row numbers in query results.                                    |\n| 39    | SQL Group By vs Distinct                   | Comparing GROUP BY and DISTINCT usage.                                     |\n| 40    | Finding Duplicates on a Column Subset      | Identifying duplicate records.                                             |\n| 41    | String Functions                           | Functions for string manipulation.                                         |\n| 42    | Functions (Aggregate)                      | Performing calculations on multiple rows.                                  |\n| 43    | Functions (Scalar/Single Row)              | Returning a single value per row.                                          |\n| 44    | Functions (Analytic)                       | Advanced calculations across result sets.                                  |\n| 45    | Window Functions                           | Performing calculations across a window of rows.                           |\n| 46    | Common Table Expressions                   | Defining temporary result sets.                                            |\n| 47    | Views                                      | Creating virtual tables.                                                   |\n| 48    | Materialized Views                         | Views that store query results physically.                                 |\n| 49    | Comments                                   | Adding comments in SQL code.                                               |\n| 50    | Foreign Keys                               | Defining relationships between tables.                                     |\n| 51    | Sequence                                   | Auto-generating numeric sequences.                                         |\n| 52    | Subqueries                                 | Using queries inside other queries.                                        |\n| 53    | Execution blocks                           | Grouping SQL statements together.                                          |\n| 54    | Stored Procedures                          | Reusable SQL blocks for tasks.                                             |\n| 55    | Triggers                                   | Automatic actions on table events.                                         |\n| 56    | Transactions                               | Managing database operations as a unit.                                    |\n| 57    | Table Design                               | Best practices for structuring tables.                                     |\n| 58    | Synonyms                                   | Alternate names for database objects.                                      |\n| 59    | Information Schema                         | Accessing metadata about the database.                                     |\n| 60    | Order of Execution                         | Understanding SQL query execution order.                                   |\n| 61    | Clean Code in SQL                          | Writing readable and maintainable SQL.                                     |\n| 62    | SQL Injection                              | Protecting against malicious SQL code.                                     |</md></sn>","topic_id":778,"last_visited":"2025-03-26T06:20:39.073Z"}],"chapter_id":201},{"chapter_name":"02.Identifier","topics":[{"topic_name":"Case sensitive vs Insensitive","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Case-Sensitive vs Case-Insensitive in Programming**  \n\n#### **üîπ Case-Sensitive**  \n- **Definition**: Case matters, meaning `Variable`, `variable`, and `VARIABLE` are treated as different identifiers.  \n- **Examples**:  \n  - **Programming Languages**: C, C++, Java, JavaScript, Python  \n  - **Variables**:  \n    ```c\n    int Value = 10;\n    int value = 20;\n    printf(\"%d\", Value); // 10\n    ```\n  - **Functions**:  \n    ```python\n    def MyFunction():\n        print(\"Hello\")\n\n    myfunction()  # ‚ùå Error (function names are case-sensitive)\n    ```\n  - **Usernames &amp; Passwords**:  \n    - `\"Admin\"` ‚â† `\"admin\"`  \n\n---\n\n#### **üîπ Case-Insensitive**  \n- **Definition**: Case does **not** matter, meaning `variable`, `Variable`, and `VARIABLE` are treated the same.  \n- **Examples**:  \n  - **Languages with Case-Insensitive Keywords**: SQL, HTML, Windows CMD  \n  - **SQL Queries**:  \n    ```sql\n    SELECT * FROM users;\n    select * from USERS;  -- ‚úÖ Both work\n    ```\n  - **HTML Tags**:  \n    ```html\n    &lt;TITLE&gt;My Page&lt;/TITLE&gt;\n    &lt;title&gt;My Page&lt;/title&gt;  &lt;!-- ‚úÖ Both are valid --&gt;\n    ```\n  - **Windows File System**:  \n    - `File.txt` = `file.TXT` (same file)  \n\n---\n\n#### **üîπ Comparison Table**  \n\n| Feature          | Case-Sensitive  | Case-Insensitive |\n|----------------|---------------|----------------|\n| **Languages** | Python, Java, C++ | SQL, HTML, BASIC |\n| **Variables** | `Var` ‚â† `var` | `Var` = `var` |\n| **Functions** | `MyFunc()` ‚â† `myfunc()` | `MyFunc()` = `myfunc()` |\n| **File Systems** | Linux (case-sensitive) | Windows (case-insensitive) |\n| **Usernames** | `JohnDoe` ‚â† `johndoe` | `JohnDoe` = `johndoe` |\n\n---\n\n### **üîπ Summary**\n- **Use Case-Sensitivity** when precision is needed (e.g., programming variables, function names).  \n- **Use Case-Insensitivity** for flexibility (e.g., SQL queries, user input, HTML tags).  \n</md></sn>","topic_id":794,"last_visited":"2025-03-28T05:17:26.470Z"},{"topic_name":"Unquoted identifiers","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Unquoted Identifiers**\n---  \nUnquoted identifiers follow these rules:  \n- Can use letters (**a-z**), digits (**0-9**), and underscore (**_**).  \n- Must start with a **letter**.  \n- Some SQL implementations allow additional characters, even as the first character:  \n\n  - **MS SQL**: `@`, `$`, `#`, and other Unicode letters.  \n  - **MySQL**: `$`.  \n  - **Oracle**: `$`, `#`, and other letters from the database character set.  \n  - **PostgreSQL**: `$` and other Unicode letters.  \n\n#### **Case Sensitivity of Unquoted Identifiers**  \nUnquoted identifiers are case-insensitive, but handling varies by SQL implementation:  \n\n- **MS SQL**: Case-preserving, sensitivity depends on the database character set.  \n- **MySQL**: Case-preserving, sensitivity depends on database settings and file system.  \n- **Oracle**: Converted to **uppercase**, then treated like a quoted identifier.  \n- **PostgreSQL**: Converted to **lowercase**, then treated like a quoted identifier.  \n- **SQLite**: Case-preserving; case insensitivity applies only to **ASCII** characters.  </md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **SQL Identifiers Explained with Examples**  \n\n#### **1Ô∏è‚É£ Unquoted Identifiers Rules**  \n\nUnquoted identifiers can include **letters (a-z)**, **digits (0-9)**, and **underscore (_)**, but **must start with a letter**. Some SQL implementations allow additional characters.  \n\n‚úÖ **Valid Examples:**  \n```sql\nCREATE TABLE customers (id INT, first_name VARCHAR(50), last_name VARCHAR(50));\nCREATE TABLE employee_data (emp_id INT, salary DECIMAL(10,2));\n```\n\n‚ùå **Invalid Example:**  \n```sql\nCREATE TABLE 123table (id INT, name VARCHAR(50)); -- ‚ùå Cannot start with a digit\nCREATE TABLE @users (id INT, name VARCHAR(50));   -- ‚ùå @ is not allowed in standard SQL\n```\n\n---\n\n#### **2Ô∏è‚É£ Additional Allowed Characters in Different SQL Implementations**  \n\nSome SQL databases allow special characters like `$`, `@`, and `#`.  \n\n‚úÖ **Examples in Different SQL Implementations:**  \n\n- **MS SQL:**  \n  ```sql\n  CREATE TABLE #temp_table (id INT, value VARCHAR(50)); -- Uses #\n  CREATE TABLE @user_table (id INT, name VARCHAR(50)); -- Uses @\n  ```\n- **MySQL:**  \n  ```sql\n  CREATE TABLE $accounts (id INT, balance DECIMAL(10,2)); -- Allowed\n  ```\n- **Oracle:**  \n  ```sql\n  CREATE TABLE #departments (dept_id INT, dept_name VARCHAR(50)); -- Allowed\n  ```\n- **PostgreSQL:**  \n  ```sql\n  CREATE TABLE $sales (order_id INT, amount DECIMAL(10,2)); -- Allowed\n  ```\n\n---\n\n#### **3Ô∏è‚É£ Case Sensitivity in Different SQL Implementations**  \n\nUnquoted identifiers are case-insensitive, but different SQL databases handle them differently.\n\n‚úÖ **MS SQL (Case-Preserving, Case-Sensitive Depending on Database Settings)**  \n```sql\nCREATE TABLE Employees (id INT, Name VARCHAR(50));\nSELECT name FROM Employees; -- May or may not work, depending on collation\n```\n\n‚úÖ **MySQL (Case-Preserving, Case Sensitivity Depends on File System)**  \n```sql\nCREATE TABLE Users (id INT, email VARCHAR(100));\nSELECT email FROM users; -- Works on Windows (case-insensitive)\nSELECT email FROM Users; -- Works everywhere\n```\n\n‚úÖ **Oracle (Converted to Uppercase)**  \n```sql\nCREATE TABLE employees (id INT, salary DECIMAL(10,2));\nSELECT * FROM employees;  -- Works\nSELECT * FROM EMPLOYEES;  -- Works\n```\n\n‚úÖ **PostgreSQL (Converted to Lowercase)**  \n```sql\nCREATE TABLE Employees (id INT, department VARCHAR(50));\nSELECT * FROM employees;  -- Works\nSELECT * FROM Employees;  -- Fails unless double-quoted\n```\n\n‚úÖ **SQLite (Case-Preserving, Case-Insensitive for ASCII Characters)**  \n```sql\nCREATE TABLE Customers (id INT, city VARCHAR(50));\nSELECT * FROM customers;  -- Works\nSELECT * FROM Customers;  -- Works\n```\n\n---\n\n#### **üîπ Summary Table**\n| SQL Database | Case Handling for Unquoted Identifiers |\n|-------------|----------------------------------|\n| **MS SQL** | Case-preserving, sensitivity depends on collation |\n| **MySQL** | Case-preserving, sensitivity depends on file system |\n| **Oracle** | Converts to **uppercase** |\n| **PostgreSQL** | Converts to **lowercase** |\n| **SQLite** | Case-preserving; case-insensitive for ASCII |\n\nThis explanation should clarify SQL identifier rules with practical examples. üöÄ</md></sn>","topic_id":793,"last_visited":"2025-03-28T05:05:22.266Z"}],"chapter_id":206},{"chapter_name":"03.Data Types","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **SQL Data Types**\n---  \n\nSQL data types define the **type of data** a column can store. They help ensure **data integrity** and **efficient storage**.  \n\n---\n\n### **1Ô∏è‚É£ Main Categories of SQL Data Types**  \n\nüîπ **Numeric Data Types** ‚Üí Store numbers (integers, decimals, floating-point).  \nüîπ **String Data Types** ‚Üí Store text (fixed or variable length).  \nüîπ **Date &amp; Time Data Types** ‚Üí Store date, time, and timestamps.  \nüîπ **Boolean Data Types** ‚Üí Store `TRUE` or `FALSE`.  \nüîπ **Binary Data Types** ‚Üí Store images, files, and other binary data.  \nüîπ **Other Data Types** ‚Üí XML, JSON, and special types depending on the database.  \n\n---\n\n### **2Ô∏è‚É£ SQL Data Types Table**  \n\n| **Data Type**      | **Description** |\n|--------------------|---------------|\n| **üîπ Numeric Data Types** | |\n| `INT` / `INTEGER`  | Whole numbers (e.g., 1, 100, -50) |\n| `BIGINT`  | Large whole numbers (use for big datasets) |\n| `SMALLINT` | Smaller whole numbers (saves space) |\n| `DECIMAL(p,s)` / `NUMERIC(p,s)` | Fixed precision and scale (e.g., `DECIMAL(5,2)` ‚Üí 999.99) |\n| `FLOAT` / `REAL`  | Approximate floating-point numbers |\n| **üîπ String Data Types** | |\n| `CHAR(n)` | Fixed-length text (e.g., `CHAR(10)`) |\n| `VARCHAR(n)` | Variable-length text (e.g., `VARCHAR(255)`) |\n| `TEXT` | Large text storage (size depends on SQL implementation) |\n| **üîπ Date &amp; Time Data Types** | |\n| `DATE` | Stores date (YYYY-MM-DD) |\n| `TIME` | Stores time (HH:MI:SS) |\n| `DATETIME` | Stores both date and time |\n| `TIMESTAMP` | Auto-updating date-time (useful for logging) |\n| **üîπ Boolean Data Types** | |\n| `BOOLEAN` / `BOOL` | Stores `TRUE` or `FALSE` (1 or 0 in some databases) |\n| **üîπ Binary &amp; Miscellaneous Data Types** | |\n| `BLOB` | Binary Large Object (stores images, files, etc.) |\n| `JSON` | Stores JSON formatted data (MySQL, PostgreSQL support) |\n| `XML` | Stores XML data (SQL Server, PostgreSQL support) |\n\n---\n\n### **3Ô∏è‚É£ Example Table Creation Using Different Data Types**  \n```sql\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    salary DECIMAL(10,2),\n    hire_date DATE,\n    is_active BOOLEAN\n);\n```</md></sn>","topic_id":796,"last_visited":"2025-03-28T06:16:24.725Z"},{"topic_name":"01.DECIMAL and NUMERIC","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **DECIMAL and NUMERIC**  \n---\n#### **Overview**  \n- Used for **fixed precision and scale** decimal numbers.  \n- `DECIMAL` and `NUMERIC` are **functionally equivalent** in SQL.  \n\n#### **Syntax**  \n```sql\nDECIMAL (precision [, scale])\nNUMERIC (precision [, scale])\n```\n- **precision**: Total number of digits.  \n- **scale**: Number of digits after the decimal point.  \n\n#### **Examples**  \n```sql\nSELECT CAST(123 AS DECIMAL(5,2));       -- Returns 123.00\nSELECT CAST(12345.12 AS NUMERIC(10,5)); -- Returns 12345.12000\n```</md></sn>","topic_id":795,"last_visited":"2025-03-28T05:23:00.595Z"},{"topic_name":"02.FLOAT and REAL","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **FLOAT and REAL**  \n---\n#### **Overview**  \n- Used for **approximate-number** data storage.  \n- Suitable for **floating-point numeric data** where exact precision is not required.  \n\n#### **Examples**  \n```sql\nSELECT CAST(PI() AS FLOAT); -- Returns 3.14159265358979\nSELECT CAST(PI() AS REAL);  -- Returns 3.141593\n```</md></sn>","topic_id":797,"last_visited":"2025-03-28T05:48:56.599Z"},{"topic_name":"03.Integers","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Integers**  \n---\n#### **Overview**  \n- **Exact-number** data types used for **integer values** (whole numbers).  \n- Different types provide **varying ranges** and **storage sizes**.  \n\n#### **Integer Data Types**  \n\n| **Data Type** | **Range** | **Storage** |  \n|--------------|-------------------------------------------------|------------|  \n| `BIGINT` | -2‚Å∂¬≥ to 2‚Å∂¬≥-1 (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) | 8 Bytes |  \n| `INT` | -2¬≥¬π to 2¬≥¬π-1 (-2,147,483,648 to 2,147,483,647) | 4 Bytes |  \n| `SMALLINT` | -2¬π‚Åµ to 2¬π‚Åµ-1 (-32,768 to 32,767) | 2 Bytes |  \n| `TINYINT` | 0 to 255 | 1 Byte |  </md></sn>","topic_id":798,"last_visited":"2025-03-28T05:54:17.893Z"},{"topic_name":"04.MONEY and SMALLMONEY","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **MONEY and SMALLMONEY**  \n---\n#### **Overview**  \n- Used to store **monetary or currency values** with fixed precision.  \n- `MONEY` supports **larger ranges**, while `SMALLMONEY` is for **smaller values**.  \n\n#### **Monetary Data Types**  \n\n| **Data Type**  | **Range** | **Storage** |  \n|---------------|-------------------------------------------------|------------|  \n| `MONEY`       | -922,337,203,685,477.5808 to 922,337,203,685,477.5807 | 8 Bytes |  \n| `SMALLMONEY`  | -214,748.3648 to 214,748.3647 | 4 Bytes |  </md></sn>","topic_id":799,"last_visited":"2025-03-28T05:56:49.618Z"},{"topic_name":"05.BINARY and VARBINARY","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **BINARY and VARBINARY**  \n\n#### **Overview**  \n- Used for **binary data storage** (fixed or variable length).  \n- Suitable for **storing images, files, encrypted data, etc.**  \n\n#### **Syntax**  \n```sql\nBINARY (n_bytes)      -- Fixed-length binary data  \nVARBINARY (n_bytes | MAX) -- Variable-length binary data  \n```\n- **n_bytes**: Can be **1 to 8000 bytes**.  \n- **MAX**: Stores up to **2¬≥¬π-1 bytes**.  \n\n#### **Examples**  \n```sql\nSELECT CAST(12345 AS BINARY(10));   -- Returns 0x00000000000000003039  \nSELECT CAST(12345 AS VARBINARY(10)); -- Returns 0x00003039  \n```</md></sn>","topic_id":800,"last_visited":"2025-03-28T06:00:29.656Z"},{"topic_name":"06.CHAR and VARCHAR","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CHAR and VARCHAR**  \n---\n#### **Overview**  \n- Used for **storing string (text) data**.  \n- `CHAR` is **fixed-length**, while `VARCHAR` is **variable-length**.  \n\n#### **Syntax**  \n```sql\nCHAR (n_chars)    -- Fixed-length string  \nVARCHAR (n_chars) -- Variable-length string  \n```\n- **n_chars**: Specifies the **maximum number of characters**.  \n\n#### **Examples**  \n```sql\nSELECT CAST('ABC' AS CHAR(10));     -- 'ABC       ' (padded with spaces)  \nSELECT CAST('ABC' AS VARCHAR(10));  -- 'ABC' (no padding)  \nSELECT CAST('ABCDEFGHIJKLMNOPQRSTUVWXYZ' AS CHAR(10)); -- 'ABCDEFGHIJ' (truncated to 10 characters)  \n```</md></sn>","topic_id":801,"last_visited":"2025-03-28T06:03:37.620Z"},{"topic_name":"07.NCHAR and NVARCHAR","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **NCHAR and NVARCHAR**  \n---\n#### **Overview**  \n- Used for **UNICODE string data**.  \n- `NCHAR` is **fixed-length**, while `NVARCHAR` is **variable-length**.  \n- Suitable for storing characters from multiple languages and special symbols.  \n\n#### **Syntax**  \n```sql\nNCHAR (n_chars)     -- Fixed-length UNICODE string  \nNVARCHAR (n_chars | MAX) -- Variable-length UNICODE string  \n```\n- **n_chars**: Specifies the **maximum number of characters**.  \n- Use **MAX** for strings that may exceed **8000 characters**.  </md></sn>","topic_id":802,"last_visited":"2025-03-28T06:08:13.354Z"},{"topic_name":"08.UNIQUEIDENTIFIER","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **UNIQUEIDENTIFIER**  \n---\n#### **Overview**  \n- A **16-byte GUID (Globally Unique Identifier)** or **UUID (Universally Unique Identifier)**.  \n- Used to uniquely identify records across distributed systems.  \n\n#### **Example Usage**  \n```sql\nDECLARE @GUID UNIQUEIDENTIFIER = NEWID();  \nSELECT @GUID -- Returns a GUID like 'E28B3BD9-9174-41A9-8508-899A78A33540'\n\nDECLARE @bad_GUID_string VARCHAR(100) = 'E28B3BD9-9174-41A9-8508-899A78A33540_foobarbaz';  \nSELECT  \n  @bad_GUID_string, -- 'E28B3BD9-9174-41A9-8508-899A78A33540_foobarbaz'  \n  CONVERT(UNIQUEIDENTIFIER, @bad_GUID_string) -- 'E28B3BD9-9174-41A9-8508-899A78A33540'  \n```</md></sn>","topic_id":803,"last_visited":"2025-03-28T06:14:48.881Z"}],"chapter_id":207},{"chapter_name":"04.NULL","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **NULL**\n---\n\n**NULL in SQL and Programming**\n\n- **NULL** in SQL and programming means \"nothing.\" In SQL, it represents the **absence of any value**.\n- It's important to distinguish **NULL** from other seemingly empty values:\n  - **Empty string (`''`)**: This is a string with zero characters, but it is not NULL.\n  - **Number 0**: This is a valid numeric value, not NULL.\n  \n- Be careful not to enclose **NULL** in quotes (e.g., `'NULL'`). While this is allowed in columns that accept text, it is not actually NULL and can lead to errors or incorrect data sets.</md></sn>","topic_id":804,"last_visited":"2025-03-28T06:28:17.926Z"},{"topic_name":"01.Filtering for NULL in queries","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Filtering for NULL in Queries**\n---\n- The syntax for filtering for **NULL** (the absence of a value) in **WHERE** blocks differs from filtering for specific values.\n  \n  - To filter for **NULL**:\n    ```sql\n    SELECT * FROM Employees WHERE ManagerId IS NULL;\n    ```\n\n  - To filter for **NOT NULL**:\n    ```sql\n    SELECT * FROM Employees WHERE ManagerId IS NOT NULL;\n    ```\n\n- **Important**: Since **NULL** is not equal to anything, not even to itself, using equality operators like `= NULL` or `&lt;&gt; NULL` (or `!= NULL`) will always return **UNKNOWN**. This will be rejected by the **WHERE** clause.\n\n- **WHERE** filters out rows where the condition evaluates to **FALSE** or **UNKNOWN**, and only keeps rows where the condition evaluates to **TRUE**</md></sn>","topic_id":805,"last_visited":"2025-03-28T06:34:19.842Z"},{"topic_name":"02.Nullable columns in tables","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Nullable Columns in Tables**\n---\n- When creating tables, it's possible to declare a column as **nullable** or **non-nullable**.\n\n  Example:\n  ```sql\n  CREATE TABLE MyTable\n  (\n    MyCol1 INT NOT NULL, -- non-nullable\n    MyCol2 INT NULL      -- nullable\n  );\n  ```\n\n- By default, every column (except those in a **primary key** constraint) is **nullable**, unless we explicitly set the `NOT NULL` constraint.\n\n- **Important**: Attempting to assign **NULL** to a non-nullable column will result in an error.\n  \n  Example:\n  - This works fine:\n    ```sql\n    INSERT INTO MyTable (MyCol1, MyCol2) VALUES (1, NULL);\n    ```\n\n  - This will fail:\n    ```sql\n    INSERT INTO MyTable (MyCol1, MyCol2) VALUES (NULL, 2);\n    ```\n    - Error: **Cannot insert NULL into column 'MyCol1', table 'MyTable'; column does not allow nulls. INSERT fails.**</md></sn>","topic_id":806,"last_visited":"2025-03-28T06:40:14.238Z"},{"topic_name":"03.Updating fields to NULL","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Updating Fields to NULL**\n---\n- Setting a field to **NULL** works exactly like setting it to any other value.\n\n  Example:\n  ```sql\n  UPDATE Employees\n  SET ManagerId = NULL\n  WHERE Id = 4;\n  ```</md></sn>","topic_id":807,"last_visited":"2025-03-28T06:44:04.811Z"},{"topic_name":"04.Inserting rows with NULL fields","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Inserting Rows with NULL Fields**\n---\nTo insert an employee with no phone number and no manager into the `Employees` table, use the following query:\n\n```sql\nINSERT INTO Employees\n (Id, FName, LName, PhoneNumber, ManagerId, DepartmentId, Salary, HireDate)\nVALUES\n (5, 'Jane', 'Doe', NULL, NULL, 2, 800, '2016-07-22');\n```</md></sn>","topic_id":808,"last_visited":"2025-03-28T06:51:04.605Z"}],"chapter_id":208},{"chapter_name":"05.Example Databases and Tables","topics":[{"topic_name":"01.Auto Shop Database","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Auto Shop Database**  \n\n---\n\nThis example presents a database for an auto shop business, including **departments, employees, customers, and customer cars**. Foreign keys are used to establish relationships between the tables.  \n\n#### **Relationships Between Tables**  \n- Each **Department** may have **0 or more Employees**.  \n- Each **Employee** may have **0 or 1 Manager**.  \n- Each **Customer** may have **0 or more Cars**.  \n\n---\n\n### **Departments**  \n| Id | Name  |  \n|----|-------|  \n| 1  | HR    |  \n| 2  | Sales |  \n| 3  | Tech  |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Departments (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Name VARCHAR(25) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Departments (Id, Name)\nVALUES\n    (1, 'HR'),\n    (2, 'Sales'),\n    (3, 'Tech');\n```\n\n---\n\n### **Employees**  \n| Id | FName    | LName     | PhoneNumber | ManagerId | DepartmentId | Salary | HireDate  |  \n|----|---------|----------|-------------|-----------|--------------|--------|-----------|  \n| 1  | James   | Smith    | 1234567890  | NULL      | 1            | 1000   | 01-01-2002 |  \n| 2  | John    | Johnson  | 2468101214  | 1         | 1            | 400    | 23-03-2005 |  \n| 3  | Michael | Williams | 1357911131  | 1         | 2            | 600    | 12-05-2009 |  \n| 4  | Johnathon | Smith  | 1212121212  | 2         | 1            | 500    | 24-07-2016 |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Employees (\n    Id INT NOT NULL AUTO_INCREMENT,\n    FName VARCHAR(35) NOT NULL,\n    LName VARCHAR(35) NOT NULL,\n    PhoneNumber VARCHAR(11),\n    ManagerId INT,\n    DepartmentId INT NOT NULL,\n    Salary INT NOT NULL,\n    HireDate DATETIME NOT NULL,\n    PRIMARY KEY(Id),\n    FOREIGN KEY (ManagerId) REFERENCES Employees(Id),\n    FOREIGN KEY (DepartmentId) REFERENCES Departments(Id)\n);\n\nINSERT INTO Employees (Id, FName, LName, PhoneNumber, ManagerId, DepartmentId, Salary, HireDate)\nVALUES\n    (1, 'James', 'Smith', '1234567890', NULL, 1, 1000, '2002-01-01'),\n    (2, 'John', 'Johnson', '2468101214', 1, 1, 400, '2005-03-23'),\n    (3, 'Michael', 'Williams', '1357911131', 1, 2, 600, '2009-05-12'),\n    (4, 'Johnathon', 'Smith', '1212121212', 2, 1, 500, '2016-07-24');\n```\n\n---\n\n### **Customers**  \n| Id | FName   | LName  | Email                     | PhoneNumber | PreferredContact |  \n|----|--------|-------|--------------------------|-------------|------------------|  \n| 1  | William | Jones  | william.jones@example.com | 3347927472  | PHONE            |  \n| 2  | David   | Miller | dmiller@example.net      | 2137921892  | EMAIL            |  \n| 3  | Richard | Davis  | richard0123@example.com  | NULL        | EMAIL            |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Customers (\n    Id INT NOT NULL AUTO_INCREMENT,\n    FName VARCHAR(35) NOT NULL,\n    LName VARCHAR(35) NOT NULL,\n    Email VARCHAR(100) NOT NULL,\n    PhoneNumber VARCHAR(11),\n    PreferredContact VARCHAR(5) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Customers (Id, FName, LName, Email, PhoneNumber, PreferredContact)\nVALUES\n    (1, 'William', 'Jones', 'william.jones@example.com', '3347927472', 'PHONE'),\n    (2, 'David', 'Miller', 'dmiller@example.net', '2137921892', 'EMAIL'),\n    (3, 'Richard', 'Davis', 'richard0123@example.com', NULL, 'EMAIL');\n```\n\n---\n\n### **Cars**  \n| Id | CustomerId | EmployeeId | Model         | Status  | Total Cost |  \n|----|-----------|-----------|--------------|---------|------------|  \n| 1  | 1         | 2         | Ford F-150   | READY   | 230        |  \n| 2  | 1         | 2         | Ford F-150   | READY   | 200        |  \n| 3  | 2         | 1         | Ford Mustang | WAITING | 100        |  \n| 4  | 3         | 3         | Toyota Prius | WORKING | 1254       |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Cars (\n    Id INT NOT NULL AUTO_INCREMENT,\n    CustomerId INT NOT NULL,\n    EmployeeId INT NOT NULL,\n    Model VARCHAR(50) NOT NULL,\n    Status VARCHAR(25) NOT NULL,\n    TotalCost INT NOT NULL,\n    PRIMARY KEY(Id),\n    FOREIGN KEY (CustomerId) REFERENCES Customers(Id),\n    FOREIGN KEY (EmployeeId) REFERENCES Employees(Id)\n);\n\nINSERT INTO Cars (Id, CustomerId, EmployeeId, Model, Status, TotalCost)\nVALUES\n    (1, 1, 2, 'Ford F-150', 'READY', 230),\n    (2, 1, 2, 'Ford F-150', 'READY', 200),\n    (3, 2, 1, 'Ford Mustang', 'WAITING', 100),\n    (4, 3, 3, 'Toyota Prius', 'WORKING', 1254);\n```</md></sn>","topic_id":790,"last_visited":"2025-03-26T14:06:52.556Z"},{"topic_name":"02.Library Database","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Library Database**  \n---\nThis example demonstrates a **library database** that includes **Authors, Books, and BooksAuthors** tables.  \n\n#### **Table Classification**  \n- **Authors** and **Books** are **base tables** as they contain column definitions and data for actual entities.  \n- **BooksAuthors** is a **relationship table** that defines the many-to-many relationship between the **Books** and **Authors** tables.  \n\n#### **Relationships Between Tables**  \n- Each **Author** can have **1 or more Books**.  \n- Each **Book** can have **1 or more Authors**.  \n\n---\n\n### **Authors**  \n| Id | Name                  | Country |  \n|----|-----------------------|---------|  \n| 1  | J.D. Salinger         | USA     |  \n| 2  | F. Scott Fitzgerald   | USA     |  \n| 3  | Jane Austen           | UK      |  \n| 4  | Scott Hanselman       | USA     |  \n| 5  | Jason N. Gaylord      | USA     |  \n| 6  | Pranav Rastogi        | India   |  \n| 7  | Todd Miranda          | USA     |  \n| 8  | Christian Wenz        | USA     |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Authors (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Name VARCHAR(70) NOT NULL,\n    Country VARCHAR(100) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Authors (Name, Country)\nVALUES\n    ('J.D. Salinger', 'USA'),\n    ('F. Scott Fitzgerald', 'USA'),\n    ('Jane Austen', 'UK'),\n    ('Scott Hanselman', 'USA'),\n    ('Jason N. Gaylord', 'USA'),\n    ('Pranav Rastogi', 'India'),\n    ('Todd Miranda', 'USA'),\n    ('Christian Wenz', 'USA');\n```\n\n---\n\n### **Books**  \n| Id | Title                                      |  \n|----|--------------------------------------------|  \n| 1  | The Catcher in the Rye                    |  \n| 2  | Nine Stories                              |  \n| 3  | Franny and Zooey                          |  \n| 4  | The Great Gatsby                          |  \n| 5  | Tender is the Night                       |  \n| 6  | Pride and Prejudice                       |  \n| 7  | Professional ASP.NET 4.5 in C# and VB     |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Books (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Title VARCHAR(50) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Books (Id, Title)\nVALUES\n    (1, 'The Catcher in the Rye'),\n    (2, 'Nine Stories'),\n    (3, 'Franny and Zooey'),\n    (4, 'The Great Gatsby'),\n    (5, 'Tender is the Night'),\n    (6, 'Pride and Prejudice'),\n    (7, 'Professional ASP.NET 4.5 in C# and VB');\n```\n\n---\n\n### **BooksAuthors**  \n| BookId | AuthorId |  \n|--------|---------|  \n| 1      | 1       |  \n| 2      | 1       |  \n| 3      | 1       |  \n| 4      | 2       |  \n| 5      | 2       |  \n| 6      | 3       |  \n| 7      | 4       |  \n| 7      | 5       |  \n| 7      | 6       |  \n| 7      | 7       |  \n| 7      | 8       |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE BooksAuthors (\n    AuthorId INT NOT NULL,\n    BookId INT NOT NULL,\n    FOREIGN KEY (AuthorId) REFERENCES Authors(Id),\n    FOREIGN KEY (BookId) REFERENCES Books(Id)\n);\n\nINSERT INTO BooksAuthors (BookId, AuthorId)\nVALUES\n    (1, 1),\n    (2, 1),\n    (3, 1),\n    (4, 2),\n    (5, 2),\n    (6, 3),\n    (7, 4),\n    (7, 5),\n    (7, 6),\n    (7, 7),\n    (7, 8);\n```\n\n---\n\n### **Examples**  \n#### **View all authors**  \n```sql\nSELECT * FROM Authors;\n```\n#### **View all book titles**  \n```sql\nSELECT * FROM Books;\n```\n#### **View all books and their authors**  \n```sql\nSELECT \n    ba.AuthorId,\n    a.Name AS AuthorName,\n    ba.BookId,\n    b.Title AS BookTitle\nFROM BooksAuthors ba\nINNER JOIN Authors a ON a.Id = ba.AuthorId\nINNER JOIN Books b ON b.Id = ba.BookId;\n```</md></sn>","topic_id":791,"last_visited":"2025-03-26T14:42:12.640Z"},{"topic_name":"03.Countries Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Countries Table**  \n---\nThe **Countries** table is useful in financial applications, especially those involving **currencies and exchange rates**. Many **market data** applications (e.g., Bloomberg, Reuters) require **2-character** and **3-character** country codes along with **currency codes**.  \n\n---\n\n### **Countries Table**  \n| Id | ISO | ISO3 | ISONumeric | Country Name  | Capital     | Continent Code | Currency Code |  \n|----|-----|------|-----------|---------------|-------------|----------------|---------------|  \n| 1  | AU  | AUS  | 36        | Australia     | Canberra    | OC             | AUD           |  \n| 2  | DE  | DEU  | 276       | Germany       | Berlin      | EU             | EUR           |  \n| 3  | IN  | IND  | 356       | India         | New Delhi   | AS             | INR           |  \n| 4  | LA  | LAO  | 418       | Laos          | Vientiane   | AS             | LAK           |  \n| 5  | US  | USA  | 840       | United States | Washington  | NA             | USD           |  \n| 6  | ZW  | ZWE  | 716       | Zimbabwe      | Harare      | AF             | ZWL           |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Countries (\n    Id INT NOT NULL AUTO_INCREMENT,\n    ISO VARCHAR(2) NOT NULL,\n    ISO3 VARCHAR(3) NOT NULL,\n    ISONumeric INT NOT NULL,\n    CountryName VARCHAR(64) NOT NULL,\n    Capital VARCHAR(64) NOT NULL,\n    ContinentCode VARCHAR(2) NOT NULL,\n    CurrencyCode VARCHAR(3) NOT NULL,\n    PRIMARY KEY(Id)\n);\n```\n\n#### **SQL Insert Data**  \n```sql\nINSERT INTO Countries (ISO, ISO3, ISONumeric, CountryName, Capital, ContinentCode, CurrencyCode)\nVALUES\n    ('AU', 'AUS', 36, 'Australia', 'Canberra', 'OC', 'AUD'),\n    ('DE', 'DEU', 276, 'Germany', 'Berlin', 'EU', 'EUR'),\n    ('IN', 'IND', 356, 'India', 'New Delhi', 'AS', 'INR'),\n    ('LA', 'LAO', 418, 'Laos', 'Vientiane', 'AS', 'LAK'),\n    ('US', 'USA', 840, 'United States', 'Washington', 'NA', 'USD'),\n    ('ZW', 'ZWE', 716, 'Zimbabwe', 'Harare', 'AF', 'ZWL');\n```</md></sn><sn><p>all practise cmd code is below</p><file>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/sqlassets/sql%20chapter%205%20practise%20cmd%20code.txt^^sql%20chapter%205%20practise%20cmd%20code.txt^^unknown</file></sn>","topic_id":792,"last_visited":"2025-03-26T15:09:20.673Z"}],"chapter_id":205},{"chapter_name":"06.SELECT","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>SELECT</h3><p>The SELECT statement is at the heart of most SQL queries. It defines what result set should be returned by the query, and is almost always used in conjunction with the FROM clause, which defines what part(s) of the database should be queried</p><p>go to this <a target=\"_blank\" href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_or\">page</a>and practise sql code</p></sn>","topic_id":773,"last_visited":"2025-03-28T09:34:20.969Z"},{"topic_name":"01.Select All Columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n## **Using the Wildcard Character to Select All Columns in a Query**\n\n#### Syntax\n\n```sql\nSELECT COLUMN.. FROM Table\n```\n\n### **Database Structure**\n\n**Employees table:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n**Departments table:**\n\n| Id | Name       |\n|----|------------|\n| 1  | Sales      |\n| 2  | Marketing  |\n| 3  | Finance    |\n| 4  | IT         |\n\n---\n\n### **Simple SELECT Statement**\n\n---\n\n\nThe `*` wildcard character is used to **select all available columns** in a table.\n\n- When used instead of explicit column names, it returns **all columns** from the tables specified in the `FROM` clause and any tables joined.\n  \n**Example Query:**\n```sql\nSELECT * FROM Employees;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n---\n\n### **Dot Notation**\n\nTo select all values from a specific table while joining, use **dot notation**:\n\n**Example Query:**\n```sql\nSELECT\n  Employees.*,\n  Departments.Name\nFROM\n  Employees\nJOIN\n  Departments\nON Departments.Id = Employees.DeptId;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId | Name    |\n|----|------|-------|--------|--------|\n| 1  | James | Smith | 3      | Finance |\n| 2  | John  | Johnson | 4    | IT      |\n\n---\n\n### **Warnings Against Use of `*`**\n\nIt is generally **advised to avoid using `*` in production code** due to potential issues:\n\n1. **Excess Resource Usage**:  \n   - Increases I/O, network load, memory usage by fetching unnecessary columns (e.g., large fields like notes/files).\n  \n2. **Internal Disk Spooling**:  \n   - May cause extra I/O if intermediate results are written to disk during complex query processing.\n\n3. **Unnecessary Processing**:  \n   - Includes unneeded columns such as:\n     - Computed columns.\n     - Columns from views/tables that could be optimized out.\n\n4. **Ambiguous Column Names**:  \n   - If columns are added later, duplicate column names can cause errors.  \n   - Example:\n     ```sql\n     SELECT * \n     FROM orders \n     JOIN people ON people.id = orders.personid \n     ORDER BY displayname;\n     ```\n     If `displayname` is added to both tables, ambiguity or unexpected behavior may occur.\n\n---\n\n### **When Is It Acceptable to Use `*`?**\n\n- **Manual Queries / Investigation / Prototyping**:  \n  Fine for quick checks and exploration.\n  \n- **Design Necessities**:  \n  If unavoidable, prefer `tablealias.*` over plain `*`.\n\n- **In `EXISTS` Clauses**:  \n  Example:\n  ```sql\n  SELECT A.col1, A.col2 \n  FROM A \n  WHERE EXISTS (SELECT * FROM B WHERE A.ID = B.A_ID);\n  ```\n  No data is returned from table B, so using `*` here is safe.\n\n- **In `COUNT(*)` Queries**:  \n  Safe, as it does not return columns but counts rows.\n</md></sn>","topic_id":774,"last_visited":"2025-03-28T09:51:59.640Z"},{"topic_name":"02.Select Using Column Aliases","topic_html":"<sn><pre data-v=\"sql\">-- Preferred standard syntax (best practice, portable)\nSELECT column AS c1 FROM Table;\n\n-- Standard SQL (supports spaces/reserved words in alias)\nSELECT column AS \"c1\" FROM Table;\n\n-- SQL Server specific: uses single quotes for alias (less common)\nSELECT column AS 'c1' FROM Table;\n\n-- SQL Server specific: uses square brackets for alias\nSELECT column AS [c1] FROM Table;\n\n-- SQL Server specific non-standard syntax (discouraged)\nSELECT c1 = column FROM Table;\n</pre></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## **SELECT Using Column Aliases**\n\n### **Purpose of Column Aliases**\nColumn aliases are used to:\n- **Shorten code** and improve readability.\n- **Avoid repetitive long table names**.\n- **Clarify column names**, especially when tables have multiple similar columns (e.g., two IDs).\n- **Assign names to computed columns** (required in views and complex queries).\n\nUsing aliases allows database structures to use longer, descriptive names, while keeping queries concise.\n\n---\n\n### **Syntax: All SQL Versions**\n\nColumn aliases can be created using **double quotes (\"\")**:\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS \"Middle Name\",\n  LName AS \"Last Name\"\nFROM Employees;\n```\n\n---\n\n### **SQL Server Specific Syntax**\n\nIn **Microsoft SQL Server**, aliases can be created using:\n- Single quotes (`'`)\n- Double quotes (`\"`)\n- Square brackets (`[]`)\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS 'Middle Name',\n  LName AS [Last Name]\nFROM Employees;\n```\n\n**Result:**\n\n| First Name | Middle Name | Last Name |\n|-----------|------------|---------|\n| James     | John        | Smith   |\n| John      | James       | Johnson |\n| Michael   | Marcus      | Williams |\n\n---\n\n### **Without AS Operator**\n\nYou can omit the `AS` keyword. The following query produces the same result:\n\n```sql\nSELECT\n  FName \"First Name\",\n  MName \"Middle Name\",\n  LName \"Last Name\"\nFROM Employees;\n```\n\nHowever, **using `AS` is more readable and recommended.**\n\n---\n\n### **Single-Word Aliases Without Quotes**\n\nIf the alias is:\n- A single word\n- Not a reserved word  \nYou can skip quotes/brackets:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees;\n```\n\n**Result:**\n\n| FirstName | LastName |\n|----------|--------|\n| James    | Smith  |\n| John     | Johnson|\n| Michael  | Williams|\n\n---\n\n### **Alternate Syntax (SQL Server Specific)**\n\nIn **SQL Server**, you can use the format:\n\n```\n&lt;alias&gt; = &lt;column/calculation&gt;\n```\n\n**Example:**\n\n```sql\nSELECT\n  FullName = FirstName + ' ' + LastName,\n  Addr1 = FullStreetAddress,\n  Addr2 = TownName\nFROM CustomerDetails;\n```\n\nEquivalent to:\n\n```sql\nSELECT\n  FirstName + ' ' + LastName AS FullName,\n  FullStreetAddress AS Addr1,\n  TownName AS Addr2\nFROM CustomerDetails;\n```\n\n**Result:**\n\n| FullName         | Addr1           | Addr2         |\n|------------------|----------------|--------------|\n| James Smith      | 123 AnyStreet  | TownVille    |\n| John Johnson     | 668 MyRoad     | Anytown      |\n| Michael Williams | 999 High End Dr| Williamsburgh|\n\n**Note:**  \nWhile the `=` syntax may seem easier, it's **not standard SQL** and may cause confusion or compatibility issues.\n\n---\n\n### **Escaping Reserved Words as Aliases**\n\nReserved words (like `SELECT`, `FROM`, `WHERE`) can be used as aliases by escaping them:\n\n```sql\n-- All SQL versions\nSELECT\n  FName AS \"SELECT\",\n  MName AS \"FROM\",\n  LName AS \"WHERE\"\nFROM Employees;\n```\n\n```sql\n-- SQL Server variations\nSELECT\n  FName AS \"SELECT\",\n  MName AS 'FROM',\n  LName AS [WHERE]\nFROM Employees;\n```\n\n**Result:**\n\n| SELECT | FROM  | WHERE  |\n|--------|------|-------|\n| James  | John | Smith |\n| John   | James| Johnson|\n| Michael| Marcus| Williams|\n\n---\n\n### **Using Aliases in ORDER BY**\n\nColumn aliases can also be used in the `ORDER BY` clause:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees\nORDER BY LastName DESC;\n```\n\n---\n\n### **Important Warning: Reserved Words**\n\nDo **not** use reserved keywords like `SELECT` or `FROM` as aliases without proper escaping:\n\n```sql\nSELECT\n  FName AS SELECT,  -- ‚ùå Incorrect\n  LName AS FROM     -- ‚ùå Incorrect\nFROM Employees\nORDER BY LastName DESC;\n```\n\nThis will **cause errors** during execution.</md></sn>","topic_id":775,"last_visited":"2025-03-28T10:06:10.985Z"},{"topic_name":"03.Select Individual Columns","topic_html":"<sn class=\"bar teal\"><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Select Individual Columns\n\n#### Basic Column Selection\n---\n\n```sql\nSELECT\n    PhoneNumber,\n    Email,\n    PreferredContact\nFROM Customers;\n```\n- **Description**:  \n  This statement returns the `PhoneNumber`, `Email`, and `PreferredContact` columns from all rows of the `Customers` table.\n- **Note**:  \n  Columns will appear in the same sequence as listed in the `SELECT` clause.\n\n**Result Example**:\n\n| PhoneNumber | Email                    | PreferredContact |\n|------------|-------------------------|------------------|\n| 3347927472 | william.jones@example.com | PHONE           |\n| 2137921892 | dmiller@example.net       | EMAIL           |\n| NULL       | richard0123@example.com   | EMAIL           |\n\n---\n\n### Selecting Columns from Multiple Tables\nYou can select specific columns from joined tables using the format `[table_name].[column_name]`.\n\n```sql\nSELECT\n    Customers.PhoneNumber,\n    Customers.Email,\n    Customers.PreferredContact,\n    Orders.Id AS OrderId\nFROM\n    Customers\nLEFT JOIN\n    Orders ON Orders.CustomerId = Customers.Id;\n```\n\n- **Explanation**:\n  - `Orders.Id AS OrderId`: The `Id` field of the `Orders` table will be returned with the alias **OrderId**.\n  - **Column Aliases**: Useful for renaming columns in the result.\n\n---\n\n### Using Table Aliases\nTo avoid writing long table names repeatedly (especially in joins), **table aliases** are used.\n\n**Example with Aliases**:\n```sql\nSELECT\n    c.PhoneNumber,\n    c.Email,\n    c.PreferredContact,\n    o.Id AS OrderId\nFROM\n    Customers AS c\nLEFT JOIN\n    Orders AS o ON o.CustomerId = c.Id;\n```\n- **Alias Usage**:\n  - `Customers AS c`: `c` is an alias for `Customers`.\n  - `Orders AS o`: `o` is an alias for `Orders`.\n  - Fields are now accessed like `c.Email` or `o.Id`.\n- **Note**:  \n  In **self joins**, aliases are mandatory to distinguish between the two instances of the same table.\n</md></sn>","topic_id":776,"last_visited":"2025-03-28T10:20:32.593Z"},{"topic_name":"04. Selecting specified number of records","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Selecting Specified Number of Records**  \n---\nThe **SQL 2008 standard** defines the `FETCH FIRST` clause to limit the number of records returned:  \n\n```sql\nSELECT Id, ProductName, UnitPrice, Package\nFROM Product\nORDER BY UnitPrice DESC\nFETCH FIRST 10 ROWS ONLY;\n```\nThis standard is only supported in recent versions of some RDBMSs. **Progress OpenEdge 11.x** also supports `FETCH FIRST &lt;n&gt; ROWS ONLY`.  \n\nAdditionally, `OFFSET &lt;m&gt; ROWS` before `FETCH FIRST &lt;n&gt; ROWS ONLY` allows skipping rows before fetching records:  \n\n```sql\nSELECT Id, ProductName, UnitPrice, Package\nFROM Product\nORDER BY UnitPrice DESC\nOFFSET 5 ROWS\nFETCH FIRST 10 ROWS ONLY;\n```\n\n### **Vendor-Specific Implementations**  \n\n#### **SQL Server &amp; MS Access**  \n```sql\nSELECT TOP 10 Id, ProductName, UnitPrice, Package\nFROM Product\nORDER BY UnitPrice DESC;\n```\n\n#### **MySQL &amp; PostgreSQL**  \n```sql\nSELECT Id, ProductName, UnitPrice, Package\nFROM Product\nORDER BY UnitPrice DESC\nLIMIT 10;\n```\n\n#### **Oracle (Using ROWNUM)**  \n```sql\nSELECT Id, ProductName, UnitPrice, Package\nFROM Product\nWHERE ROWNUM &lt;= 10\nORDER BY UnitPrice DESC;\n```\n\n### **Example Results (10 Records)**  \n\n| Id  | Product Name              | Unit Price | Package               |\n|-----|---------------------------|------------|------------------------|\n| 38  | C√¥te de Blaye             | 263.50     | 12 - 75 cl bottles    |\n| 29  | Th√ºringer Rostbratwurst   | 123.79     | 50 bags x 30 sausgs.  |\n| 9   | Mishi Kobe Niku           | 97.00      | 18 - 500 g pkgs.      |\n| 20  | Sir Rodney's Marmalade    | 81.00      | 30 gift boxes         |\n| 18  | Carnarvon Tigers          | 62.50      | 16 kg pkg.            |\n| 59  | Raclette Courdavault      | 55.00      | 5 kg pkg.             |\n| 51  | Manjimup Dried Apples     | 53.00      | 50 - 300 g pkgs.      |\n| 62  | Tarte au sucre            | 49.30      | 48 pies               |\n| 43  | Ipoh Coffee               | 46.00      | 16 - 500 g tins       |\n| 28  | R√∂ssle Sauerkraut         | 45.60      | 25 - 825 g cans       |\n\n### **Vendor Nuances**  \n\n- **SQL Server (`TOP`)** operates **after** the `WHERE` clause and returns the specified number of results **if they exist anywhere in the table**.  \n- **Oracle (`ROWNUM`)** works **within** the `WHERE` clause, meaning if the specified number of rows does not match the conditions at the beginning, it may return **zero results**, even if more matching records exist later in the table.</md></sn>","topic_id":809,"last_visited":"2025-03-28T10:31:23.711Z"},{"topic_name":"05.Selecting with Condition","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Selecting with Condition**  \n---\nThe basic syntax of `SELECT` with a `WHERE` clause is:  \n\n```sql\nSELECT column1, column2, columnN  \nFROM table_name  \nWHERE [condition];\n```\n\nThe `[condition]` can be any SQL expression using comparison or logical operators such as:  \n`&gt;`, `&lt;`, `=`, `&lt;&gt;`, `&gt;=`, `&lt;=`, `LIKE`, `NOT`, `IN`, `BETWEEN`, etc.  \n\n### **Example**  \n\nThe following query returns all columns from the table **Cars** where the `status` column is `'READY'`:  \n\n```sql\nSELECT * FROM Cars  \nWHERE status = 'READY';\n```\n\nSee **WHERE** and **HAVING** for more examples.</md></sn>","topic_id":810,"last_visited":"2025-03-28T10:36:38.150Z"},{"topic_name":"06.Selecting with CASE","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Selecting with CASE**  \n---\nThe `CASE` statement allows applying logic **on the fly** within a query.  \n\n### **Basic CASE Statement**  \n```sql\nSELECT CASE  \n         WHEN Col1 &lt; 50 THEN 'under'  \n         ELSE 'over'  \n       END AS threshold  \nFROM TableName;\n```\n\n### **Chained CASE Conditions**  \n```sql\nSELECT CASE  \n         WHEN Col1 &lt; 50 THEN 'under'  \n         WHEN Col1 &gt; 50 AND Col1 &lt; 100 THEN 'between'  \n         ELSE 'over'  \n       END AS threshold  \nFROM TableName;\n```\n\n### **Nested CASE Statement**  \n```sql\nSELECT CASE  \n         WHEN Col1 &lt; 50 THEN 'under'  \n         ELSE CASE  \n                WHEN Col1 &gt; 50 AND Col1 &lt; 100 THEN Col1  \n                ELSE 'over'  \n              END  \n       END AS threshold  \nFROM TableName;\n```</md></sn>","topic_id":811,"last_visited":"2025-03-28T10:43:44.043Z"},{"topic_name":"07.Select columns which are named after reserved keywords","topic_html":"","topic_id":812,"last_visited":"2025-03-28T10:44:02.674Z"},{"topic_name":"08.Selecting with table alias","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Selecting with Table Alias\n\n#### Basic Alias Usage\n\n---\n\n```sql\nSELECT e.Fname, e.LName\nFROM Employees e;\n```\n- **Explanation**:  \n  The `Employees` table is given the alias **e** directly after the table name. This helps avoid ambiguity, especially when multiple tables share the same field name. It specifies which table‚Äôs data is being referenced.\n\n---\n\n### Using Table Alias in Joins\n\n```sql\nSELECT e.Fname, e.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Explanation**:\n  - `e.Fname`, `e.LName`: Fields from the `Employees` table.\n  - `m.Fname AS ManagerFirstName`: Renames the `Fname` field from the `Managers` table to `ManagerFirstName` for clarity.\n  - **Join**: The tables `Employees` and `Managers` are joined on `ManagerId` and `Id`.\n\n---\n\n### Restrictions on Table Alias Usage\n\n```sql\nSELECT e.Fname, Employees.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Error Explanation**:  \n  Once you define an alias (e.g., `e` for `Employees`), you cannot use the canonical table name (`Employees`) anymore. The query above would throw an error.\n\n---\n\n### Table Aliases in the 1992 SQL Standard\n\nTable aliases, more formally known as **range variables**, were introduced to resolve the issue of duplicate column names caused by `INNER JOIN` operations. \n\n- **NATURAL JOIN** (introduced in SQL 1992):  \n  This join type automatically resolves column name conflicts. It is supported by databases like MySQL, PostgreSQL, and Oracle but is not available in SQL Server.\n  \n  Example using `NATURAL JOIN`:\n\n```sql\nSELECT Fname, LName, ManagerFirstName\nFROM Employees\nNATURAL JOIN\n    (SELECT Id AS ManagerId, Fname AS ManagerFirstName\n     FROM Managers) m;\n```\n- **Explanation**:  \n  - `NATURAL JOIN`: Automatically resolves column name conflicts when columns share the same name (like `Fname` or `LName`) between the two tables.\n  - **Alias for Derived Table**: The subquery for `Managers` uses the alias `m`, which is required, but does not affect the query logic.</md></sn>","topic_id":777,"last_visited":"2025-03-26T06:20:52.248Z"}],"chapter_id":200},{"chapter_name":"08.ORDER BY","topics":[{"topic_name":"01.Sorting by column number","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Sorting by Column Number (Instead of Name)**\n\n---\n\nYou can use a column's number (where the leftmost column is '1') to indicate which column to base the sort on, instead of describing the column by its name.\n\nSql at first retieve data then it will sort them,as a result the column number will be relative if we manually select custome columns from table\n\n- **Pro**: If you think it's likely you might change column names later, doing so won't break the code.\n- **Con**: This approach generally reduces readability of the query. It's instantly clear what `ORDER BY Reputation` means, while `ORDER BY 3` requires counting, possibly with a finger on the screen.\n\n**Example Query:**\n\nThis query sorts the result by the information in the relative column position 3 from the `SELECT` statement instead of the column name `Reputation`.\n\n```sql\nSELECT DisplayName, JoinDate, Reputation \nFROM Users \nORDER BY 3;\n```\n\n**Result:**\n\n| DisplayName         | JoinDate   | Reputation |\n|---------------------|------------|------------|\n| Community           | 2008-09-15 | 1          |\n| Jarrod Dixon        | 2008-10-03 | 11739      |\n| Geoff Dalgas        | 2008-10-03 | 12567      |\n| Joel Spolsky        | 2008-09-16 | 25784      |\n| Jeff Atwood         | 2008-09-16 | 37628      |</md></sn><sn><h5>Practise Code</h5><pre data-v=\"sql\">mysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| auto_shop          |\n| country            |\n| employees          |\n| friends            |\n| imdb               |\n| information_schema |\n| library            |\n| mysql              |\n| node_project       |\n| office             |\n| performance_schema |\n| practise           |\n| sqlpro             |\n| student_info       |\n| sys                |\n+--------------------+\n15 rows in set (0.03 sec)\n\nmysql&gt; USE library;\nDatabase changed\nmysql&gt; SHOW TABLES;\n+-------------------+\n| Tables_in_library |\n+-------------------+\n| authors           |\n| books             |\n| booksauthors      |\n+-------------------+\n3 rows in set (0.12 sec)\n\nmysql&gt; SELECT * FROM authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n+----+---------------------+---------+\n8 rows in set (0.05 sec)\n\nmysql&gt; SELECT * FROM authors ORDER BY 2;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  8 | Chiristian Wenz     | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  1 | J.D Salinger        | USA     |\n|  3 | Jane Austen         | UK      |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  4 | Scott Hanselman     | USA     |\n|  7 | Todd Miranda        | USA     |\n+----+---------------------+---------+\n8 rows in set (0.00 sec)\n\nmysql&gt; SELECT Country,Id FROM authors ORDER BY 2;\n+---------+----+\n| Country | Id |\n+---------+----+\n| USA     |  1 |\n| USA     |  2 |\n| UK      |  3 |\n| USA     |  4 |\n| USA     |  5 |\n| India   |  6 |\n| USA     |  7 |\n| USA     |  8 |\n+---------+----+\n8 rows in set (0.00 sec)\n\nmysql&gt; SELECT Country,Id FROM authors ORDER BY 1;\n+---------+----+\n| Country | Id |\n+---------+----+\n| India   |  6 |\n| UK      |  3 |\n| USA     |  1 |\n| USA     |  2 |\n| USA     |  4 |\n| USA     |  5 |\n| USA     |  7 |\n| USA     |  8 |\n+---------+----+\n8 rows in set (0.00 sec)</pre></sn>","topic_id":824,"last_visited":"2025-04-07T13:24:11.955Z"},{"topic_name":"02.Use ORDER BY with TOP to return the top x rows based on a columns value","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Use `ORDER BY` with `TOP` to Return the Top X Rows Based on a Column's Value**\n\nYou can combine `ORDER BY` with `TOP` to return a limited number of rows sorted by a column's value.\n\nIn this example, we want to return the **top 5 highest reputation users**.\n\n---\n\n### üîπ Without `ORDER BY`\n\nThis query returns the top 5 rows based on the default order (usually by the `Id` column, even if not shown):\n\n```sql\nSELECT TOP 5 DisplayName, Reputation\nFROM Users;\n```\n\n**Result:**\n\n| DisplayName     | Reputation |\n|------------------|------------|\n| Community        | 1          |\n| Geoff Dalgas     | 12567      |\n| Jarrod Dixon     | 11739      |\n| Jeff Atwood      | 37628      |\n| Joel Spolsky     | 25784      |\n\n---\n\n### üîπ With `ORDER BY`\n\nThis version sorts by `Reputation` in descending order before selecting the top 5:\n\n```sql\nSELECT TOP 5 DisplayName, Reputation\nFROM Users\nORDER BY Reputation DESC;\n```\n\n**Result:**\n\n| DisplayName     | Reputation |\n|------------------|------------|\n| JonSkeet         | 865023     |\n| Darin Dimitrov   | 661741     |\n| BalusC           | 650237     |\n| Hans Passant     | 625870     |\n| Marc Gravell     | 601636     |\n\n---\n\n### üî∏ Remarks\n\nSome versions of SQL (like **MySQL**) use the `LIMIT` clause at the **end** of the query instead of `TOP`:\n\n```sql\nSELECT DisplayName, Reputation\nFROM Users\nORDER BY Reputation DESC\nLIMIT 5;\n```</md></sn><sn><h5>Getting the oldest Employee from database based on HireDate</h5><pre data-v=\"sql\">mysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| auto_shop          |\n| country            |\n| employees          |\n| information_schema |\n| library            |\n| mysql              |\n| office             |\n| performance_schema |\n| sys                |\n+--------------------+\n\n\nmysql&gt; USE auto_shop;\nDatabase changed\n\n\nmysql&gt; SHOW TABLES;\n+---------------------+\n| Tables_in_auto_shop |\n+---------------------+\n| cars                |\n| customers           |\n| departments         |\n| employees           |\n+---------------------+\n4 rows in set (0.01 sec)\n\nmysql&gt; TABLE employees;\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n| Id | FName    | LName    | PhoneNumber | ManagerID | DepartmentId | Salary | HireDate            |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n|  1 | James    | Smith    | 1234567890  |      NULL |            1 |   1000 | 2002-01-01 00:00:00 |\n|  2 | John     | Johnson  | 334573457   |         1 |            1 |    600 | 2005-05-23 00:00:00 |\n|  3 | Micheal  | Williams | 135791131   |         1 |            2 |    600 | 2009-05-12 00:00:00 |\n|  4 | Jonathon | Smith    | 12121212    |         2 |            1 |    500 | 2016-07-24 00:00:00 |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n4 rows in set (0.00 sec)\n\nmysql&gt; SELECT CONCAT(FName,'-',LName) as \"Employee\",HireDate FROM employees ORDER BY 2;\n+------------------+---------------------+\n| Employee         | HireDate            |\n+------------------+---------------------+\n| James-Smith      | 2002-01-01 00:00:00 |\n| John-Johnson     | 2005-05-23 00:00:00 |\n| Micheal-Williams | 2009-05-12 00:00:00 |\n| Jonathon-Smith   | 2016-07-24 00:00:00 |\n+------------------+---------------------+\n4 rows in set (0.00 sec)\n\nmysql&gt; SELECT CONCAT(FName,'-',LName) as \"Employee\",HireDate FROM employees ORDER BY 2 LIMIT 1;\n+-------------+---------------------+\n| Employee    | HireDate            |\n+-------------+---------------------+\n| James-Smith | 2002-01-01 00:00:00 |\n+-------------+---------------------+\n1 row in set (0.00 sec)</pre></sn>","topic_id":825,"last_visited":"2025-04-07T14:10:22.597Z"},{"topic_name":"03.Customizeed sorting order","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Customized Sorting Order**\n---\nBy default, `ORDER BY` sorts values in **alphabetical** or **numerical** order. But sometimes you may want a **custom sort order**, such as placing specific values first.\n\nThis can be achieved using a `CASE` expression inside the `ORDER BY` clause.\n\n---\n\n### üîπ Example Table: `Employee`\n\n| Name   | Department  |\n|--------|-------------|\n| Hasan  | IT          |\n| Yusuf  | HR          |\n| Hillary| HR          |\n| Joe    | IT          |\n| Merry  | HR          |\n| Ken    | Accountant  |\n\n---\n\n### üî∏ Query for Custom Sorting\n\nWe want to sort:\n1. HR first  \n2. Accountant second  \n3. All others (like IT) last\n\n```sql\nSELECT *\nFROM Employee\nORDER BY CASE Department\n    WHEN 'HR' THEN 1\n    WHEN 'Accountant' THEN 2\n    ELSE 3\nEND;\n```\n\n---\n\n### ‚úÖ Result:\n\n| Name    | Department  |\n|---------|-------------|\n| Yusuf   | HR          |\n| Hillary | HR          |\n| Merry   | HR          |\n| Ken     | Accountant  |\n| Hasan   | IT          |\n| Joe     | IT          |</md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; table cars;\n+----+------------+------------+--------------+---------+------------+\n| Id | CustomerId | EmployeeId | Model        | Status  | TotalCoast |\n+----+------------+------------+--------------+---------+------------+\n|  1 |          1 |          2 | Ford F-150   | Ready   |        230 |\n|  2 |          1 |          2 | Ford F-150   | Ready   |        200 |\n|  3 |          2 |          1 | Ford Mustang | WAITING |        100 |\n|  4 |          3 |          3 | Toyota Prius | WORKING |       1254 |\n+----+------------+------------+--------------+---------+------------+\n4 rows in set (0.07 sec)\n\nmysql&gt; select * from cars order by case status when 'Ready' then 1 when 'working' then 2 else 3 end;\n+----+------------+------------+--------------+---------+------------+\n| Id | CustomerId | EmployeeId | Model        | Status  | TotalCoast |\n+----+------------+------------+--------------+---------+------------+\n|  1 |          1 |          2 | Ford F-150   | Ready   |        230 |\n|  2 |          1 |          2 | Ford F-150   | Ready   |        200 |\n|  4 |          3 |          3 | Toyota Prius | WORKING |       1254 |\n|  3 |          2 |          1 | Ford Mustang | WAITING |        100 |\n+----+------------+------------+--------------+---------+------------+\n4 rows in set (0.04 sec)</pre></sn>","topic_id":828,"last_visited":"2025-04-07T14:37:38.475Z"},{"topic_name":"04.Order by Alias","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Order by Alias**\n---\nIn SQL, you can use **column aliases** in the `ORDER BY` clause because of the **logical query processing order** ‚Äî specifically, `ORDER BY` comes *after* the `SELECT` clause in processing.\n\n---\n\n### üîπ Using Aliases in `ORDER BY`\n\nYou can refer to aliases defined in the `SELECT` clause:\n\n```sql\nSELECT DisplayName, JoinDate AS jd, Reputation AS rep\nFROM Users\nORDER BY jd, rep;\n```\n\nThis sorts the result **first by `JoinDate` (jd)**, then by **`Reputation` (rep)**.\n\n---\n\n### üîπ Using Column Position Instead of Aliases\n\nYou can also use the **relative position** of columns in the `SELECT` statement:\n\n- `1` ‚Üí `DisplayName`\n- `2` ‚Üí `JoinDate (jd)`\n- `3` ‚Üí `Reputation (rep)`\n\n```sql\nSELECT DisplayName, JoinDate AS jd, Reputation AS rep\nFROM Users\nORDER BY 2, 3;\n```\n\nThis gives the same sorting result as the alias version.</md></sn>","topic_id":827,"last_visited":"2025-04-07T14:25:51.079Z"},{"topic_name":"05. Sorting by multiple columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Sorting by Multiple Columns**\n---\nYou can sort query results by **multiple columns** using `ORDER BY` with a comma-separated list of columns. The results will be sorted by the **first column**, and if there are ties, then by the **second**, and so on.\n\n---\n\n### üîπ Example Query\n\n```sql\nSELECT DisplayName, JoinDate, Reputation \nFROM Users \nORDER BY JoinDate, Reputation;\n```\n\nThis query sorts the results **first by `JoinDate`**, then by `Reputation` (ascending by default).\n\n---\n\n### üî∏ Result:\n\n| DisplayName     | JoinDate   | Reputation |\n|------------------|------------|------------|\n| Community        | 2008-09-15 | 1          |\n| Jeff Atwood      | 2008-09-16 | 25784  &lt;--    |\n| Joel Spolsky     | 2008-09-16 | 37628   &lt;--   |\n| Jarrod Dixon     | 2008-10-03 | 11739      |\n| Geoff Dalgas     | 2008-10-03 | 12567      |</md></sn>","topic_id":826,"last_visited":"2025-04-07T14:18:15.708Z"}],"chapter_id":214},{"chapter_name":"09.AND OR operator","topics":[{"topic_name":"AND OR Example","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  ** `AND` / `OR` Example**\n---\nYou can use logical operators like `AND` and `OR` in the `WHERE` clause to filter rows based on multiple conditions.\n\n---\n\n### üîπ Example Table\n\n| Name | Age | City   |\n|------|-----|--------|\n| Bob  | 10  | Paris  |\n| Mat  | 20  | Berlin |\n| Mary | 24  | Prague |\n\n---\n\n### üî∏ Query with `AND`\n\n```sql\nSELECT Name \nFROM table \nWHERE Age &gt; 10 AND City = 'Prague';\n```\n\n**Result:**\n\n| Name |\n|------|\n| Mary |\n\nExplanation: Only Mary is older than 10 **and** lives in Prague.\n\n---\n\n### üî∏ Query with `OR`\n\n```sql\nSELECT Name \nFROM table \nWHERE Age = 10 OR City = 'Prague';\n```\n\n**Result:**\n\n| Name |\n|------|\n| Bob  |\n| Mary |\n\nExplanation:\n- Bob satisfies `Age = 10`\n- Mary satisfies `City = 'Prague'`</md></sn>","topic_id":829,"last_visited":"2025-04-07T14:43:16.672Z"}],"chapter_id":215},{"chapter_name":"20.Create Database","topics":[{"topic_name":"CREATE DATABASE","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CREATE Database**\n\nIn SQL, you can create a new database using the `CREATE DATABASE` statement. This command initializes an empty database with the specified name, where you can subsequently create tables and store data.\n\n**Syntax:**\n\n\n```sql\nCREATE DATABASE database_name;\n```\n\n\n**Example:**\n\n\n```sql\nCREATE DATABASE myDatabase;\n```\n\n\nThis example creates a database named `myDatabase`. Once created, you can establish tables within `myDatabase` to organize and manage your data.\n\n**Note:** Ensure that the database name you choose is unique within your database management system to prevent conflicts. Additionally, appropriate permissions are required to execute the `CREATE DATABASE` statement. </md></sn>","topic_id":779,"last_visited":"2025-03-26T06:49:21.718Z"}],"chapter_id":202},{"chapter_name":"21.Create Table","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>Introduction</h3><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">| Parameter   | Details                                                                                           |\n|------------|---------------------------------------------------------------------------------------------------|\n| tableName  | The name of the table                                                                             |\n| columns    | Contains an enumeration of all the columns in the table. See **Create a New Table** for details.  |\n| Description | The `CREATE TABLE` statement is used to create a new table in the database. It defines columns, types, and integrity constraints. |</md></sn>","topic_id":780,"last_visited":"2025-03-26T06:54:20.490Z"},{"topic_name":"01.Create Table from Select","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create Table From Select**  \n\nYou may want to create a duplicate of a table:  \n\n```sql\nCREATE TABLE ClonedEmployees AS  \nSELECT * FROM Employees;\n```\n\nYou can use any features of a `SELECT` statement to modify the data before inserting it into the new table. The columns of the new table are automatically created based on the selected rows.  \n\nExample: Creating a modified table with specific columns and a concatenated name field:  \n\n```sql\nCREATE TABLE ModifiedEmployees AS  \nSELECT Id, CONCAT(FName, \" \", LName) AS FullName  \nFROM Employees  \nWHERE Id &gt; 10;\n```</md></sn><sn><h3>Practise1 : Creating Table From Select</h3><pre data-v=\"sql\">mysql&gt; show tables;\n+------------------------+\n| Tables_in_student_info |\n+------------------------+\n| student_age            |\n+------------------------+\n1 row in set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE duplicate_student_age AS SELECT * FROM student_age;\nQuery OK, 1 row affected (0.21 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n\n\nmysql&gt; show tables;\n+------------------------+\n| Tables_in_student_info |\n+------------------------+\n| duplicate_student_age  |\n| student_age            |\n+------------------------+\n2 rows in set (0.01 sec)\n\n\nmysql&gt; desc duplicate_student_age;\n+--------------+-------------+------+-----+---------+-------+\n| Field        | Type        | Null | Key | Default | Extra |\n+--------------+-------------+------+-----+---------+-------+\n| student_name | varchar(30) | YES  |     | NULL    |       |\n| age          | int         | YES  |     | NULL    |       |\n+--------------+-------------+------+-----+---------+-------+\n2 rows in set (0.09 sec)</pre></sn>","topic_id":781,"last_visited":"2025-03-26T07:13:37.493Z"},{"topic_name":"02.Create a New Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create a New Table**  \n\nA basic **Employees** table containing an **ID**, first name, last name, and phone number can be created using:  \n\n```sql\nCREATE TABLE Employees(  \n    Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,  \n    FName VARCHAR(20) NOT NULL,  \n    LName VARCHAR(20) NOT NULL,  \n    PhoneNumber VARCHAR(10) NOT NULL  \n);\n```  \n\nThis example is specific to **Transact-SQL**.  \n\nThe `CREATE TABLE` statement creates a new table in the database, followed by the table name (`Employees`). Then, it defines the **columns** and their properties:  \n\n#### **Column Breakdown**  \n\n| Column       | Data Type       | Properties |\n|-------------|----------------|------------|\n| **Id**      | `INT`           | `IDENTITY(1,1) PRIMARY KEY NOT NULL` |\n| **FName**   | `VARCHAR(20)`   | `NOT NULL` |\n| **LName**   | `VARCHAR(20)`   | `NOT NULL` |\n| **PhoneNumber** | `VARCHAR(10)` | `NOT NULL` |\n\n#### **Explanation of `Id` Column**  \n\n- **Id** ‚Üí Column name  \n- **INT** ‚Üí Data type  \n- **IDENTITY(1,1)** ‚Üí Auto-generated values starting at **1** and incrementing by **1** for each new row  \n- **PRIMARY KEY** ‚Üí Ensures all values in this column are **unique**  \n- **NOT NULL** ‚Üí Ensures this column **cannot** have `NULL` values</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; CREATE DATABASE Office;\nQuery OK, 1 row affected (0.05 sec)\n\n\n\nmysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| employees          |\n| friends            |\n| imdb               |\n| information_schema |\n| mysql              |\n| node_project       |\n| office             |&lt;- here it is\n| performance_schema |\n| practise           |\n| sqlpro             |\n| student_info       |\n| sys                |\n+--------------------+\n12 rows in set (0.00 sec)\n\n\n\nmysql&gt; USE office;\nDatabase changed\n\n\nmysql&gt; SHOW TABLES;\nEmpty set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE Employees(\n    -&gt; Id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    -&gt; FName VARCHAR(20) NOT NULL,\n    -&gt; LName VARCHAR(20) NOT NULL,\n    -&gt; PhoneNumber VARCHAR(10) NOT NULL\n    -&gt; );\nQuery OK, 0 rows affected (0.31 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| employees        |\n+------------------+\n1 row in set (0.00 sec)\n\n\n\nmysql&gt; DESC employees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| Id          | int         | NO   | PRI | NULL    | auto_increment |\n| FName       | varchar(20) | NO   |     | NULL    |                |\n| LName       | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n4 rows in set (0.01 sec)\n</pre></sn>","topic_id":782,"last_visited":"2025-03-26T07:45:19.125Z"},{"topic_name":"03.Create Table with Foreign Key","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CREATE TABLE With FOREIGN KEY**  \n\nThe following example demonstrates how to create an **Employees** table with a foreign key reference to the **Cities** table.  \n\n#### **Step 1: Create the `Cities` Table**  \n```sql\nCREATE TABLE Cities(  \n    CityID INT AUTO_INCREMENT PRIMARY KEY,  \n    Name VARCHAR(20) NOT NULL,  \n    Zip VARCHAR(10) NOT NULL  \n);\n```  \n\n#### **Step 2: Create the `Employees` Table with a Foreign Key**  \n```sql\nCREATE TABLE Employees(  \n    EmployeeID INT AUTO_INCREMENT PRIMARY KEY,  \n    FirstName VARCHAR(20) NOT NULL,  \n    LastName VARCHAR(20) NOT NULL,  \n    PhoneNumber VARCHAR(10) NOT NULL,  \n    CityID INT,  \n    FOREIGN KEY (CityID) REFERENCES Cities(CityID)  \n);\n```  \n\nHere you could find a Diagram:\n\n![Diagram](https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/sqlassets/SQL%20%20Table%20with%20Foreiign%20Key%20Diagram.svg)\n\n\n### **Explanation of `CityID` Foreign Key**  \n\n| Column     | Type          | Description  |\n|------------|--------------|--------------|\n| **CityID** | `INT`        | Name of the column  |\n| **FOREIGN KEY** | -        | Defines `CityID` as a foreign key (optional in MySQL)  |\n| **REFERENCES Cities(CityID)** | - | Links `CityID` in `Employees` to `CityID` in `Cities` |\n\n### **Important Notes**  \n‚ùó **The referenced table (`Cities`) must exist before creating the `Employees` table.** Otherwise, an error will occur.  \n‚ùó **Use `AUTO_INCREMENT` instead of `IDENTITY(1,1)`, as MySQL does not support `IDENTITY`.**</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; use office;\nDatabase changed\n\nmysql&gt; CREATE TABLE Cities(\n    -&gt; CityID INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt; Name VARCHAR(20) NOT NULL,\n    -&gt; Zip VARCHAR(10) NOT NULL\n    -&gt; );\nQuery OK, 0 rows affected (0.18 sec)\n\n\nmysql&gt; show tables;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n+------------------+\n1 row in set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE Emplyees(\n    -&gt; EmplyoeeID INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt; FirstName VARCHAR(20) NOT NULL,\n    -&gt; LastName VARCHAR(20) NOT NULL,\n    -&gt; PhoneNumber VARCHAR(10) NOT NULL,\n    -&gt; CityID INT,\n    -&gt; FOREIGN KEY(CityID) REFERENCES cities(CityID)\n    -&gt; );\nQuery OK, 0 rows affected (0.30 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| emplyees         |\n+------------------+\n2 rows in set (0.01 sec)\n\n\nmysql&gt; DESC employees;\nERROR 1146 (42S02): Table 'office.employees' doesn't exist\n\n\nmysql&gt; DESC emplyees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)</pre></sn>","topic_id":783,"last_visited":"2025-03-26T08:30:20.239Z"},{"topic_name":"04.Duplicate a Table","topic_html":"<sn><h3>Duplicate a Table</h3><p>To duplicate a table, simply do the following:\n</p><pre data-v=\"sql\">CREATE TABLE newtable LIKE oldtable;</pre><p>or</p><pre data-v=\"sql\">INSERT newtable SELECT * FROM oldtable;</pre></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| emplyees         |\n+------------------+\n2 rows in set (0.00 sec)\n\n\nmysql&gt; CREATE TABLE employees LIKE emplyees;\nQuery OK, 0 rows affected (0.51 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| employees        |\n| emplyees         |\n+------------------+\n3 rows in set (0.01 sec)</pre><h5>#Duplicating data from emplyees to employees</h5><pre data-v=\"sql\">mysql&gt; INSERT emplyoees SELECT * FROM emplyees;\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0</pre></sn>","topic_id":784,"last_visited":"2025-03-26T08:54:13.343Z"},{"topic_name":"05.Create a Temporary or InMemory Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create a Temporary or In-Memory Table**\n---\n\n#### **PostgreSQL and SQLite**  \nTo create a temporary table local to the session:  \n```sql\nCREATE TEMP TABLE MyTable(...);\n```\n\n**SQL Server**  \n- To create a temporary table local to the session:  \n```sql\nCREATE TABLE #TempPhysical(...);\n```\n\n- To create a temporary table visible to everyone:  \n```sql\nCREATE TABLE ##TempPhysicalVisibleToEveryone(...);\n```\n\n- To create an in-memory table:  \n```sql\nDECLARE @TempMemory TABLE(...);\n```</md></sn>","topic_id":785,"last_visited":"2025-03-26T08:50:54.447Z"}],"chapter_id":203},{"chapter_name":"26.INSERT","topics":[{"topic_name":"01.Insert Data From Another Table Using Select","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **INSERT Data from Another Table Using SELECT**\n\nTo insert data from one table into another, you can use the following query:\n\n```sql\nINSERT INTO Customers (FName, LName, PhoneNumber)\nSELECT FName, LName, PhoneNumber FROM Employees;\n```\n\nThis example inserts all Employees into the Customers table. Since the two tables have different fields, you need to specify which fields to insert and which to select. The correlating field names don‚Äôt need to be identical, but they must have the same data type.\n\nThis example assumes the **Id** field has an Identity Specification set and will auto-increment.\n\nIf you have two tables with exactly the same field names and want to transfer all records, you can use:\n\n```sql\nINSERT INTO Table1\nSELECT * FROM Table2;\n```</md></sn>","topic_id":786,"last_visited":"2025-03-26T09:13:37.110Z"},{"topic_name":"02.Insert New Row","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert New Row**\n\n---\n\nTo insert a new row into the **Customers** table, use the following query:\n\n```sql\nINSERT INTO Customers\nVALUES ('Zack', 'Smith', 'zack@example.com', '7049989942', 'EMAIL');\n```\n\nThis statement inserts a new row into the **Customers** table. Note that a value is not specified for the **Id** column, as it will be auto-generated. However, values for all other columns must be specified.</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; desc emplyoees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n\n\n\nmysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Nazmul', 'Hossan', '01905938', 12);\nQuery OK, 1 row affected (0.08 sec)\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n+------------+-----------+----------+-------------+--------+\n1 row in set (0.00 sec)</pre></sn>","topic_id":787,"last_visited":"2025-03-26T09:13:21.964Z"},{"topic_name":"03.Insert Only Specified Columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert Only Specified Columns**\n---\nTo insert data into specific columns of the **Customers** table, use the following query:\n\n```sql\nINSERT INTO Customers (FName, LName, Email, PreferredContact)\nVALUES ('Zack', 'Smith', 'zack@example.com', 'EMAIL');\n```\n\nThis statement inserts a new row into the **Customers** table. Data will only be inserted into the specified columns, and no value is provided for the **PhoneNumber** column.\n\nNote: All columns marked as **NOT NULL** must be included in the insert statement.</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; desc emplyoees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n\n\n\nmysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Nazmul', 'Hossan', '01905938', 12);\nQuery OK, 1 row affected (0.08 sec)\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n+------------+-----------+----------+-------------+--------+\n1 row in set (0.00 sec)</pre></sn>","topic_id":788,"last_visited":"2025-03-26T09:34:57.260Z"},{"topic_name":"04.Insert Multiple Rows at Once","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert Multiple Rows at Once**\n\nYou can insert multiple rows with a single **INSERT** command:\n\n```sql\nINSERT INTO tbl_name (field1, field2, field3)\nVALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);\n```\n\nFor inserting large quantities of data (bulk insert), DBMS-specific features and recommendations exist:\n\n- **MySQL**: `LOAD DATA INFILE`\n- **MSSQL**: `BULK INSERT`</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Imtiaz', 'Sarker', '0193438', 22),\n    -&gt; ('Sabbir', 'Hossan', '046578', 32),\n    -&gt; ('Nelson', 'Mandela', '0436578', 34);\nQuery OK, 3 rows affected (0.26 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n|          2 | Imtiaz    | Sarker   | 0193438     |     22 |\n|          3 | Sabbir    | Hossan   | 046578      |     32 |\n|          4 | Nelson    | Mandela  | 0436578     |     34 |\n+------------+-----------+----------+-------------+--------+\n4 rows in set (0.00 sec)</pre></sn>","topic_id":789,"last_visited":"2025-03-26T09:39:41.021Z"}],"chapter_id":204},{"chapter_name":"15.Except","topics":[{"topic_name":"01.Except","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Except**\n---\nIn SQL, `EXCEPT` is used to return **rows from the first query that are not present in the second query**.\n\n### üîπ Syntax:\n```sql\nSELECT column1, column2, ...\nFROM table1\nEXCEPT\nSELECT column1, column2, ...\nFROM table2;\n```\n\n### üîπ Key Points:\n- Both queries must return the **same number of columns**, with **compatible data types**.\n- `EXCEPT` removes duplicates by default (like `DISTINCT`).\n- It's similar to `MINUS` in some databases (like Oracle).\n- The first table must have more data than the second one\n### üîπ Example:\n```sql\nSELECT name FROM students\nEXCEPT\nSELECT name FROM graduates;\n```\n‚úÖ Returns students who have **not graduated**.</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Example**\n---\n### üü¶ `students` table\n\n| id | name  |\n|----|-------|\n| 1  | Emon  |\n| 2  | Tisha |\n| 3  | Nabil |\n| 4  | Rafi  |\n\n---\n\n### üü© `graduates` table\n\n| id | name  |\n|----|-------|\n| 2  | Tisha |\n| 4  | Rafi  |\n\n---\n\n### üîπ SQL `EXCEPT` Query:\n```sql\nSELECT name FROM students\nEXCEPT\nSELECT name FROM graduates;\n```\n\n---\n\n### ‚úÖ Output:\n\n| name  |\n|-------|\n| Emon  |\n| Nabil |\n\n‚û°Ô∏è Shows names from `students` **not in** `graduates`.\n\nExcept return `table1` - `table2` rows , so table1 must be greater than table2</md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; show tables;\n+-------------------+\n| Tables_in_library |\n+-------------------+\n| authors           |\n| books             |\n| booksauthors      |\n| new_authors       |\n+-------------------+\n4 rows in set (0.01 sec)\n\nmysql&gt; table authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n+----+---------------------+---------+\n8 rows in set (0.00 sec)\n\nmysql&gt; table new_authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n|  9 | Ahmed dedat         | India   |\n| 10 | zakir naik          | India   |\n+----+---------------------+---------+\n10 rows in set (0.00 sec)\n\nmysql&gt; select Name from authors except select name from new_authors;\nEmpty set (0.00 sec)\n\nmysql&gt; select Name from new_authors except select name from authors;\n+-------------+\n| Name        |\n+-------------+\n| Ahmed dedat |\n| zakir naik  |\n+-------------+\n2 rows in set (0.00 sec)</pre></sn>","topic_id":830,"last_visited":"2025-04-09T03:06:54.789Z"}],"chapter_id":216},{"chapter_name":"14.Pagination","topics":[{"topic_name":"01.Limiting amount of results","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **Limiting Amount of Results**\n\n---\n\n#### ‚úÖ **ISO/ANSI SQL**\n```sql\nSELECT * FROM TableName\nFETCH FIRST 20 ROWS ONLY;\n```\n\n---\n\n#### ‚úÖ **MySQL, PostgreSQL, SQLite**\n```sql\nSELECT * FROM TableName\nLIMIT 20;\n```\n\n---\n\n#### ‚úÖ **Oracle**\n```sql\nSELECT Id, Col1\nFROM (\n    SELECT Id, Col1,\n           row_number() OVER (ORDER BY Id) AS RowNumber\n    FROM TableName\n)\nWHERE RowNumber &lt;= 20;\n```\n\n---\n\n#### ‚úÖ **SQL Server**\n```sql\nSELECT TOP 20 *\nFROM dbo.[Sale];\n```</md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; table authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n+----+---------------------+---------+\n8 rows in set (0.00 sec)\n\nmysql&gt; select * from authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n+----+---------------------+---------+\n8 rows in set (0.00 sec)\n\nmysql&gt; select * from authors limit 5;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n+----+---------------------+---------+\n5 rows in set (0.00 sec)</pre></sn>","topic_id":831,"last_visited":"2025-04-09T03:17:50.794Z"},{"topic_name":"02.Skipping then taking some results","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **Skipping Then Taking Some Results (Pagination)**\n\n---\n\n#### ‚úÖ **ISO/ANSI SQL**\n```sql\nSELECT Id, Col1\nFROM TableName\nORDER BY Id\nOFFSET 20 ROWS FETCH NEXT 20 ROWS ONLY;\n```\n\n---\n\n#### ‚úÖ **MySQL**\n```sql\nSELECT * FROM TableName\nLIMIT 20, 20; -- offset, limit\n```\n\n---\n\n#### ‚úÖ **PostgreSQL, SQLite**\n```sql\nSELECT * FROM TableName\nLIMIT 20 OFFSET 20;\n```\n\n---\n\n#### ‚úÖ **Oracle, SQL Server**\n```sql\nSELECT Id, Col1\nFROM (\n    SELECT Id, Col1,\n           row_number() OVER (ORDER BY Id) AS RowNumber\n    FROM TableName\n)\nWHERE RowNumber BETWEEN 21 AND 40;\n```</md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; table authors;\n+----+---------------------+---------+\n| Id | Name                | Country |\n+----+---------------------+---------+\n|  1 | J.D Salinger        | USA     |\n|  2 | F. Scott Fitzgerald | USA     |\n|  3 | Jane Austen         | UK      |\n|  4 | Scott Hanselman     | USA     |\n|  5 | Jason N.Gaylord     | USA     |\n|  6 | Pranav Rastogi      | India   |\n|  7 | Todd Miranda        | USA     |\n|  8 | Chiristian Wenz     | USA     |\n+----+---------------------+---------+\n8 rows in set (0.00 sec)\n\nmysql&gt; select * from authors limit 2,3;\n+----+-----------------+---------+\n| Id | Name            | Country |\n+----+-----------------+---------+\n|  3 | Jane Austen     | UK      |\n|  4 | Scott Hanselman | USA     |\n|  5 | Jason N.Gaylord | USA     |\n+----+-----------------+---------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from authors limit 3,999999999;\n+----+-----------------+---------+\n| Id | Name            | Country |\n+----+-----------------+---------+\n|  4 | Scott Hanselman | USA     |\n|  5 | Jason N.Gaylord | USA     |\n|  6 | Pranav Rastogi  | India   |\n|  7 | Todd Miranda    | USA     |\n|  8 | Chiristian Wenz | USA     |\n+----+-----------------+---------+\n5 rows in set (0.00 sec)\n</pre></sn>","topic_id":832,"last_visited":"2025-04-09T03:25:24.728Z"},{"topic_name":"03.Skipping some rows from result","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### üîπ **Skipping Some Rows from Result**\n\n---\n\n#### ‚úÖ **ISO/ANSI SQL**\n```sql\nSELECT Id, Col1\nFROM TableName\nORDER BY Id\nOFFSET 20 ROWS;\n```\n\n---\n\n#### ‚úÖ **MySQL**\n```sql\nSELECT * FROM TableName\nLIMIT 20, 42424242424242; \n-- Skips 20 and takes a very large number (larger than rows in the table)\n```\n\n---\n\n#### ‚úÖ **Oracle**\n```sql\nSELECT Id, Col1\nFROM (\n    SELECT Id, Col1,\n           row_number() OVER (ORDER BY Id) AS RowNumber\n    FROM TableName\n)\nWHERE RowNumber &gt; 20;\n```\n\n---\n\n#### ‚úÖ **PostgreSQL**\n```sql\nSELECT * FROM TableName\nOFFSET 20;\n```\n\n---\n\n#### ‚úÖ **SQLite**\n```sql\nSELECT * FROM TableName\nLIMIT -1 OFFSET 20;\n```\n\n---\n\nThis covers the different ways to skip a specific number of rows in the result set depending on the database</md></sn>","topic_id":833,"last_visited":"2025-04-09T03:29:50.327Z"}],"chapter_id":217},{"chapter_name":"13.Filter","topics":[{"topic_name":"01.Use BETWEEN to filter result","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **Use BETWEEN to Filter Results**\n\n**Note:** The `BETWEEN` operator is **inclusive**, meaning it includes the boundary values.\n\n---\n\n#### ‚úÖ **Using the `BETWEEN` Operator with Numbers:**\n```sql\nSELECT * FROM ItemSales\nWHERE Quantity BETWEEN 10 AND 17;\n```\nThis query returns all `ItemSales` records with a **quantity** greater than or equal to **10** and less than or equal to **17**.\n\n##### Example Output:\n\n| Id  | SaleDate   | ItemId | Quantity | Price |\n|-----|------------|--------|----------|-------|\n| 1   | 2013-07-01 | 100    | 10       | 34.5  |\n| 4   | 2013-07-23 | 100    | 15       | 34.5  |\n| 5   | 2013-07-24 | 145    | 10       | 34.5  |\n\n---\n\n#### ‚úÖ **Using the `BETWEEN` Operator with Date Values:**\n```sql\nSELECT * FROM ItemSales\nWHERE SaleDate BETWEEN '2013-07-11' AND '2013-05-24';\n```\nThis query returns all `ItemSales` records with a **SaleDate** greater than or equal to **July 11, 2013** and less than or equal to **May 24, 2013**.  \n(*Note: The order of dates is important; it seems to have a logical inconsistency in this example.*)\n\n##### Example Output:\n\n| Id  | SaleDate   | ItemId | Quantity | Price |\n|-----|------------|--------|----------|-------|\n| 3   | 2013-07-11 | 100    | 20       | 34.5  |\n| 4   | 2013-07-23 | 100    | 15       | 34.5  |\n| 5   | 2013-07-24 | 145    | 10       | 34.5  |\n\n**Note:** When comparing `datetime` values, you may need to convert `datetime` into `date` or adjust for 24-hour periods for accurate results.\n\n---\n\n#### ‚úÖ **Using the `BETWEEN` Operator with Text Values:**\n```sql\nSELECT Id, FName, LName FROM Customers\nWHERE LName BETWEEN 'D' AND 'L';\n```\nThis query returns all customers whose last name alphabetically falls between **'D'** and **'L'**.\n\n##### Example Output:\n\n| Id  | FName  | LName   |\n|-----|--------|---------|\n| 1   | William| Jones   |\n| 3   | Richard| Davis   |\n\n**Note:** In this case, **Customer #2**, whose last name starts with **'M'**, is **not** included.\n\n---\n\nThis section demonstrates how `BETWEEN` can be used with **numbers**, **dates**, and **text values** to filter results. </md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; table employees;\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n| Id | FName    | LName    | PhoneNumber | ManagerID | DepartmentId | Salary | HireDate            |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n|  1 | James    | Smith    | 1234567890  |      NULL |            1 |   1000 | 2002-01-01 00:00:00 |\n|  2 | John     | Johnson  | 334573457   |         1 |            1 |    600 | 2005-05-23 00:00:00 |\n|  3 | Micheal  | Williams | 135791131   |         1 |            2 |    600 | 2009-05-12 00:00:00 |\n|  4 | Jonathon | Smith    | 12121212    |         2 |            1 |    500 | 2016-07-24 00:00:00 |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n\n\nmysql&gt; select FName,Salary from employees where Salary between 200 and 600;\n+----------+--------+\n| FName    | Salary |\n+----------+--------+\n| John     |    600 |\n| Micheal  |    600 |\n| Jonathon |    500 |\n+----------+--------+\n\n\nmysql&gt; select fname,hiredate from employees where hiredate between '2000-12-30' and '2005-12-30';\n+-------+---------------------+\n| fname | hiredate            |\n+-------+---------------------+\n| James | 2002-01-01 00:00:00 |\n| John  | 2005-05-23 00:00:00 |\n+-------+---------------------+\n\n\nmysql&gt; select lname from employees where lname between 'p' and 't';\n+-------+\n| lname |\n+-------+\n| Smith |\n| Smith |\n+-------+\n</pre></sn>","topic_id":834,"last_visited":"2025-04-09T05:39:16.713Z"},{"topic_name":"02.Use HAVING with Aggregate Functions","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### üîπ **Use HAVING with Aggregate Functions**\n\n---\n\n#### ‚úÖ **Introduction to HAVING**\n- Unlike the `WHERE` clause, the `HAVING` clause can be used with **aggregate functions**.\n- **Aggregate functions** perform a calculation on a set of values and return a single value.  \n  **Common aggregate functions** include:\n  - `COUNT()`\n  - `SUM()`\n  - `MIN()`\n  - `MAX()`\n\n---\n\n#### ‚úÖ **Example Using HAVING with Aggregate Functions**\n\nThis example uses the **Car Table** from the Example Databases.\n\n```sql\nSELECT CustomerId, COUNT(Id) AS [Number of Cars]\nFROM Cars\nGROUP BY CustomerId\nHAVING COUNT(Id) &gt; 1;\n```\n\nThis query returns the **CustomerId** and the **Number of Cars** for any customer who has more than **one car**. In this case, the only customer with more than one car is **Customer #1**.\n\n##### Example Output:\n\n| CustomerId | Number of Cars |\n|------------|----------------|\n| 1          | 2              |\n\n---\n\n#### ‚úÖ **Key Points:**\n- `HAVING` is used after `GROUP BY` to filter the results based on aggregate values.\n- The `WHERE` clause cannot filter aggregated results, but `HAVING` can.\n\n---\n\nThis section demonstrates how to use `HAVING` to filter data based on aggregate functions. </md></sn><sn><pre data-v=\"sql\">mysql&gt; select * from cars;\n+----+------------+------------+--------------+---------+------------+\n| Id | CustomerId | EmployeeId | Model        | Status  | TotalCoast |\n+----+------------+------------+--------------+---------+------------+\n|  1 |          1 |          2 | Ford F-150   | Ready   |        230 |\n|  2 |          1 |          2 | Ford F-150   | Ready   |        200 |\n|  3 |          2 |          1 | Ford Mustang | WAITING |        100 |\n|  4 |          3 |          3 | Toyota Prius | WORKING |       1254 |\n+----+------------+------------+--------------+---------+------------+\n\n\nmysql&gt; select customerId,Count(Id) as \"Number of Cars\" \n       from cars \n       group by CustomerId \n       Having Count(Id) &gt; 1;\n+------------+----------------+\n| customerId | Number of Cars |\n+------------+----------------+\n|          1 |              2 |\n+------------+----------------+</pre></sn>","topic_id":835,"last_visited":"2025-04-09T05:54:40.741Z"},{"topic_name":"00.Overview","topic_html":"<sn><h3>Filter</h3><p>Filter method in programming used to take or remove element from list based on condition,where sort method does not remove any element from list it just rearrange the list ascending or descending order</p><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n| **Aspect**           | **Filter**                                      | **Sort**                                        |\n|----------------------|-------------------------------------------------|-------------------------------------------------|\n| **Definition**        | Selects elements based on a condition.          | Arranges elements in a specified order.         |\n| **Purpose**           | To **remove** unwanted elements.                | To **organize** elements in a sequence.         |\n| **Operation Type**    | **Selection**                                   | **Ordering**                                    |\n| **Example**           | Filtering even numbers from a list.             | Sorting numbers in ascending order.            |\n| **Criteria**          | Based on a **condition** (e.g., even/odd, greater than, etc.). | Based on **order** (ascending, descending).      |\n| **Effect on Data**    | Reduces the number of elements.                 | Changes the order of elements without reducing their count. |\n| **Output**            | A **subset** of the original collection.        | A **reordered** version of the original collection. |\n| **Example Code**      | `arr.filter(x =&gt; x &gt; 10)`                       | `arr.sort((a, b) =&gt; a - b)`                     |\n| **Use Case**          | Selecting records or items that meet specific criteria. | Organizing data for display, comparisons, etc.  |\n</md></sn>","topic_id":836,"last_visited":"2025-04-09T05:58:37.210Z"},{"topic_name":"03.WHERE clause with NULL NOT NULL values","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### üîπ **WHERE Clause with NULL/NOT NULL Values**\n\n---\n\n#### ‚úÖ **Using `IS NULL` to Check for NULL Values**\n```sql\nSELECT * \nFROM Employees \nWHERE ManagerId IS NULL;\n```\nThis query will return all employee records where the **ManagerId** column is **NULL**.\n\n##### Example Output:\n\n| Id  | FName  | LName  | PhoneNumber  | ManagerId | DepartmentId |\n|-----|--------|--------|--------------|-----------|--------------|\n| 1   | James  | Smith  | 1234567890   | NULL      | 1            |\n\n---\n\n#### ‚úÖ **Using `IS NOT NULL` to Check for Non-NULL Values**\n```sql\nSELECT * \nFROM Employees \nWHERE ManagerId IS NOT NULL;\n```\nThis query will return all employee records where the **ManagerId** is **not NULL**.\n\n##### Example Output:\n\n| Id  | FName  | LName   | PhoneNumber  | ManagerId | DepartmentId |\n|-----|--------|---------|--------------|-----------|--------------|\n| 2   | John   | Johnson | 2468101214   | 1         | 1            |\n| 3   | Michael| Williams| 1357911131   | 1         | 2            |\n| 4   | Johnathon | Smith| 1212121212   | 2         | 1            |\n\n---\n\n#### ‚úÖ **Important Note:**\nThe following queries will **not** return any results:\n- `WHERE ManagerId = NULL`\n- `WHERE ManagerId &lt;&gt; NULL`\n\nThis is because **NULL** cannot be compared using regular operators like `=` or `&lt;&gt;`. Use `IS NULL` or `IS NOT NULL` for checking NULL values.\n\n---\n\nThis section explains how to properly use the `WHERE` clause with **NULL** and **NOT NULL** values in SQL queries</md></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; select * from employees;\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n| Id | FName    | LName    | PhoneNumber | ManagerID | DepartmentId | Salary | HireDate            |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n|  1 | James    | Smith    | 1234567890  |      NULL |            1 |   1000 | 2002-01-01 00:00:00 |\n|  2 | John     | Johnson  | 334573457   |         1 |            1 |    600 | 2005-05-23 00:00:00 |\n|  3 | Micheal  | Williams | 135791131   |         1 |            2 |    600 | 2009-05-12 00:00:00 |\n|  4 | Jonathon | Smith    | 12121212    |         2 |            1 |    500 | 2016-07-24 00:00:00 |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n4 rows in set (0.00 sec)\n\nmysql&gt; select * from employees where ManagerId is Null;\n+----+-------+-------+-------------+-----------+--------------+--------+---------------------+\n| Id | FName | LName | PhoneNumber | ManagerID | DepartmentId | Salary | HireDate            |\n+----+-------+-------+-------------+-----------+--------------+--------+---------------------+\n|  1 | James | Smith | 1234567890  |      NULL |            1 |   1000 | 2002-01-01 00:00:00 |\n+----+-------+-------+-------------+-----------+--------------+--------+---------------------+\n1 row in set (0.05 sec)\n\nmysql&gt; select * from employees where ManagerId is not Null;\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n| Id | FName    | LName    | PhoneNumber | ManagerID | DepartmentId | Salary | HireDate            |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n|  2 | John     | Johnson  | 334573457   |         1 |            1 |    600 | 2005-05-23 00:00:00 |\n|  3 | Micheal  | Williams | 135791131   |         1 |            2 |    600 | 2009-05-12 00:00:00 |\n|  4 | Jonathon | Smith    | 12121212    |         2 |            1 |    500 | 2016-07-24 00:00:00 |\n+----+----------+----------+-------------+-----------+--------------+--------+---------------------+\n3 rows in set (0.04 sec)</pre></sn>","topic_id":837,"last_visited":"2025-04-09T06:03:09.020Z"}],"chapter_id":218}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-03-24T10:27:26.644Z","is_private":false,"folder":"Programming","web_url":"http://qdoc.free.nf","nameKeys":["chapter_name","topic_name"],"last_update_on":"2025-04-09T06:03:13.583Z"}