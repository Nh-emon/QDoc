{"subject_name":"SQL","subject_id":58,"chapters":[{"chapter_name":"06.SELECT","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>SELECT</h3><p>The SELECT statement is at the heart of most SQL queries. It defines what result set should be returned by the query, and is almost always used in conjunction with the FROM clause, which defines what part(s) of the database should be queried</p><p>go to this <a target=\"_blank\" href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_or\">page</a>and practise sql code</p></sn>","topic_id":773,"last_visited":"2025-03-24T11:08:20.021Z"},{"topic_name":"01.Select All Columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n## **Using the Wildcard Character to Select All Columns in a Query**\n\n#### Syntax\n\n```sql\nSELECT COLUMN.. FROM Table\n```\n\n### **Database Structure**\n\n**Employees table:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n**Departments table:**\n\n| Id | Name       |\n|----|------------|\n| 1  | Sales      |\n| 2  | Marketing  |\n| 3  | Finance    |\n| 4  | IT         |\n\n---\n\n### **Simple SELECT Statement**\n\n---\n\n\nThe `*` wildcard character is used to **select all available columns** in a table.\n\n- When used instead of explicit column names, it returns **all columns** from the tables specified in the `FROM` clause and any tables joined.\n  \n**Example Query:**\n```sql\nSELECT * FROM Employees;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n---\n\n### **Dot Notation**\n\nTo select all values from a specific table while joining, use **dot notation**:\n\n**Example Query:**\n```sql\nSELECT\n  Employees.*,\n  Departments.Name\nFROM\n  Employees\nJOIN\n  Departments\nON Departments.Id = Employees.DeptId;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId | Name    |\n|----|------|-------|--------|--------|\n| 1  | James | Smith | 3      | Finance |\n| 2  | John  | Johnson | 4    | IT      |\n\n---\n\n### **Warnings Against Use of `*`**\n\nIt is generally **advised to avoid using `*` in production code** due to potential issues:\n\n1. **Excess Resource Usage**:  \n   - Increases I/O, network load, memory usage by fetching unnecessary columns (e.g., large fields like notes/files).\n  \n2. **Internal Disk Spooling**:  \n   - May cause extra I/O if intermediate results are written to disk during complex query processing.\n\n3. **Unnecessary Processing**:  \n   - Includes unneeded columns such as:\n     - Computed columns.\n     - Columns from views/tables that could be optimized out.\n\n4. **Ambiguous Column Names**:  \n   - If columns are added later, duplicate column names can cause errors.  \n   - Example:\n     ```sql\n     SELECT * \n     FROM orders \n     JOIN people ON people.id = orders.personid \n     ORDER BY displayname;\n     ```\n     If `displayname` is added to both tables, ambiguity or unexpected behavior may occur.\n\n---\n\n### **When Is It Acceptable to Use `*`?**\n\n- **Manual Queries / Investigation / Prototyping**:  \n  Fine for quick checks and exploration.\n  \n- **Design Necessities**:  \n  If unavoidable, prefer `tablealias.*` over plain `*`.\n\n- **In `EXISTS` Clauses**:  \n  Example:\n  ```sql\n  SELECT A.col1, A.col2 \n  FROM A \n  WHERE EXISTS (SELECT * FROM B WHERE A.ID = B.A_ID);\n  ```\n  No data is returned from table B, so using `*` here is safe.\n\n- **In `COUNT(*)` Queries**:  \n  Safe, as it does not return columns but counts rows.\n</md></sn>","topic_id":774,"last_visited":"2025-03-24T13:25:16.132Z"},{"topic_name":"02.Select Using Column Aliases","topic_html":"<sn><pre data-v=\"sql\">-- Preferred standard syntax (best practice, portable)\nSELECT column AS c1 FROM Table;\n\n-- Standard SQL (supports spaces/reserved words in alias)\nSELECT column AS \"c1\" FROM Table;\n\n-- SQL Server specific: uses single quotes for alias (less common)\nSELECT column AS 'c1' FROM Table;\n\n-- SQL Server specific: uses square brackets for alias\nSELECT column AS [c1] FROM Table;\n\n-- SQL Server specific non-standard syntax (discouraged)\nSELECT c1 = column FROM Table;\n</pre></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## **SELECT Using Column Aliases**\n\n### **Purpose of Column Aliases**\nColumn aliases are used to:\n- **Shorten code** and improve readability.\n- **Avoid repetitive long table names**.\n- **Clarify column names**, especially when tables have multiple similar columns (e.g., two IDs).\n- **Assign names to computed columns** (required in views and complex queries).\n\nUsing aliases allows database structures to use longer, descriptive names, while keeping queries concise.\n\n---\n\n### **Syntax: All SQL Versions**\n\nColumn aliases can be created using **double quotes (\"\")**:\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS \"Middle Name\",\n  LName AS \"Last Name\"\nFROM Employees;\n```\n\n---\n\n### **SQL Server Specific Syntax**\n\nIn **Microsoft SQL Server**, aliases can be created using:\n- Single quotes (`'`)\n- Double quotes (`\"`)\n- Square brackets (`[]`)\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS 'Middle Name',\n  LName AS [Last Name]\nFROM Employees;\n```\n\n**Result:**\n\n| First Name | Middle Name | Last Name |\n|-----------|------------|---------|\n| James     | John        | Smith   |\n| John      | James       | Johnson |\n| Michael   | Marcus      | Williams |\n\n---\n\n### **Without AS Operator**\n\nYou can omit the `AS` keyword. The following query produces the same result:\n\n```sql\nSELECT\n  FName \"First Name\",\n  MName \"Middle Name\",\n  LName \"Last Name\"\nFROM Employees;\n```\n\nHowever, **using `AS` is more readable and recommended.**\n\n---\n\n### **Single-Word Aliases Without Quotes**\n\nIf the alias is:\n- A single word\n- Not a reserved word  \nYou can skip quotes/brackets:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees;\n```\n\n**Result:**\n\n| FirstName | LastName |\n|----------|--------|\n| James    | Smith  |\n| John     | Johnson|\n| Michael  | Williams|\n\n---\n\n### **Alternate Syntax (SQL Server Specific)**\n\nIn **SQL Server**, you can use the format:\n\n```\n&lt;alias&gt; = &lt;column/calculation&gt;\n```\n\n**Example:**\n\n```sql\nSELECT\n  FullName = FirstName + ' ' + LastName,\n  Addr1 = FullStreetAddress,\n  Addr2 = TownName\nFROM CustomerDetails;\n```\n\nEquivalent to:\n\n```sql\nSELECT\n  FirstName + ' ' + LastName AS FullName,\n  FullStreetAddress AS Addr1,\n  TownName AS Addr2\nFROM CustomerDetails;\n```\n\n**Result:**\n\n| FullName         | Addr1           | Addr2         |\n|------------------|----------------|--------------|\n| James Smith      | 123 AnyStreet  | TownVille    |\n| John Johnson     | 668 MyRoad     | Anytown      |\n| Michael Williams | 999 High End Dr| Williamsburgh|\n\n**Note:**  \nWhile the `=` syntax may seem easier, it's **not standard SQL** and may cause confusion or compatibility issues.\n\n---\n\n### **Escaping Reserved Words as Aliases**\n\nReserved words (like `SELECT`, `FROM`, `WHERE`) can be used as aliases by escaping them:\n\n```sql\n-- All SQL versions\nSELECT\n  FName AS \"SELECT\",\n  MName AS \"FROM\",\n  LName AS \"WHERE\"\nFROM Employees;\n```\n\n```sql\n-- SQL Server variations\nSELECT\n  FName AS \"SELECT\",\n  MName AS 'FROM',\n  LName AS [WHERE]\nFROM Employees;\n```\n\n**Result:**\n\n| SELECT | FROM  | WHERE  |\n|--------|------|-------|\n| James  | John | Smith |\n| John   | James| Johnson|\n| Michael| Marcus| Williams|\n\n---\n\n### **Using Aliases in ORDER BY**\n\nColumn aliases can also be used in the `ORDER BY` clause:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees\nORDER BY LastName DESC;\n```\n\n---\n\n### **Important Warning: Reserved Words**\n\nDo **not** use reserved keywords like `SELECT` or `FROM` as aliases without proper escaping:\n\n```sql\nSELECT\n  FName AS SELECT,  -- ❌ Incorrect\n  LName AS FROM     -- ❌ Incorrect\nFROM Employees\nORDER BY LastName DESC;\n```\n\nThis will **cause errors** during execution.</md></sn>","topic_id":775,"last_visited":"2025-03-24T13:23:20.307Z"},{"topic_name":"03.Select Individual Columns","topic_html":"<sn class=\"bar teal\"><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Select Individual Columns\n\n#### Basic Column Selection\n---\n\n```sql\nSELECT\n    PhoneNumber,\n    Email,\n    PreferredContact\nFROM Customers;\n```\n- **Description**:  \n  This statement returns the `PhoneNumber`, `Email`, and `PreferredContact` columns from all rows of the `Customers` table.\n- **Note**:  \n  Columns will appear in the same sequence as listed in the `SELECT` clause.\n\n**Result Example**:\n\n| PhoneNumber | Email                    | PreferredContact |\n|------------|-------------------------|------------------|\n| 3347927472 | william.jones@example.com | PHONE           |\n| 2137921892 | dmiller@example.net       | EMAIL           |\n| NULL       | richard0123@example.com   | EMAIL           |\n\n---\n\n### Selecting Columns from Multiple Tables\nYou can select specific columns from joined tables using the format `[table_name].[column_name]`.\n\n```sql\nSELECT\n    Customers.PhoneNumber,\n    Customers.Email,\n    Customers.PreferredContact,\n    Orders.Id AS OrderId\nFROM\n    Customers\nLEFT JOIN\n    Orders ON Orders.CustomerId = Customers.Id;\n```\n\n- **Explanation**:\n  - `Orders.Id AS OrderId`: The `Id` field of the `Orders` table will be returned with the alias **OrderId**.\n  - **Column Aliases**: Useful for renaming columns in the result.\n\n---\n\n### Using Table Aliases\nTo avoid writing long table names repeatedly (especially in joins), **table aliases** are used.\n\n**Example with Aliases**:\n```sql\nSELECT\n    c.PhoneNumber,\n    c.Email,\n    c.PreferredContact,\n    o.Id AS OrderId\nFROM\n    Customers AS c\nLEFT JOIN\n    Orders AS o ON o.CustomerId = c.Id;\n```\n- **Alias Usage**:\n  - `Customers AS c`: `c` is an alias for `Customers`.\n  - `Orders AS o`: `o` is an alias for `Orders`.\n  - Fields are now accessed like `c.Email` or `o.Id`.\n- **Note**:  \n  In **self joins**, aliases are mandatory to distinguish between the two instances of the same table.\n</md></sn>","topic_id":776,"last_visited":"2025-03-24T14:37:20.303Z"},{"topic_name":"08.Selecting with table alias","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Selecting with Table Alias\n\n#### Basic Alias Usage\n\n---\n\n```sql\nSELECT e.Fname, e.LName\nFROM Employees e;\n```\n- **Explanation**:  \n  The `Employees` table is given the alias **e** directly after the table name. This helps avoid ambiguity, especially when multiple tables share the same field name. It specifies which table’s data is being referenced.\n\n---\n\n### Using Table Alias in Joins\n\n```sql\nSELECT e.Fname, e.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Explanation**:\n  - `e.Fname`, `e.LName`: Fields from the `Employees` table.\n  - `m.Fname AS ManagerFirstName`: Renames the `Fname` field from the `Managers` table to `ManagerFirstName` for clarity.\n  - **Join**: The tables `Employees` and `Managers` are joined on `ManagerId` and `Id`.\n\n---\n\n### Restrictions on Table Alias Usage\n\n```sql\nSELECT e.Fname, Employees.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Error Explanation**:  \n  Once you define an alias (e.g., `e` for `Employees`), you cannot use the canonical table name (`Employees`) anymore. The query above would throw an error.\n\n---\n\n### Table Aliases in the 1992 SQL Standard\n\nTable aliases, more formally known as **range variables**, were introduced to resolve the issue of duplicate column names caused by `INNER JOIN` operations. \n\n- **NATURAL JOIN** (introduced in SQL 1992):  \n  This join type automatically resolves column name conflicts. It is supported by databases like MySQL, PostgreSQL, and Oracle but is not available in SQL Server.\n  \n  Example using `NATURAL JOIN`:\n\n```sql\nSELECT Fname, LName, ManagerFirstName\nFROM Employees\nNATURAL JOIN\n    (SELECT Id AS ManagerId, Fname AS ManagerFirstName\n     FROM Managers) m;\n```\n- **Explanation**:  \n  - `NATURAL JOIN`: Automatically resolves column name conflicts when columns share the same name (like `Fname` or `LName`) between the two tables.\n  - **Alias for Derived Table**: The subquery for `Managers` uses the alias `m`, which is required, but does not affect the query logic.</md></sn>","topic_id":777,"last_visited":"2025-03-24T15:53:52.922Z"}],"chapter_id":200},{"chapter_name":"01.Getting Started with SQL","topics":[{"topic_name":"chapterList","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n### Chapter List\n\n---\n\n| Index | Chapter Name                                | Description                                                                 |\n|------:|:--------------------------------------------|:---------------------------------------------------------------------------|\n| 1     | Getting Started with SQL                   | Introduction to SQL basics, syntax, and setup.                              |\n| 2     | Identifier                                 | Rules and conventions for naming database objects.                         |\n| 3     | Data Types                                 | Overview of data types used in SQL.                                         |\n| 4     | Null                                       | Understanding NULL values in SQL.                                           |\n| 5     | Example Databases and Tables               | Sample databases and tables for practice.                                   |\n| 6     | SELECT                                     | Retrieving data from databases using SELECT.                                |\n| 7     | GROUP BY                                   | Grouping rows based on column values.                                       |\n| 8     | ORDER BY                                   | Sorting query results.                                                     |\n| 9     | AND OR Operators                           | Using logical AND &amp; OR in conditions.                                       |\n| 10    | CASE                                       | Conditional logic in SQL queries.                                           |\n| 11    | LIKE operator                              | Pattern matching in queries.                                               |\n| 12    | IN clause                                  | Checking if a value exists in a list.                                       |\n| 13    | Filter results using WHERE and HAVING      | Filtering data with WHERE and HAVING clauses.                               |\n| 14    | SKIP TAKE (Pagination)                     | Limiting and skipping records (Pagination).                                 |\n| 15    | EXCEPT                                     | Returning differences between queries.                                     |\n| 16    | EXPLAIN and DESCRIBE                       | Understanding query plans and table structures.                             |\n| 17    | EXIST CLAUSE                               | Checking for the existence of records.                                     |\n| 18    | JOIN                                       | Combining rows from multiple tables.                                       |\n| 19    | UPDATE                                     | Modifying existing records.                                                |\n| 20    | CREATE Database                            | Creating a new database.                                                   |\n| 21    | CREATE TABLE                               | Defining a new table structure.                                            |\n| 22    | CREATE FUNCTION                            | Creating user-defined functions.                                           |\n| 23    | TRY CATCH                                  | Error handling in SQL.                                                     |\n| 24    | UNION UNION ALL                            | Combining results from multiple queries.                                   |\n| 25    | ALTER TABLE                                | Modifying table structure.                                                 |\n| 26    | INSERT                                     | Inserting new records.                                                     |\n| 27    | MERGE                                      | Performing UPSERT (Insert/Update/Delete).                                   |\n| 28    | cross apply outer apply                    | Applying table-valued functions.                                           |\n| 29    | DELETE                                     | Removing records from a table.                                             |\n| 30    | TRUNCATE                                   | Removing all records quickly.                                              |\n| 31    | DROP Table                                 | Deleting a table.                                                          |\n| 32    | DROP or DELETE Database                    | Removing an entire database.                                               |\n| 33    | Cascading Delete                           | Automatically deleting related records.                                    |\n| 34    | GRANT and REVOKE                           | Managing user permissions.                                                 |\n| 35    | XML                                        | Handling XML data in SQL.                                                  |\n| 36    | Primary Keys                               | Ensuring unique row identification.                                        |\n| 37    | Indexes                                    | Speeding up data retrieval.                                                |\n| 38    | Row number                                 | Assigning row numbers in query results.                                    |\n| 39    | SQL Group By vs Distinct                   | Comparing GROUP BY and DISTINCT usage.                                     |\n| 40    | Finding Duplicates on a Column Subset      | Identifying duplicate records.                                             |\n| 41    | String Functions                           | Functions for string manipulation.                                         |\n| 42    | Functions (Aggregate)                      | Performing calculations on multiple rows.                                  |\n| 43    | Functions (Scalar/Single Row)              | Returning a single value per row.                                          |\n| 44    | Functions (Analytic)                       | Advanced calculations across result sets.                                  |\n| 45    | Window Functions                           | Performing calculations across a window of rows.                           |\n| 46    | Common Table Expressions                   | Defining temporary result sets.                                            |\n| 47    | Views                                      | Creating virtual tables.                                                   |\n| 48    | Materialized Views                         | Views that store query results physically.                                 |\n| 49    | Comments                                   | Adding comments in SQL code.                                               |\n| 50    | Foreign Keys                               | Defining relationships between tables.                                     |\n| 51    | Sequence                                   | Auto-generating numeric sequences.                                         |\n| 52    | Subqueries                                 | Using queries inside other queries.                                        |\n| 53    | Execution blocks                           | Grouping SQL statements together.                                          |\n| 54    | Stored Procedures                          | Reusable SQL blocks for tasks.                                             |\n| 55    | Triggers                                   | Automatic actions on table events.                                         |\n| 56    | Transactions                               | Managing database operations as a unit.                                    |\n| 57    | Table Design                               | Best practices for structuring tables.                                     |\n| 58    | Synonyms                                   | Alternate names for database objects.                                      |\n| 59    | Information Schema                         | Accessing metadata about the database.                                     |\n| 60    | Order of Execution                         | Understanding SQL query execution order.                                   |\n| 61    | Clean Code in SQL                          | Writing readable and maintainable SQL.                                     |\n| 62    | SQL Injection                              | Protecting against malicious SQL code.                                     |</md></sn>","topic_id":778,"last_visited":"2025-03-24T16:53:25.221Z"}],"chapter_id":201}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-03-24T10:27:26.644Z","is_private":false,"folder":"Programming","web_url":"http://qdoc.free.nf","nameKeys":["chapter_name","topic_name"],"last_update_on":"2025-03-24T16:53:27.662Z"}