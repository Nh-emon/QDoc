{"subject_name":"SQL","subject_id":58,"chapters":[{"chapter_name":"01.Getting Started with SQL","topics":[{"topic_name":"chapterList","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n### Chapter List\n\n---\n\n| Index | Chapter Name                                | Description                                                                 |\n|------:|:--------------------------------------------|:---------------------------------------------------------------------------|\n| 1     | Getting Started with SQL                   | Introduction to SQL basics, syntax, and setup.                              |\n| 2     | Identifier                                 | Rules and conventions for naming database objects.                         |\n| 3     | Data Types                                 | Overview of data types used in SQL.                                         |\n| 4     | Null                                       | Understanding NULL values in SQL.                                           |\n| 5     | Example Databases and Tables               | Sample databases and tables for practice.                                   |\n| 6     | SELECT                                     | Retrieving data from databases using SELECT.                                |\n| 7     | GROUP BY                                   | Grouping rows based on column values.                                       |\n| 8     | ORDER BY                                   | Sorting query results.                                                     |\n| 9     | AND OR Operators                           | Using logical AND &amp; OR in conditions.                                       |\n| 10    | CASE                                       | Conditional logic in SQL queries.                                           |\n| 11    | LIKE operator                              | Pattern matching in queries.                                               |\n| 12    | IN clause                                  | Checking if a value exists in a list.                                       |\n| 13    | Filter results using WHERE and HAVING      | Filtering data with WHERE and HAVING clauses.                               |\n| 14    | SKIP TAKE (Pagination)                     | Limiting and skipping records (Pagination).                                 |\n| 15    | EXCEPT                                     | Returning differences between queries.                                     |\n| 16    | EXPLAIN and DESCRIBE                       | Understanding query plans and table structures.                             |\n| 17    | EXIST CLAUSE                               | Checking for the existence of records.                                     |\n| 18    | JOIN                                       | Combining rows from multiple tables.                                       |\n| 19    | UPDATE                                     | Modifying existing records.                                                |\n| 20    | CREATE Database                            | Creating a new database.                                                   |\n| 21    | CREATE TABLE                               | Defining a new table structure.                                            |\n| 22    | CREATE FUNCTION                            | Creating user-defined functions.                                           |\n| 23    | TRY CATCH                                  | Error handling in SQL.                                                     |\n| 24    | UNION UNION ALL                            | Combining results from multiple queries.                                   |\n| 25    | ALTER TABLE                                | Modifying table structure.                                                 |\n| 26    | INSERT                                     | Inserting new records.                                                     |\n| 27    | MERGE                                      | Performing UPSERT (Insert/Update/Delete).                                   |\n| 28    | cross apply outer apply                    | Applying table-valued functions.                                           |\n| 29    | DELETE                                     | Removing records from a table.                                             |\n| 30    | TRUNCATE                                   | Removing all records quickly.                                              |\n| 31    | DROP Table                                 | Deleting a table.                                                          |\n| 32    | DROP or DELETE Database                    | Removing an entire database.                                               |\n| 33    | Cascading Delete                           | Automatically deleting related records.                                    |\n| 34    | GRANT and REVOKE                           | Managing user permissions.                                                 |\n| 35    | XML                                        | Handling XML data in SQL.                                                  |\n| 36    | Primary Keys                               | Ensuring unique row identification.                                        |\n| 37    | Indexes                                    | Speeding up data retrieval.                                                |\n| 38    | Row number                                 | Assigning row numbers in query results.                                    |\n| 39    | SQL Group By vs Distinct                   | Comparing GROUP BY and DISTINCT usage.                                     |\n| 40    | Finding Duplicates on a Column Subset      | Identifying duplicate records.                                             |\n| 41    | String Functions                           | Functions for string manipulation.                                         |\n| 42    | Functions (Aggregate)                      | Performing calculations on multiple rows.                                  |\n| 43    | Functions (Scalar/Single Row)              | Returning a single value per row.                                          |\n| 44    | Functions (Analytic)                       | Advanced calculations across result sets.                                  |\n| 45    | Window Functions                           | Performing calculations across a window of rows.                           |\n| 46    | Common Table Expressions                   | Defining temporary result sets.                                            |\n| 47    | Views                                      | Creating virtual tables.                                                   |\n| 48    | Materialized Views                         | Views that store query results physically.                                 |\n| 49    | Comments                                   | Adding comments in SQL code.                                               |\n| 50    | Foreign Keys                               | Defining relationships between tables.                                     |\n| 51    | Sequence                                   | Auto-generating numeric sequences.                                         |\n| 52    | Subqueries                                 | Using queries inside other queries.                                        |\n| 53    | Execution blocks                           | Grouping SQL statements together.                                          |\n| 54    | Stored Procedures                          | Reusable SQL blocks for tasks.                                             |\n| 55    | Triggers                                   | Automatic actions on table events.                                         |\n| 56    | Transactions                               | Managing database operations as a unit.                                    |\n| 57    | Table Design                               | Best practices for structuring tables.                                     |\n| 58    | Synonyms                                   | Alternate names for database objects.                                      |\n| 59    | Information Schema                         | Accessing metadata about the database.                                     |\n| 60    | Order of Execution                         | Understanding SQL query execution order.                                   |\n| 61    | Clean Code in SQL                          | Writing readable and maintainable SQL.                                     |\n| 62    | SQL Injection                              | Protecting against malicious SQL code.                                     |</md></sn>","topic_id":778,"last_visited":"2025-03-26T06:20:39.073Z"}],"chapter_id":201},{"chapter_name":"02.Identifier","topics":[{"topic_name":"Case sensitive vs Insensitive","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Case-Sensitive vs Case-Insensitive in Programming**  \n\n#### **üîπ Case-Sensitive**  \n- **Definition**: Case matters, meaning `Variable`, `variable`, and `VARIABLE` are treated as different identifiers.  \n- **Examples**:  \n  - **Programming Languages**: C, C++, Java, JavaScript, Python  \n  - **Variables**:  \n    ```c\n    int Value = 10;\n    int value = 20;\n    printf(\"%d\", Value); // 10\n    ```\n  - **Functions**:  \n    ```python\n    def MyFunction():\n        print(\"Hello\")\n\n    myfunction()  # ‚ùå Error (function names are case-sensitive)\n    ```\n  - **Usernames &amp; Passwords**:  \n    - `\"Admin\"` ‚â† `\"admin\"`  \n\n---\n\n#### **üîπ Case-Insensitive**  \n- **Definition**: Case does **not** matter, meaning `variable`, `Variable`, and `VARIABLE` are treated the same.  \n- **Examples**:  \n  - **Languages with Case-Insensitive Keywords**: SQL, HTML, Windows CMD  \n  - **SQL Queries**:  \n    ```sql\n    SELECT * FROM users;\n    select * from USERS;  -- ‚úÖ Both work\n    ```\n  - **HTML Tags**:  \n    ```html\n    &lt;TITLE&gt;My Page&lt;/TITLE&gt;\n    &lt;title&gt;My Page&lt;/title&gt;  &lt;!-- ‚úÖ Both are valid --&gt;\n    ```\n  - **Windows File System**:  \n    - `File.txt` = `file.TXT` (same file)  \n\n---\n\n#### **üîπ Comparison Table**  \n\n| Feature          | Case-Sensitive  | Case-Insensitive |\n|----------------|---------------|----------------|\n| **Languages** | Python, Java, C++ | SQL, HTML, BASIC |\n| **Variables** | `Var` ‚â† `var` | `Var` = `var` |\n| **Functions** | `MyFunc()` ‚â† `myfunc()` | `MyFunc()` = `myfunc()` |\n| **File Systems** | Linux (case-sensitive) | Windows (case-insensitive) |\n| **Usernames** | `JohnDoe` ‚â† `johndoe` | `JohnDoe` = `johndoe` |\n\n---\n\n### **üîπ Summary**\n- **Use Case-Sensitivity** when precision is needed (e.g., programming variables, function names).  \n- **Use Case-Insensitivity** for flexibility (e.g., SQL queries, user input, HTML tags).  \n</md></sn>","topic_id":794,"last_visited":"2025-03-28T05:17:26.470Z"},{"topic_name":"Unquoted identifiers","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Unquoted Identifiers**\n---  \nUnquoted identifiers follow these rules:  \n- Can use letters (**a-z**), digits (**0-9**), and underscore (**_**).  \n- Must start with a **letter**.  \n- Some SQL implementations allow additional characters, even as the first character:  \n\n  - **MS SQL**: `@`, `$`, `#`, and other Unicode letters.  \n  - **MySQL**: `$`.  \n  - **Oracle**: `$`, `#`, and other letters from the database character set.  \n  - **PostgreSQL**: `$` and other Unicode letters.  \n\n#### **Case Sensitivity of Unquoted Identifiers**  \nUnquoted identifiers are case-insensitive, but handling varies by SQL implementation:  \n\n- **MS SQL**: Case-preserving, sensitivity depends on the database character set.  \n- **MySQL**: Case-preserving, sensitivity depends on database settings and file system.  \n- **Oracle**: Converted to **uppercase**, then treated like a quoted identifier.  \n- **PostgreSQL**: Converted to **lowercase**, then treated like a quoted identifier.  \n- **SQLite**: Case-preserving; case insensitivity applies only to **ASCII** characters.  </md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **SQL Identifiers Explained with Examples**  \n\n#### **1Ô∏è‚É£ Unquoted Identifiers Rules**  \n\nUnquoted identifiers can include **letters (a-z)**, **digits (0-9)**, and **underscore (_)**, but **must start with a letter**. Some SQL implementations allow additional characters.  \n\n‚úÖ **Valid Examples:**  \n```sql\nCREATE TABLE customers (id INT, first_name VARCHAR(50), last_name VARCHAR(50));\nCREATE TABLE employee_data (emp_id INT, salary DECIMAL(10,2));\n```\n\n‚ùå **Invalid Example:**  \n```sql\nCREATE TABLE 123table (id INT, name VARCHAR(50)); -- ‚ùå Cannot start with a digit\nCREATE TABLE @users (id INT, name VARCHAR(50));   -- ‚ùå @ is not allowed in standard SQL\n```\n\n---\n\n#### **2Ô∏è‚É£ Additional Allowed Characters in Different SQL Implementations**  \n\nSome SQL databases allow special characters like `$`, `@`, and `#`.  \n\n‚úÖ **Examples in Different SQL Implementations:**  \n\n- **MS SQL:**  \n  ```sql\n  CREATE TABLE #temp_table (id INT, value VARCHAR(50)); -- Uses #\n  CREATE TABLE @user_table (id INT, name VARCHAR(50)); -- Uses @\n  ```\n- **MySQL:**  \n  ```sql\n  CREATE TABLE $accounts (id INT, balance DECIMAL(10,2)); -- Allowed\n  ```\n- **Oracle:**  \n  ```sql\n  CREATE TABLE #departments (dept_id INT, dept_name VARCHAR(50)); -- Allowed\n  ```\n- **PostgreSQL:**  \n  ```sql\n  CREATE TABLE $sales (order_id INT, amount DECIMAL(10,2)); -- Allowed\n  ```\n\n---\n\n#### **3Ô∏è‚É£ Case Sensitivity in Different SQL Implementations**  \n\nUnquoted identifiers are case-insensitive, but different SQL databases handle them differently.\n\n‚úÖ **MS SQL (Case-Preserving, Case-Sensitive Depending on Database Settings)**  \n```sql\nCREATE TABLE Employees (id INT, Name VARCHAR(50));\nSELECT name FROM Employees; -- May or may not work, depending on collation\n```\n\n‚úÖ **MySQL (Case-Preserving, Case Sensitivity Depends on File System)**  \n```sql\nCREATE TABLE Users (id INT, email VARCHAR(100));\nSELECT email FROM users; -- Works on Windows (case-insensitive)\nSELECT email FROM Users; -- Works everywhere\n```\n\n‚úÖ **Oracle (Converted to Uppercase)**  \n```sql\nCREATE TABLE employees (id INT, salary DECIMAL(10,2));\nSELECT * FROM employees;  -- Works\nSELECT * FROM EMPLOYEES;  -- Works\n```\n\n‚úÖ **PostgreSQL (Converted to Lowercase)**  \n```sql\nCREATE TABLE Employees (id INT, department VARCHAR(50));\nSELECT * FROM employees;  -- Works\nSELECT * FROM Employees;  -- Fails unless double-quoted\n```\n\n‚úÖ **SQLite (Case-Preserving, Case-Insensitive for ASCII Characters)**  \n```sql\nCREATE TABLE Customers (id INT, city VARCHAR(50));\nSELECT * FROM customers;  -- Works\nSELECT * FROM Customers;  -- Works\n```\n\n---\n\n#### **üîπ Summary Table**\n| SQL Database | Case Handling for Unquoted Identifiers |\n|-------------|----------------------------------|\n| **MS SQL** | Case-preserving, sensitivity depends on collation |\n| **MySQL** | Case-preserving, sensitivity depends on file system |\n| **Oracle** | Converts to **uppercase** |\n| **PostgreSQL** | Converts to **lowercase** |\n| **SQLite** | Case-preserving; case-insensitive for ASCII |\n\nThis explanation should clarify SQL identifier rules with practical examples. üöÄ</md></sn>","topic_id":793,"last_visited":"2025-03-28T05:05:22.266Z"}],"chapter_id":206},{"chapter_name":"03.Data Types","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **SQL Data Types**\n---  \n\nSQL data types define the **type of data** a column can store. They help ensure **data integrity** and **efficient storage**.  \n\n---\n\n### **1Ô∏è‚É£ Main Categories of SQL Data Types**  \n\nüîπ **Numeric Data Types** ‚Üí Store numbers (integers, decimals, floating-point).  \nüîπ **String Data Types** ‚Üí Store text (fixed or variable length).  \nüîπ **Date &amp; Time Data Types** ‚Üí Store date, time, and timestamps.  \nüîπ **Boolean Data Types** ‚Üí Store `TRUE` or `FALSE`.  \nüîπ **Binary Data Types** ‚Üí Store images, files, and other binary data.  \nüîπ **Other Data Types** ‚Üí XML, JSON, and special types depending on the database.  \n\n---\n\n### **2Ô∏è‚É£ SQL Data Types Table**  \n\n| **Data Type**      | **Description** |\n|--------------------|---------------|\n| **üîπ Numeric Data Types** | |\n| `INT` / `INTEGER`  | Whole numbers (e.g., 1, 100, -50) |\n| `BIGINT`  | Large whole numbers (use for big datasets) |\n| `SMALLINT` | Smaller whole numbers (saves space) |\n| `DECIMAL(p,s)` / `NUMERIC(p,s)` | Fixed precision and scale (e.g., `DECIMAL(5,2)` ‚Üí 999.99) |\n| `FLOAT` / `REAL`  | Approximate floating-point numbers |\n| **üîπ String Data Types** | |\n| `CHAR(n)` | Fixed-length text (e.g., `CHAR(10)`) |\n| `VARCHAR(n)` | Variable-length text (e.g., `VARCHAR(255)`) |\n| `TEXT` | Large text storage (size depends on SQL implementation) |\n| **üîπ Date &amp; Time Data Types** | |\n| `DATE` | Stores date (YYYY-MM-DD) |\n| `TIME` | Stores time (HH:MI:SS) |\n| `DATETIME` | Stores both date and time |\n| `TIMESTAMP` | Auto-updating date-time (useful for logging) |\n| **üîπ Boolean Data Types** | |\n| `BOOLEAN` / `BOOL` | Stores `TRUE` or `FALSE` (1 or 0 in some databases) |\n| **üîπ Binary &amp; Miscellaneous Data Types** | |\n| `BLOB` | Binary Large Object (stores images, files, etc.) |\n| `JSON` | Stores JSON formatted data (MySQL, PostgreSQL support) |\n| `XML` | Stores XML data (SQL Server, PostgreSQL support) |\n\n---\n\n### **3Ô∏è‚É£ Example Table Creation Using Different Data Types**  \n```sql\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    salary DECIMAL(10,2),\n    hire_date DATE,\n    is_active BOOLEAN\n);\n```</md></sn>","topic_id":796,"last_visited":"2025-03-28T06:10:54.727Z"},{"topic_name":"01.DECIMAL and NUMERIC","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **DECIMAL and NUMERIC**  \n---\n#### **Overview**  \n- Used for **fixed precision and scale** decimal numbers.  \n- `DECIMAL` and `NUMERIC` are **functionally equivalent** in SQL.  \n\n#### **Syntax**  \n```sql\nDECIMAL (precision [, scale])\nNUMERIC (precision [, scale])\n```\n- **precision**: Total number of digits.  \n- **scale**: Number of digits after the decimal point.  \n\n#### **Examples**  \n```sql\nSELECT CAST(123 AS DECIMAL(5,2));       -- Returns 123.00\nSELECT CAST(12345.12 AS NUMERIC(10,5)); -- Returns 12345.12000\n```</md></sn>","topic_id":795,"last_visited":"2025-03-28T05:23:00.595Z"},{"topic_name":"02.FLOAT and REAL","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **FLOAT and REAL**  \n---\n#### **Overview**  \n- Used for **approximate-number** data storage.  \n- Suitable for **floating-point numeric data** where exact precision is not required.  \n\n#### **Examples**  \n```sql\nSELECT CAST(PI() AS FLOAT); -- Returns 3.14159265358979\nSELECT CAST(PI() AS REAL);  -- Returns 3.141593\n```</md></sn>","topic_id":797,"last_visited":"2025-03-28T05:48:56.599Z"},{"topic_name":"03.Integers","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Integers**  \n---\n#### **Overview**  \n- **Exact-number** data types used for **integer values** (whole numbers).  \n- Different types provide **varying ranges** and **storage sizes**.  \n\n#### **Integer Data Types**  \n\n| **Data Type** | **Range** | **Storage** |  \n|--------------|-------------------------------------------------|------------|  \n| `BIGINT` | -2‚Å∂¬≥ to 2‚Å∂¬≥-1 (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) | 8 Bytes |  \n| `INT` | -2¬≥¬π to 2¬≥¬π-1 (-2,147,483,648 to 2,147,483,647) | 4 Bytes |  \n| `SMALLINT` | -2¬π‚Åµ to 2¬π‚Åµ-1 (-32,768 to 32,767) | 2 Bytes |  \n| `TINYINT` | 0 to 255 | 1 Byte |  </md></sn>","topic_id":798,"last_visited":"2025-03-28T05:54:17.893Z"},{"topic_name":"04.MONEY and SMALLMONEY","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **MONEY and SMALLMONEY**  \n---\n#### **Overview**  \n- Used to store **monetary or currency values** with fixed precision.  \n- `MONEY` supports **larger ranges**, while `SMALLMONEY` is for **smaller values**.  \n\n#### **Monetary Data Types**  \n\n| **Data Type**  | **Range** | **Storage** |  \n|---------------|-------------------------------------------------|------------|  \n| `MONEY`       | -922,337,203,685,477.5808 to 922,337,203,685,477.5807 | 8 Bytes |  \n| `SMALLMONEY`  | -214,748.3648 to 214,748.3647 | 4 Bytes |  </md></sn>","topic_id":799,"last_visited":"2025-03-28T05:56:49.618Z"},{"topic_name":"05.BINARY and VARBINARY","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **BINARY and VARBINARY**  \n\n#### **Overview**  \n- Used for **binary data storage** (fixed or variable length).  \n- Suitable for **storing images, files, encrypted data, etc.**  \n\n#### **Syntax**  \n```sql\nBINARY (n_bytes)      -- Fixed-length binary data  \nVARBINARY (n_bytes | MAX) -- Variable-length binary data  \n```\n- **n_bytes**: Can be **1 to 8000 bytes**.  \n- **MAX**: Stores up to **2¬≥¬π-1 bytes**.  \n\n#### **Examples**  \n```sql\nSELECT CAST(12345 AS BINARY(10));   -- Returns 0x00000000000000003039  \nSELECT CAST(12345 AS VARBINARY(10)); -- Returns 0x00003039  \n```</md></sn>","topic_id":800,"last_visited":"2025-03-28T06:00:29.656Z"},{"topic_name":"06.CHAR and VARCHAR","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CHAR and VARCHAR**  \n---\n#### **Overview**  \n- Used for **storing string (text) data**.  \n- `CHAR` is **fixed-length**, while `VARCHAR` is **variable-length**.  \n\n#### **Syntax**  \n```sql\nCHAR (n_chars)    -- Fixed-length string  \nVARCHAR (n_chars) -- Variable-length string  \n```\n- **n_chars**: Specifies the **maximum number of characters**.  \n\n#### **Examples**  \n```sql\nSELECT CAST('ABC' AS CHAR(10));     -- 'ABC       ' (padded with spaces)  \nSELECT CAST('ABC' AS VARCHAR(10));  -- 'ABC' (no padding)  \nSELECT CAST('ABCDEFGHIJKLMNOPQRSTUVWXYZ' AS CHAR(10)); -- 'ABCDEFGHIJ' (truncated to 10 characters)  \n```</md></sn>","topic_id":801,"last_visited":"2025-03-28T06:03:37.620Z"},{"topic_name":"07.NCHAR and NVARCHAR","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **NCHAR and NVARCHAR**  \n---\n#### **Overview**  \n- Used for **UNICODE string data**.  \n- `NCHAR` is **fixed-length**, while `NVARCHAR` is **variable-length**.  \n- Suitable for storing characters from multiple languages and special symbols.  \n\n#### **Syntax**  \n```sql\nNCHAR (n_chars)     -- Fixed-length UNICODE string  \nNVARCHAR (n_chars | MAX) -- Variable-length UNICODE string  \n```\n- **n_chars**: Specifies the **maximum number of characters**.  \n- Use **MAX** for strings that may exceed **8000 characters**.  </md></sn>","topic_id":802,"last_visited":"2025-03-28T06:08:13.354Z"},{"topic_name":"08.UNIQUEIDENTIFIER","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **UNIQUEIDENTIFIER**  \n---\n#### **Overview**  \n- A **16-byte GUID (Globally Unique Identifier)** or **UUID (Universally Unique Identifier)**.  \n- Used to uniquely identify records across distributed systems.  \n\n#### **Example Usage**  \n```sql\nDECLARE @GUID UNIQUEIDENTIFIER = NEWID();  \nSELECT @GUID -- Returns a GUID like 'E28B3BD9-9174-41A9-8508-899A78A33540'\n\nDECLARE @bad_GUID_string VARCHAR(100) = 'E28B3BD9-9174-41A9-8508-899A78A33540_foobarbaz';  \nSELECT  \n  @bad_GUID_string, -- 'E28B3BD9-9174-41A9-8508-899A78A33540_foobarbaz'  \n  CONVERT(UNIQUEIDENTIFIER, @bad_GUID_string) -- 'E28B3BD9-9174-41A9-8508-899A78A33540'  \n```</md></sn>","topic_id":803,"last_visited":"2025-03-28T06:14:48.881Z"}],"chapter_id":207},{"chapter_name":"05.Example Databases and Tables","topics":[{"topic_name":"01.Auto Shop Database","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Auto Shop Database**  \n\n---\n\nThis example presents a database for an auto shop business, including **departments, employees, customers, and customer cars**. Foreign keys are used to establish relationships between the tables.  \n\n#### **Relationships Between Tables**  \n- Each **Department** may have **0 or more Employees**.  \n- Each **Employee** may have **0 or 1 Manager**.  \n- Each **Customer** may have **0 or more Cars**.  \n\n---\n\n### **Departments**  \n| Id | Name  |  \n|----|-------|  \n| 1  | HR    |  \n| 2  | Sales |  \n| 3  | Tech  |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Departments (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Name VARCHAR(25) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Departments (Id, Name)\nVALUES\n    (1, 'HR'),\n    (2, 'Sales'),\n    (3, 'Tech');\n```\n\n---\n\n### **Employees**  \n| Id | FName    | LName     | PhoneNumber | ManagerId | DepartmentId | Salary | HireDate  |  \n|----|---------|----------|-------------|-----------|--------------|--------|-----------|  \n| 1  | James   | Smith    | 1234567890  | NULL      | 1            | 1000   | 01-01-2002 |  \n| 2  | John    | Johnson  | 2468101214  | 1         | 1            | 400    | 23-03-2005 |  \n| 3  | Michael | Williams | 1357911131  | 1         | 2            | 600    | 12-05-2009 |  \n| 4  | Johnathon | Smith  | 1212121212  | 2         | 1            | 500    | 24-07-2016 |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Employees (\n    Id INT NOT NULL AUTO_INCREMENT,\n    FName VARCHAR(35) NOT NULL,\n    LName VARCHAR(35) NOT NULL,\n    PhoneNumber VARCHAR(11),\n    ManagerId INT,\n    DepartmentId INT NOT NULL,\n    Salary INT NOT NULL,\n    HireDate DATETIME NOT NULL,\n    PRIMARY KEY(Id),\n    FOREIGN KEY (ManagerId) REFERENCES Employees(Id),\n    FOREIGN KEY (DepartmentId) REFERENCES Departments(Id)\n);\n\nINSERT INTO Employees (Id, FName, LName, PhoneNumber, ManagerId, DepartmentId, Salary, HireDate)\nVALUES\n    (1, 'James', 'Smith', '1234567890', NULL, 1, 1000, '2002-01-01'),\n    (2, 'John', 'Johnson', '2468101214', 1, 1, 400, '2005-03-23'),\n    (3, 'Michael', 'Williams', '1357911131', 1, 2, 600, '2009-05-12'),\n    (4, 'Johnathon', 'Smith', '1212121212', 2, 1, 500, '2016-07-24');\n```\n\n---\n\n### **Customers**  \n| Id | FName   | LName  | Email                     | PhoneNumber | PreferredContact |  \n|----|--------|-------|--------------------------|-------------|------------------|  \n| 1  | William | Jones  | william.jones@example.com | 3347927472  | PHONE            |  \n| 2  | David   | Miller | dmiller@example.net      | 2137921892  | EMAIL            |  \n| 3  | Richard | Davis  | richard0123@example.com  | NULL        | EMAIL            |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Customers (\n    Id INT NOT NULL AUTO_INCREMENT,\n    FName VARCHAR(35) NOT NULL,\n    LName VARCHAR(35) NOT NULL,\n    Email VARCHAR(100) NOT NULL,\n    PhoneNumber VARCHAR(11),\n    PreferredContact VARCHAR(5) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Customers (Id, FName, LName, Email, PhoneNumber, PreferredContact)\nVALUES\n    (1, 'William', 'Jones', 'william.jones@example.com', '3347927472', 'PHONE'),\n    (2, 'David', 'Miller', 'dmiller@example.net', '2137921892', 'EMAIL'),\n    (3, 'Richard', 'Davis', 'richard0123@example.com', NULL, 'EMAIL');\n```\n\n---\n\n### **Cars**  \n| Id | CustomerId | EmployeeId | Model         | Status  | Total Cost |  \n|----|-----------|-----------|--------------|---------|------------|  \n| 1  | 1         | 2         | Ford F-150   | READY   | 230        |  \n| 2  | 1         | 2         | Ford F-150   | READY   | 200        |  \n| 3  | 2         | 1         | Ford Mustang | WAITING | 100        |  \n| 4  | 3         | 3         | Toyota Prius | WORKING | 1254       |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Cars (\n    Id INT NOT NULL AUTO_INCREMENT,\n    CustomerId INT NOT NULL,\n    EmployeeId INT NOT NULL,\n    Model VARCHAR(50) NOT NULL,\n    Status VARCHAR(25) NOT NULL,\n    TotalCost INT NOT NULL,\n    PRIMARY KEY(Id),\n    FOREIGN KEY (CustomerId) REFERENCES Customers(Id),\n    FOREIGN KEY (EmployeeId) REFERENCES Employees(Id)\n);\n\nINSERT INTO Cars (Id, CustomerId, EmployeeId, Model, Status, TotalCost)\nVALUES\n    (1, 1, 2, 'Ford F-150', 'READY', 230),\n    (2, 1, 2, 'Ford F-150', 'READY', 200),\n    (3, 2, 1, 'Ford Mustang', 'WAITING', 100),\n    (4, 3, 3, 'Toyota Prius', 'WORKING', 1254);\n```</md></sn>","topic_id":790,"last_visited":"2025-03-26T14:06:52.556Z"},{"topic_name":"02.Library Database","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Library Database**  \n---\nThis example demonstrates a **library database** that includes **Authors, Books, and BooksAuthors** tables.  \n\n#### **Table Classification**  \n- **Authors** and **Books** are **base tables** as they contain column definitions and data for actual entities.  \n- **BooksAuthors** is a **relationship table** that defines the many-to-many relationship between the **Books** and **Authors** tables.  \n\n#### **Relationships Between Tables**  \n- Each **Author** can have **1 or more Books**.  \n- Each **Book** can have **1 or more Authors**.  \n\n---\n\n### **Authors**  \n| Id | Name                  | Country |  \n|----|-----------------------|---------|  \n| 1  | J.D. Salinger         | USA     |  \n| 2  | F. Scott Fitzgerald   | USA     |  \n| 3  | Jane Austen           | UK      |  \n| 4  | Scott Hanselman       | USA     |  \n| 5  | Jason N. Gaylord      | USA     |  \n| 6  | Pranav Rastogi        | India   |  \n| 7  | Todd Miranda          | USA     |  \n| 8  | Christian Wenz        | USA     |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Authors (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Name VARCHAR(70) NOT NULL,\n    Country VARCHAR(100) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Authors (Name, Country)\nVALUES\n    ('J.D. Salinger', 'USA'),\n    ('F. Scott Fitzgerald', 'USA'),\n    ('Jane Austen', 'UK'),\n    ('Scott Hanselman', 'USA'),\n    ('Jason N. Gaylord', 'USA'),\n    ('Pranav Rastogi', 'India'),\n    ('Todd Miranda', 'USA'),\n    ('Christian Wenz', 'USA');\n```\n\n---\n\n### **Books**  \n| Id | Title                                      |  \n|----|--------------------------------------------|  \n| 1  | The Catcher in the Rye                    |  \n| 2  | Nine Stories                              |  \n| 3  | Franny and Zooey                          |  \n| 4  | The Great Gatsby                          |  \n| 5  | Tender is the Night                       |  \n| 6  | Pride and Prejudice                       |  \n| 7  | Professional ASP.NET 4.5 in C# and VB     |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Books (\n    Id INT NOT NULL AUTO_INCREMENT,\n    Title VARCHAR(50) NOT NULL,\n    PRIMARY KEY(Id)\n);\n\nINSERT INTO Books (Id, Title)\nVALUES\n    (1, 'The Catcher in the Rye'),\n    (2, 'Nine Stories'),\n    (3, 'Franny and Zooey'),\n    (4, 'The Great Gatsby'),\n    (5, 'Tender is the Night'),\n    (6, 'Pride and Prejudice'),\n    (7, 'Professional ASP.NET 4.5 in C# and VB');\n```\n\n---\n\n### **BooksAuthors**  \n| BookId | AuthorId |  \n|--------|---------|  \n| 1      | 1       |  \n| 2      | 1       |  \n| 3      | 1       |  \n| 4      | 2       |  \n| 5      | 2       |  \n| 6      | 3       |  \n| 7      | 4       |  \n| 7      | 5       |  \n| 7      | 6       |  \n| 7      | 7       |  \n| 7      | 8       |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE BooksAuthors (\n    AuthorId INT NOT NULL,\n    BookId INT NOT NULL,\n    FOREIGN KEY (AuthorId) REFERENCES Authors(Id),\n    FOREIGN KEY (BookId) REFERENCES Books(Id)\n);\n\nINSERT INTO BooksAuthors (BookId, AuthorId)\nVALUES\n    (1, 1),\n    (2, 1),\n    (3, 1),\n    (4, 2),\n    (5, 2),\n    (6, 3),\n    (7, 4),\n    (7, 5),\n    (7, 6),\n    (7, 7),\n    (7, 8);\n```\n\n---\n\n### **Examples**  \n#### **View all authors**  \n```sql\nSELECT * FROM Authors;\n```\n#### **View all book titles**  \n```sql\nSELECT * FROM Books;\n```\n#### **View all books and their authors**  \n```sql\nSELECT \n    ba.AuthorId,\n    a.Name AS AuthorName,\n    ba.BookId,\n    b.Title AS BookTitle\nFROM BooksAuthors ba\nINNER JOIN Authors a ON a.Id = ba.AuthorId\nINNER JOIN Books b ON b.Id = ba.BookId;\n```</md></sn>","topic_id":791,"last_visited":"2025-03-26T14:42:12.640Z"},{"topic_name":"03.Countries Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Countries Table**  \n---\nThe **Countries** table is useful in financial applications, especially those involving **currencies and exchange rates**. Many **market data** applications (e.g., Bloomberg, Reuters) require **2-character** and **3-character** country codes along with **currency codes**.  \n\n---\n\n### **Countries Table**  \n| Id | ISO | ISO3 | ISONumeric | Country Name  | Capital     | Continent Code | Currency Code |  \n|----|-----|------|-----------|---------------|-------------|----------------|---------------|  \n| 1  | AU  | AUS  | 36        | Australia     | Canberra    | OC             | AUD           |  \n| 2  | DE  | DEU  | 276       | Germany       | Berlin      | EU             | EUR           |  \n| 3  | IN  | IND  | 356       | India         | New Delhi   | AS             | INR           |  \n| 4  | LA  | LAO  | 418       | Laos          | Vientiane   | AS             | LAK           |  \n| 5  | US  | USA  | 840       | United States | Washington  | NA             | USD           |  \n| 6  | ZW  | ZWE  | 716       | Zimbabwe      | Harare      | AF             | ZWL           |  \n\n#### **SQL Table Creation**  \n```sql\nCREATE TABLE Countries (\n    Id INT NOT NULL AUTO_INCREMENT,\n    ISO VARCHAR(2) NOT NULL,\n    ISO3 VARCHAR(3) NOT NULL,\n    ISONumeric INT NOT NULL,\n    CountryName VARCHAR(64) NOT NULL,\n    Capital VARCHAR(64) NOT NULL,\n    ContinentCode VARCHAR(2) NOT NULL,\n    CurrencyCode VARCHAR(3) NOT NULL,\n    PRIMARY KEY(Id)\n);\n```\n\n#### **SQL Insert Data**  \n```sql\nINSERT INTO Countries (ISO, ISO3, ISONumeric, CountryName, Capital, ContinentCode, CurrencyCode)\nVALUES\n    ('AU', 'AUS', 36, 'Australia', 'Canberra', 'OC', 'AUD'),\n    ('DE', 'DEU', 276, 'Germany', 'Berlin', 'EU', 'EUR'),\n    ('IN', 'IND', 356, 'India', 'New Delhi', 'AS', 'INR'),\n    ('LA', 'LAO', 418, 'Laos', 'Vientiane', 'AS', 'LAK'),\n    ('US', 'USA', 840, 'United States', 'Washington', 'NA', 'USD'),\n    ('ZW', 'ZWE', 716, 'Zimbabwe', 'Harare', 'AF', 'ZWL');\n```</md></sn><sn><p>all practise cmd code is below</p><file>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/sqlassets/sql%20chapter%205%20practise%20cmd%20code.txt^^sql%20chapter%205%20practise%20cmd%20code.txt^^unknown</file></sn>","topic_id":792,"last_visited":"2025-03-26T15:09:20.673Z"}],"chapter_id":205},{"chapter_name":"06.SELECT","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>SELECT</h3><p>The SELECT statement is at the heart of most SQL queries. It defines what result set should be returned by the query, and is almost always used in conjunction with the FROM clause, which defines what part(s) of the database should be queried</p><p>go to this <a target=\"_blank\" href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_or\">page</a>and practise sql code</p></sn>","topic_id":773,"last_visited":"2025-03-24T11:08:20.021Z"},{"topic_name":"01.Select All Columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">\n## **Using the Wildcard Character to Select All Columns in a Query**\n\n#### Syntax\n\n```sql\nSELECT COLUMN.. FROM Table\n```\n\n### **Database Structure**\n\n**Employees table:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n**Departments table:**\n\n| Id | Name       |\n|----|------------|\n| 1  | Sales      |\n| 2  | Marketing  |\n| 3  | Finance    |\n| 4  | IT         |\n\n---\n\n### **Simple SELECT Statement**\n\n---\n\n\nThe `*` wildcard character is used to **select all available columns** in a table.\n\n- When used instead of explicit column names, it returns **all columns** from the tables specified in the `FROM` clause and any tables joined.\n  \n**Example Query:**\n```sql\nSELECT * FROM Employees;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId |\n|----|------|-------|--------|\n| 1  | James | Smith | 3      |\n| 2  | John  | Johnson | 4    |\n\n---\n\n### **Dot Notation**\n\nTo select all values from a specific table while joining, use **dot notation**:\n\n**Example Query:**\n```sql\nSELECT\n  Employees.*,\n  Departments.Name\nFROM\n  Employees\nJOIN\n  Departments\nON Departments.Id = Employees.DeptId;\n```\n**Result:**\n\n| Id | FName | LName  | DeptId | Name    |\n|----|------|-------|--------|--------|\n| 1  | James | Smith | 3      | Finance |\n| 2  | John  | Johnson | 4    | IT      |\n\n---\n\n### **Warnings Against Use of `*`**\n\nIt is generally **advised to avoid using `*` in production code** due to potential issues:\n\n1. **Excess Resource Usage**:  \n   - Increases I/O, network load, memory usage by fetching unnecessary columns (e.g., large fields like notes/files).\n  \n2. **Internal Disk Spooling**:  \n   - May cause extra I/O if intermediate results are written to disk during complex query processing.\n\n3. **Unnecessary Processing**:  \n   - Includes unneeded columns such as:\n     - Computed columns.\n     - Columns from views/tables that could be optimized out.\n\n4. **Ambiguous Column Names**:  \n   - If columns are added later, duplicate column names can cause errors.  \n   - Example:\n     ```sql\n     SELECT * \n     FROM orders \n     JOIN people ON people.id = orders.personid \n     ORDER BY displayname;\n     ```\n     If `displayname` is added to both tables, ambiguity or unexpected behavior may occur.\n\n---\n\n### **When Is It Acceptable to Use `*`?**\n\n- **Manual Queries / Investigation / Prototyping**:  \n  Fine for quick checks and exploration.\n  \n- **Design Necessities**:  \n  If unavoidable, prefer `tablealias.*` over plain `*`.\n\n- **In `EXISTS` Clauses**:  \n  Example:\n  ```sql\n  SELECT A.col1, A.col2 \n  FROM A \n  WHERE EXISTS (SELECT * FROM B WHERE A.ID = B.A_ID);\n  ```\n  No data is returned from table B, so using `*` here is safe.\n\n- **In `COUNT(*)` Queries**:  \n  Safe, as it does not return columns but counts rows.\n</md></sn>","topic_id":774,"last_visited":"2025-03-24T13:25:16.132Z"},{"topic_name":"02.Select Using Column Aliases","topic_html":"<sn><pre data-v=\"sql\">-- Preferred standard syntax (best practice, portable)\nSELECT column AS c1 FROM Table;\n\n-- Standard SQL (supports spaces/reserved words in alias)\nSELECT column AS \"c1\" FROM Table;\n\n-- SQL Server specific: uses single quotes for alias (less common)\nSELECT column AS 'c1' FROM Table;\n\n-- SQL Server specific: uses square brackets for alias\nSELECT column AS [c1] FROM Table;\n\n-- SQL Server specific non-standard syntax (discouraged)\nSELECT c1 = column FROM Table;\n</pre></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## **SELECT Using Column Aliases**\n\n### **Purpose of Column Aliases**\nColumn aliases are used to:\n- **Shorten code** and improve readability.\n- **Avoid repetitive long table names**.\n- **Clarify column names**, especially when tables have multiple similar columns (e.g., two IDs).\n- **Assign names to computed columns** (required in views and complex queries).\n\nUsing aliases allows database structures to use longer, descriptive names, while keeping queries concise.\n\n---\n\n### **Syntax: All SQL Versions**\n\nColumn aliases can be created using **double quotes (\"\")**:\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS \"Middle Name\",\n  LName AS \"Last Name\"\nFROM Employees;\n```\n\n---\n\n### **SQL Server Specific Syntax**\n\nIn **Microsoft SQL Server**, aliases can be created using:\n- Single quotes (`'`)\n- Double quotes (`\"`)\n- Square brackets (`[]`)\n\n```sql\nSELECT\n  FName AS \"First Name\",\n  MName AS 'Middle Name',\n  LName AS [Last Name]\nFROM Employees;\n```\n\n**Result:**\n\n| First Name | Middle Name | Last Name |\n|-----------|------------|---------|\n| James     | John        | Smith   |\n| John      | James       | Johnson |\n| Michael   | Marcus      | Williams |\n\n---\n\n### **Without AS Operator**\n\nYou can omit the `AS` keyword. The following query produces the same result:\n\n```sql\nSELECT\n  FName \"First Name\",\n  MName \"Middle Name\",\n  LName \"Last Name\"\nFROM Employees;\n```\n\nHowever, **using `AS` is more readable and recommended.**\n\n---\n\n### **Single-Word Aliases Without Quotes**\n\nIf the alias is:\n- A single word\n- Not a reserved word  \nYou can skip quotes/brackets:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees;\n```\n\n**Result:**\n\n| FirstName | LastName |\n|----------|--------|\n| James    | Smith  |\n| John     | Johnson|\n| Michael  | Williams|\n\n---\n\n### **Alternate Syntax (SQL Server Specific)**\n\nIn **SQL Server**, you can use the format:\n\n```\n&lt;alias&gt; = &lt;column/calculation&gt;\n```\n\n**Example:**\n\n```sql\nSELECT\n  FullName = FirstName + ' ' + LastName,\n  Addr1 = FullStreetAddress,\n  Addr2 = TownName\nFROM CustomerDetails;\n```\n\nEquivalent to:\n\n```sql\nSELECT\n  FirstName + ' ' + LastName AS FullName,\n  FullStreetAddress AS Addr1,\n  TownName AS Addr2\nFROM CustomerDetails;\n```\n\n**Result:**\n\n| FullName         | Addr1           | Addr2         |\n|------------------|----------------|--------------|\n| James Smith      | 123 AnyStreet  | TownVille    |\n| John Johnson     | 668 MyRoad     | Anytown      |\n| Michael Williams | 999 High End Dr| Williamsburgh|\n\n**Note:**  \nWhile the `=` syntax may seem easier, it's **not standard SQL** and may cause confusion or compatibility issues.\n\n---\n\n### **Escaping Reserved Words as Aliases**\n\nReserved words (like `SELECT`, `FROM`, `WHERE`) can be used as aliases by escaping them:\n\n```sql\n-- All SQL versions\nSELECT\n  FName AS \"SELECT\",\n  MName AS \"FROM\",\n  LName AS \"WHERE\"\nFROM Employees;\n```\n\n```sql\n-- SQL Server variations\nSELECT\n  FName AS \"SELECT\",\n  MName AS 'FROM',\n  LName AS [WHERE]\nFROM Employees;\n```\n\n**Result:**\n\n| SELECT | FROM  | WHERE  |\n|--------|------|-------|\n| James  | John | Smith |\n| John   | James| Johnson|\n| Michael| Marcus| Williams|\n\n---\n\n### **Using Aliases in ORDER BY**\n\nColumn aliases can also be used in the `ORDER BY` clause:\n\n```sql\nSELECT\n  FName AS FirstName,\n  LName AS LastName\nFROM Employees\nORDER BY LastName DESC;\n```\n\n---\n\n### **Important Warning: Reserved Words**\n\nDo **not** use reserved keywords like `SELECT` or `FROM` as aliases without proper escaping:\n\n```sql\nSELECT\n  FName AS SELECT,  -- ‚ùå Incorrect\n  LName AS FROM     -- ‚ùå Incorrect\nFROM Employees\nORDER BY LastName DESC;\n```\n\nThis will **cause errors** during execution.</md></sn>","topic_id":775,"last_visited":"2025-03-24T13:23:20.307Z"},{"topic_name":"03.Select Individual Columns","topic_html":"<sn class=\"bar teal\"><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Select Individual Columns\n\n#### Basic Column Selection\n---\n\n```sql\nSELECT\n    PhoneNumber,\n    Email,\n    PreferredContact\nFROM Customers;\n```\n- **Description**:  \n  This statement returns the `PhoneNumber`, `Email`, and `PreferredContact` columns from all rows of the `Customers` table.\n- **Note**:  \n  Columns will appear in the same sequence as listed in the `SELECT` clause.\n\n**Result Example**:\n\n| PhoneNumber | Email                    | PreferredContact |\n|------------|-------------------------|------------------|\n| 3347927472 | william.jones@example.com | PHONE           |\n| 2137921892 | dmiller@example.net       | EMAIL           |\n| NULL       | richard0123@example.com   | EMAIL           |\n\n---\n\n### Selecting Columns from Multiple Tables\nYou can select specific columns from joined tables using the format `[table_name].[column_name]`.\n\n```sql\nSELECT\n    Customers.PhoneNumber,\n    Customers.Email,\n    Customers.PreferredContact,\n    Orders.Id AS OrderId\nFROM\n    Customers\nLEFT JOIN\n    Orders ON Orders.CustomerId = Customers.Id;\n```\n\n- **Explanation**:\n  - `Orders.Id AS OrderId`: The `Id` field of the `Orders` table will be returned with the alias **OrderId**.\n  - **Column Aliases**: Useful for renaming columns in the result.\n\n---\n\n### Using Table Aliases\nTo avoid writing long table names repeatedly (especially in joins), **table aliases** are used.\n\n**Example with Aliases**:\n```sql\nSELECT\n    c.PhoneNumber,\n    c.Email,\n    c.PreferredContact,\n    o.Id AS OrderId\nFROM\n    Customers AS c\nLEFT JOIN\n    Orders AS o ON o.CustomerId = c.Id;\n```\n- **Alias Usage**:\n  - `Customers AS c`: `c` is an alias for `Customers`.\n  - `Orders AS o`: `o` is an alias for `Orders`.\n  - Fields are now accessed like `c.Email` or `o.Id`.\n- **Note**:  \n  In **self joins**, aliases are mandatory to distinguish between the two instances of the same table.\n</md></sn>","topic_id":776,"last_visited":"2025-03-24T14:37:20.303Z"},{"topic_name":"08.Selecting with table alias","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">## Selecting with Table Alias\n\n#### Basic Alias Usage\n\n---\n\n```sql\nSELECT e.Fname, e.LName\nFROM Employees e;\n```\n- **Explanation**:  \n  The `Employees` table is given the alias **e** directly after the table name. This helps avoid ambiguity, especially when multiple tables share the same field name. It specifies which table‚Äôs data is being referenced.\n\n---\n\n### Using Table Alias in Joins\n\n```sql\nSELECT e.Fname, e.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Explanation**:\n  - `e.Fname`, `e.LName`: Fields from the `Employees` table.\n  - `m.Fname AS ManagerFirstName`: Renames the `Fname` field from the `Managers` table to `ManagerFirstName` for clarity.\n  - **Join**: The tables `Employees` and `Managers` are joined on `ManagerId` and `Id`.\n\n---\n\n### Restrictions on Table Alias Usage\n\n```sql\nSELECT e.Fname, Employees.LName, m.Fname AS ManagerFirstName\nFROM Employees e\nJOIN Managers m ON e.ManagerId = m.Id;\n```\n- **Error Explanation**:  \n  Once you define an alias (e.g., `e` for `Employees`), you cannot use the canonical table name (`Employees`) anymore. The query above would throw an error.\n\n---\n\n### Table Aliases in the 1992 SQL Standard\n\nTable aliases, more formally known as **range variables**, were introduced to resolve the issue of duplicate column names caused by `INNER JOIN` operations. \n\n- **NATURAL JOIN** (introduced in SQL 1992):  \n  This join type automatically resolves column name conflicts. It is supported by databases like MySQL, PostgreSQL, and Oracle but is not available in SQL Server.\n  \n  Example using `NATURAL JOIN`:\n\n```sql\nSELECT Fname, LName, ManagerFirstName\nFROM Employees\nNATURAL JOIN\n    (SELECT Id AS ManagerId, Fname AS ManagerFirstName\n     FROM Managers) m;\n```\n- **Explanation**:  \n  - `NATURAL JOIN`: Automatically resolves column name conflicts when columns share the same name (like `Fname` or `LName`) between the two tables.\n  - **Alias for Derived Table**: The subquery for `Managers` uses the alias `m`, which is required, but does not affect the query logic.</md></sn>","topic_id":777,"last_visited":"2025-03-26T06:20:52.248Z"}],"chapter_id":200},{"chapter_name":"20.Create Database","topics":[{"topic_name":"CREATE DATABASE","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CREATE Database**\n\nIn SQL, you can create a new database using the `CREATE DATABASE` statement. This command initializes an empty database with the specified name, where you can subsequently create tables and store data.\n\n**Syntax:**\n\n\n```sql\nCREATE DATABASE database_name;\n```\n\n\n**Example:**\n\n\n```sql\nCREATE DATABASE myDatabase;\n```\n\n\nThis example creates a database named `myDatabase`. Once created, you can establish tables within `myDatabase` to organize and manage your data.\n\n**Note:** Ensure that the database name you choose is unique within your database management system to prevent conflicts. Additionally, appropriate permissions are required to execute the `CREATE DATABASE` statement. </md></sn>","topic_id":779,"last_visited":"2025-03-26T06:49:21.718Z"}],"chapter_id":202},{"chapter_name":"21.Create Table","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>Introduction</h3><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">| Parameter   | Details                                                                                           |\n|------------|---------------------------------------------------------------------------------------------------|\n| tableName  | The name of the table                                                                             |\n| columns    | Contains an enumeration of all the columns in the table. See **Create a New Table** for details.  |\n| Description | The `CREATE TABLE` statement is used to create a new table in the database. It defines columns, types, and integrity constraints. |</md></sn>","topic_id":780,"last_visited":"2025-03-26T06:54:20.490Z"},{"topic_name":"01.Create Table from Select","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create Table From Select**  \n\nYou may want to create a duplicate of a table:  \n\n```sql\nCREATE TABLE ClonedEmployees AS  \nSELECT * FROM Employees;\n```\n\nYou can use any features of a `SELECT` statement to modify the data before inserting it into the new table. The columns of the new table are automatically created based on the selected rows.  \n\nExample: Creating a modified table with specific columns and a concatenated name field:  \n\n```sql\nCREATE TABLE ModifiedEmployees AS  \nSELECT Id, CONCAT(FName, \" \", LName) AS FullName  \nFROM Employees  \nWHERE Id &gt; 10;\n```</md></sn><sn><h3>Practise1 : Creating Table From Select</h3><pre data-v=\"sql\">mysql&gt; show tables;\n+------------------------+\n| Tables_in_student_info |\n+------------------------+\n| student_age            |\n+------------------------+\n1 row in set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE duplicate_student_age AS SELECT * FROM student_age;\nQuery OK, 1 row affected (0.21 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n\n\nmysql&gt; show tables;\n+------------------------+\n| Tables_in_student_info |\n+------------------------+\n| duplicate_student_age  |\n| student_age            |\n+------------------------+\n2 rows in set (0.01 sec)\n\n\nmysql&gt; desc duplicate_student_age;\n+--------------+-------------+------+-----+---------+-------+\n| Field        | Type        | Null | Key | Default | Extra |\n+--------------+-------------+------+-----+---------+-------+\n| student_name | varchar(30) | YES  |     | NULL    |       |\n| age          | int         | YES  |     | NULL    |       |\n+--------------+-------------+------+-----+---------+-------+\n2 rows in set (0.09 sec)</pre></sn>","topic_id":781,"last_visited":"2025-03-26T07:13:37.493Z"},{"topic_name":"02.Create a New Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create a New Table**  \n\nA basic **Employees** table containing an **ID**, first name, last name, and phone number can be created using:  \n\n```sql\nCREATE TABLE Employees(  \n    Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL,  \n    FName VARCHAR(20) NOT NULL,  \n    LName VARCHAR(20) NOT NULL,  \n    PhoneNumber VARCHAR(10) NOT NULL  \n);\n```  \n\nThis example is specific to **Transact-SQL**.  \n\nThe `CREATE TABLE` statement creates a new table in the database, followed by the table name (`Employees`). Then, it defines the **columns** and their properties:  \n\n#### **Column Breakdown**  \n\n| Column       | Data Type       | Properties |\n|-------------|----------------|------------|\n| **Id**      | `INT`           | `IDENTITY(1,1) PRIMARY KEY NOT NULL` |\n| **FName**   | `VARCHAR(20)`   | `NOT NULL` |\n| **LName**   | `VARCHAR(20)`   | `NOT NULL` |\n| **PhoneNumber** | `VARCHAR(10)` | `NOT NULL` |\n\n#### **Explanation of `Id` Column**  \n\n- **Id** ‚Üí Column name  \n- **INT** ‚Üí Data type  \n- **IDENTITY(1,1)** ‚Üí Auto-generated values starting at **1** and incrementing by **1** for each new row  \n- **PRIMARY KEY** ‚Üí Ensures all values in this column are **unique**  \n- **NOT NULL** ‚Üí Ensures this column **cannot** have `NULL` values</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; CREATE DATABASE Office;\nQuery OK, 1 row affected (0.05 sec)\n\n\n\nmysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| employees          |\n| friends            |\n| imdb               |\n| information_schema |\n| mysql              |\n| node_project       |\n| office             |&lt;- here it is\n| performance_schema |\n| practise           |\n| sqlpro             |\n| student_info       |\n| sys                |\n+--------------------+\n12 rows in set (0.00 sec)\n\n\n\nmysql&gt; USE office;\nDatabase changed\n\n\nmysql&gt; SHOW TABLES;\nEmpty set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE Employees(\n    -&gt; Id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    -&gt; FName VARCHAR(20) NOT NULL,\n    -&gt; LName VARCHAR(20) NOT NULL,\n    -&gt; PhoneNumber VARCHAR(10) NOT NULL\n    -&gt; );\nQuery OK, 0 rows affected (0.31 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| employees        |\n+------------------+\n1 row in set (0.00 sec)\n\n\n\nmysql&gt; DESC employees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| Id          | int         | NO   | PRI | NULL    | auto_increment |\n| FName       | varchar(20) | NO   |     | NULL    |                |\n| LName       | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n4 rows in set (0.01 sec)\n</pre></sn>","topic_id":782,"last_visited":"2025-03-26T07:45:19.125Z"},{"topic_name":"03.Create Table with Foreign Key","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **CREATE TABLE With FOREIGN KEY**  \n\nThe following example demonstrates how to create an **Employees** table with a foreign key reference to the **Cities** table.  \n\n#### **Step 1: Create the `Cities` Table**  \n```sql\nCREATE TABLE Cities(  \n    CityID INT AUTO_INCREMENT PRIMARY KEY,  \n    Name VARCHAR(20) NOT NULL,  \n    Zip VARCHAR(10) NOT NULL  \n);\n```  \n\n#### **Step 2: Create the `Employees` Table with a Foreign Key**  \n```sql\nCREATE TABLE Employees(  \n    EmployeeID INT AUTO_INCREMENT PRIMARY KEY,  \n    FirstName VARCHAR(20) NOT NULL,  \n    LastName VARCHAR(20) NOT NULL,  \n    PhoneNumber VARCHAR(10) NOT NULL,  \n    CityID INT,  \n    FOREIGN KEY (CityID) REFERENCES Cities(CityID)  \n);\n```  \n\nHere you could find a Diagram:\n\n![Diagram](https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/sqlassets/SQL%20%20Table%20with%20Foreiign%20Key%20Diagram.svg)\n\n\n### **Explanation of `CityID` Foreign Key**  \n\n| Column     | Type          | Description  |\n|------------|--------------|--------------|\n| **CityID** | `INT`        | Name of the column  |\n| **FOREIGN KEY** | -        | Defines `CityID` as a foreign key (optional in MySQL)  |\n| **REFERENCES Cities(CityID)** | - | Links `CityID` in `Employees` to `CityID` in `Cities` |\n\n### **Important Notes**  \n‚ùó **The referenced table (`Cities`) must exist before creating the `Employees` table.** Otherwise, an error will occur.  \n‚ùó **Use `AUTO_INCREMENT` instead of `IDENTITY(1,1)`, as MySQL does not support `IDENTITY`.**</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; use office;\nDatabase changed\n\nmysql&gt; CREATE TABLE Cities(\n    -&gt; CityID INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt; Name VARCHAR(20) NOT NULL,\n    -&gt; Zip VARCHAR(10) NOT NULL\n    -&gt; );\nQuery OK, 0 rows affected (0.18 sec)\n\n\nmysql&gt; show tables;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n+------------------+\n1 row in set (0.01 sec)\n\n\nmysql&gt; CREATE TABLE Emplyees(\n    -&gt; EmplyoeeID INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt; FirstName VARCHAR(20) NOT NULL,\n    -&gt; LastName VARCHAR(20) NOT NULL,\n    -&gt; PhoneNumber VARCHAR(10) NOT NULL,\n    -&gt; CityID INT,\n    -&gt; FOREIGN KEY(CityID) REFERENCES cities(CityID)\n    -&gt; );\nQuery OK, 0 rows affected (0.30 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| emplyees         |\n+------------------+\n2 rows in set (0.01 sec)\n\n\nmysql&gt; DESC employees;\nERROR 1146 (42S02): Table 'office.employees' doesn't exist\n\n\nmysql&gt; DESC emplyees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)</pre></sn>","topic_id":783,"last_visited":"2025-03-26T08:30:20.239Z"},{"topic_name":"04.Duplicate a Table","topic_html":"<sn><h3>Duplicate a Table</h3><p>To duplicate a table, simply do the following:\n</p><pre data-v=\"sql\">CREATE TABLE newtable LIKE oldtable;</pre><p>or</p><pre data-v=\"sql\">INSERT newtable SELECT * FROM oldtable;</pre></sn><sn><h5>Practise</h5><pre data-v=\"sql\">mysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| emplyees         |\n+------------------+\n2 rows in set (0.00 sec)\n\n\nmysql&gt; CREATE TABLE employees LIKE emplyees;\nQuery OK, 0 rows affected (0.51 sec)\n\n\nmysql&gt; SHOW TABLES;\n+------------------+\n| Tables_in_office |\n+------------------+\n| cities           |\n| employees        |\n| emplyees         |\n+------------------+\n3 rows in set (0.01 sec)</pre><h5>#Duplicating data from emplyees to employees</h5><pre data-v=\"sql\">mysql&gt; INSERT emplyoees SELECT * FROM emplyees;\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0</pre></sn>","topic_id":784,"last_visited":"2025-03-26T08:54:13.343Z"},{"topic_name":"05.Create a Temporary or InMemory Table","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Create a Temporary or In-Memory Table**\n---\n\n#### **PostgreSQL and SQLite**  \nTo create a temporary table local to the session:  \n```sql\nCREATE TEMP TABLE MyTable(...);\n```\n\n**SQL Server**  \n- To create a temporary table local to the session:  \n```sql\nCREATE TABLE #TempPhysical(...);\n```\n\n- To create a temporary table visible to everyone:  \n```sql\nCREATE TABLE ##TempPhysicalVisibleToEveryone(...);\n```\n\n- To create an in-memory table:  \n```sql\nDECLARE @TempMemory TABLE(...);\n```</md></sn>","topic_id":785,"last_visited":"2025-03-26T08:50:54.447Z"}],"chapter_id":203},{"chapter_name":"26.INSERT","topics":[{"topic_name":"01.Insert Data From Another Table Using Select","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **INSERT Data from Another Table Using SELECT**\n\nTo insert data from one table into another, you can use the following query:\n\n```sql\nINSERT INTO Customers (FName, LName, PhoneNumber)\nSELECT FName, LName, PhoneNumber FROM Employees;\n```\n\nThis example inserts all Employees into the Customers table. Since the two tables have different fields, you need to specify which fields to insert and which to select. The correlating field names don‚Äôt need to be identical, but they must have the same data type.\n\nThis example assumes the **Id** field has an Identity Specification set and will auto-increment.\n\nIf you have two tables with exactly the same field names and want to transfer all records, you can use:\n\n```sql\nINSERT INTO Table1\nSELECT * FROM Table2;\n```</md></sn>","topic_id":786,"last_visited":"2025-03-26T09:13:37.110Z"},{"topic_name":"02.Insert New Row","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert New Row**\n\n---\n\nTo insert a new row into the **Customers** table, use the following query:\n\n```sql\nINSERT INTO Customers\nVALUES ('Zack', 'Smith', 'zack@example.com', '7049989942', 'EMAIL');\n```\n\nThis statement inserts a new row into the **Customers** table. Note that a value is not specified for the **Id** column, as it will be auto-generated. However, values for all other columns must be specified.</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; desc emplyoees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n\n\n\nmysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Nazmul', 'Hossan', '01905938', 12);\nQuery OK, 1 row affected (0.08 sec)\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n+------------+-----------+----------+-------------+--------+\n1 row in set (0.00 sec)</pre></sn>","topic_id":787,"last_visited":"2025-03-26T09:13:21.964Z"},{"topic_name":"03.Insert Only Specified Columns","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert Only Specified Columns**\n---\nTo insert data into specific columns of the **Customers** table, use the following query:\n\n```sql\nINSERT INTO Customers (FName, LName, Email, PreferredContact)\nVALUES ('Zack', 'Smith', 'zack@example.com', 'EMAIL');\n```\n\nThis statement inserts a new row into the **Customers** table. Data will only be inserted into the specified columns, and no value is provided for the **PhoneNumber** column.\n\nNote: All columns marked as **NOT NULL** must be included in the insert statement.</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; desc emplyoees;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| EmplyoeeID  | int         | NO   | PRI | NULL    | auto_increment |\n| FirstName   | varchar(20) | NO   |     | NULL    |                |\n| LastName    | varchar(20) | NO   |     | NULL    |                |\n| PhoneNumber | varchar(10) | NO   |     | NULL    |                |\n| CityID      | int         | YES  | MUL | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n\n\n\nmysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Nazmul', 'Hossan', '01905938', 12);\nQuery OK, 1 row affected (0.08 sec)\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n+------------+-----------+----------+-------------+--------+\n1 row in set (0.00 sec)</pre></sn>","topic_id":788,"last_visited":"2025-03-26T09:34:57.260Z"},{"topic_name":"04.Insert Multiple Rows at Once","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Insert Multiple Rows at Once**\n\nYou can insert multiple rows with a single **INSERT** command:\n\n```sql\nINSERT INTO tbl_name (field1, field2, field3)\nVALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);\n```\n\nFor inserting large quantities of data (bulk insert), DBMS-specific features and recommendations exist:\n\n- **MySQL**: `LOAD DATA INFILE`\n- **MSSQL**: `BULK INSERT`</md></sn><sn><h3>Practise</h3><pre data-v=\"sql\">mysql&gt; INSERT INTO emplyoees (FirstName, LastName, PhoneNumber, CityID)\n    -&gt; VALUES ('Imtiaz', 'Sarker', '0193438', 22),\n    -&gt; ('Sabbir', 'Hossan', '046578', 32),\n    -&gt; ('Nelson', 'Mandela', '0436578', 34);\nQuery OK, 3 rows affected (0.26 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\n\n\nmysql&gt; table emplyoees;\n+------------+-----------+----------+-------------+--------+\n| EmplyoeeID | FirstName | LastName | PhoneNumber | CityID |\n+------------+-----------+----------+-------------+--------+\n|          1 | Nazmul    | Hossan   | 01905938    |     12 |\n|          2 | Imtiaz    | Sarker   | 0193438     |     22 |\n|          3 | Sabbir    | Hossan   | 046578      |     32 |\n|          4 | Nelson    | Mandela  | 0436578     |     34 |\n+------------+-----------+----------+-------------+--------+\n4 rows in set (0.00 sec)</pre></sn>","topic_id":789,"last_visited":"2025-03-26T09:39:41.021Z"}],"chapter_id":204}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-03-24T10:27:26.644Z","is_private":false,"folder":"Programming","web_url":"http://qdoc.free.nf","nameKeys":["chapter_name","topic_name"],"last_update_on":"2025-03-28T06:14:52.575Z"}