{"subject_name":"Css","subject_id":46,"chapters":[{"chapter_name":"04.Selectors","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>Introduction to Chapter Selectors<br></h3><p>CSS selectors identify specific HTML elements as targets for CSS styles. This topic covers how CSS selectors target<br>HTML elements. Selectors use a wide range of over 50 selection methods offered by the CSS language, including<br>elements, classes, IDs, pseudo-elements and pseudo-classes, and patterns.</p></sn><sn><h5>List of all topic in this chapter are below :<br></h5></sn>","topic_id":589,"last_visited":"2024-12-09T11:27:03.012Z"},{"topic_name":"01.Basic Selectors","topic_html":"<sn><md data-rr=\"true\"><pre>## Basic Selectors<br><br>Below is an overview of some common CSS selectors and their descriptions:<br><br>| **Selector**       | **Description**                                                                 |<br>|---------------------|---------------------------------------------------------------------------------|<br>| `*`                | Universal selector (targets all elements).                                      |<br>| `div`              | Tag selector (targets all `&lt;div&gt;` elements).                                    |<br>| `.blue`            | Class selector (targets all elements with the class `blue`).                   |<br>| `.blue.red`        | Compound selector (targets all elements with both classes `blue` and `red`).    |<br>| `#headline`        | ID selector (targets the element with the `id=\"headline\"` attribute).           |<br>| `:pseudo-class`    | Targets elements that match a specific pseudo-class.                            |<br>| `::pseudo-element` | Targets elements that match a specific pseudo-element.                          |<br>| `:lang(en)`        | Targets elements with a `lang` attribute set to `en`, e.g., `&lt;span lang=\"en\"&gt;`. |<br>| `div &gt; p`          | Child selector (targets `&lt;p&gt;` elements that are direct children of `&lt;div&gt;`).    |<br><br>---<br><br>### Important Note:<br>- The value of an **ID** must be **unique** within a web page. Using the same ID value more than once in a document is a violation of the HTML standard.<br></pre></md></sn><sn><md data-rr=\"true\"><pre>### **CSS Specificity**<br><br>CSS specificity determines which rule takes precedence when multiple rules target the same element. It is calculated based on the specificity of the selectors used in the CSS rules. Specificity is often described as a hierarchy or weight assigned to selectors, where more specific selectors override less specific ones.<br><br>---<br><br>### **How Specificity Works**<br><br>CSS specificity is calculated as a four-value system in the format:  <br>**(a, b, c, d)**  <br>Each part represents a different aspect of the selector:  <br><br>1. **a** - Inline styles (e.g., `style=\"color: red;\"`)  <br>   - These have the highest specificity. If a style is applied directly in the HTML, it overrides all other CSS rules.  <br>   - Example: `&lt;div style=\"color: red;\"&gt;`  <br><br>2. **b** - Number of **IDs** in the selector  <br>   - An ID has high specificity because it uniquely identifies an element.  <br>   - Example: `#myID {}`  <br><br>3. **c** - Number of **classes, attributes, and pseudo-classes** in the selector  <br>   - These add medium specificity.  <br>   - Examples: `.className {}`, `[type=\"text\"] {}`, `:hover {}`  <br><br>4. **d** - Number of **elements and pseudo-elements** in the selector  <br>   - These have the lowest specificity.  <br>   - Examples: `div {}`, `::before {}`  <br><br>---<br><br>### **Specificity Example**<br><br>Consider these CSS rules:<br><br>```css<br>div { color: black; }          /* (0, 0, 0, 1) */<br>p.intro { color: blue; }       /* (0, 0, 1, 1) */<br>#main p.intro { color: red; }  /* (0, 1, 1, 1) */<br>```<br><br>For the following HTML:  <br><br>```html<br>&lt;div id=\"main\"&gt;<br>  &lt;p class=\"intro\"&gt;Hello World&lt;/p&gt;<br>&lt;/div&gt;<br>```<br><br>1. `div { color: black; }` applies to all `&lt;div&gt;` elements.  <br>2. `p.intro { color: blue; }` targets `&lt;p&gt;` elements with the `intro` class.  <br>3. `#main p.intro { color: red; }` is the most specific because it combines an ID, class, and element.<br><br>**Result**: The text \"Hello World\" will be **red** because `#main p.intro` has the highest specificity score.<br><br>---<br><br>### **Key Points to Remember**<br>1. Inline styles override all CSS rules written in stylesheets.<br>2. Higher specificity overrides lower specificity.<br>3. When two selectors have the same specificity, the rule that appears **last** in the stylesheet takes precedence (CSS **cascading**).<br><br>---<br><br>### **Specificity Cheat Sheet**<br>| Selector Type                      | Specificity Value | Example               |<br>|------------------------------------|-------------------|-----------------------|<br>| Inline styles                      | (1, 0, 0, 0)      | `style=\"color: red;\"` |<br>| ID selectors                       | (0, 1, 0, 0)      | `#id`                |<br>| Class, attribute, pseudo-class     | (0, 0, 1, 0)      | `.class`, `[attr]`    |<br>| Element, pseudo-element            | (0, 0, 0, 1)      | `div`, `::before`     |<br></pre></md></sn>","topic_id":588,"last_visited":"2024-12-09T11:15:11.168Z"},{"topic_name":"02.Attribute Selectors","topic_html":"<sn><md data-rr=\"true\"><pre><br>## **Attribute Selectors**<br><br>### **Overview**  <br>Attribute selectors allow you to select elements based on the presence or value of their attributes. Different operators provide various selection criteria.<br><br>| **Selector**     | **Matched Element**           | **Description**                                                                                      | **CSS Version** |<br>|-------------------|-------------------------------|------------------------------------------------------------------------------------------------------|-----------------|<br>| `[attr]`          | `&lt;div attr&gt;`                 | Selects elements with the attribute `attr`.                                                         | 2               |<br>| `[attr='val']`    | `&lt;div attr=\"val\"&gt;`           | Selects elements where the attribute `attr` has the exact value `val`.                              | 2               |<br>| `[attr~='val']`   | `&lt;div attr=\"val val2 val3\"&gt;` | Selects elements where `val` appears in the whitespace-separated list of `attr`.                    | 2               |<br>| `[attr^='val']`   | `&lt;div attr=\"val1 val2\"&gt;`     | Selects elements where the value of `attr` begins with `val`.                                       | 3               |<br>| `[attr$='val']`   | `&lt;div attr=\"sth aval\"&gt;`      | Selects elements where the value of `attr` ends with `val`.                                         | 3               |<br>| `[attr*='val']`   | `&lt;div attr=\"somevalhere\"&gt;`   | Selects elements where `val` appears anywhere in the value of `attr`.                               | 3               |<br>| `[attr|='val']`   | `&lt;div attr=\"val-sth etc\"&gt;`   | Selects elements where `attr`'s value is exactly `val`, or starts with `val` followed by `-`.       | 2               |<br>| `[attr='val' i]`  | `&lt;div attr=\"val\"&gt;`           | Selects elements where `attr` has the value `val`, ignoring case sensitivity.                       | 4 (Level 2)     |<br><br>**Notes:**  <br>1. Attribute values can be surrounded by single or double quotes. Omitting quotes might work in some cases but is not valid per CSS standards.  <br>2. CSS Level 4 is modular, meaning there isn't a single unified \"CSS4\" specification. Browser support should be checked for level 4 features.<br><br>---<br><br>### **Details and Examples**<br><br>#### **1. `[attribute]`**  <br>Selects elements with the given attribute.  <br>```css<br>div[data-color] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div data-color=\"red\"&gt;This will be red&lt;/div&gt;<br>&lt;div data-color=\"green\"&gt;This will be red&lt;/div&gt;<br>&lt;div data-background=\"red\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **2. `[attribute=\"value\"]**  <br>Selects elements with the specified attribute and exact value.  <br>```css<br>div[data-color=\"red\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div data-color=\"red\"&gt;This will be red&lt;/div&gt;<br>&lt;div data-color=\"green\"&gt;This will NOT be red&lt;/div&gt;<br>&lt;div data-color=\"blue\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **3. `[attribute*=\"value\"]`**  <br>Selects elements where the attribute contains the specified value as a substring.  <br>```css<br>[class*=\"foo\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div class=\"foo-123\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"foo123\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"bar123foo\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"barfooo123\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"barfo0\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **4. `[attribute~=\"value\"]`**  <br>Selects elements where the attribute contains the specified value in a whitespace-separated list.  <br>```css<br>[class~=\"color-red\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div class=\"color-red foo-bar the-div\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"color-blue foo-bar the-div\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **5. `[attribute^=\"value\"]`**  <br>Selects elements where the attribute begins with the specified value.  <br>```css<br>[class^=\"foo-\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div class=\"foo-123\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"foo-234\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"bar-123\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **6. `[attribute$=\"value\"]`**  <br>Selects elements where the attribute ends with the specified value.  <br>```css<br>[class$=\"file\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div class=\"foobar-file\"&gt;This will be red&lt;/div&gt;<br>&lt;div class=\"foobar-input\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **7. `[attribute|=\"value\"]`**  <br>Selects elements where the attribute's value is exactly the specified value, or starts with the value followed by `-`.  <br>```css<br>[lang|=\"EN\"] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div lang=\"EN-us\"&gt;This will be red&lt;/div&gt;<br>&lt;div lang=\"EN-gb\"&gt;This will be red&lt;/div&gt;<br>&lt;div lang=\"PT-pt\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>#### **8. `[attribute=\"value\" i]`**  <br>Selects elements where the attribute's value matches the specified value, ignoring case sensitivity.  <br>```css<br>[lang=\"EN\" i] {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div lang=\"EN\"&gt;This will be red&lt;/div&gt;<br>&lt;div lang=\"en\"&gt;This will be red&lt;/div&gt;<br>&lt;div lang=\"PT\"&gt;This will NOT be red&lt;/div&gt;<br>```<br><br>---<br><br>### **Specificity of Attribute Selectors**  <br>Attribute selectors have the same specificity as class selectors and pseudo-classes (specificity: `0-1-0`).  <br>```css<br>*[type=checkbox] /* Specificity: 0-1-0 */<br>```<br>Attribute selectors can target elements by their `id` with lower specificity than using an ID selector:  <br>```css<br>[id=\"my-ID\"] /* Lower specificity */  <br>#my-ID /* Higher specificity */<br>```</pre></md></sn>","topic_id":587,"last_visited":"2024-12-09T10:57:40.199Z"},{"topic_name":"03.Combinators","topic_html":"<sn><md data-rr=\"true\"><pre>## **Combinators**<br><br>### **Overview**  <br>CSS combinators define relationships between selectors, allowing you to target elements based on their position relative to others.  <br><br>| **Selector** | **Description** |<br>|--------------|------------------|<br>| `div span`   | Descendant selector (all `&lt;span&gt;` elements that are descendants of a `&lt;div&gt;`). |<br>| `div &gt; span` | Child selector (all `&lt;span&gt;` elements that are direct children of a `&lt;div&gt;`). |<br>| `a ~ span`   | General sibling selector (all `&lt;span&gt;` elements that are siblings after an `&lt;a&gt;`). |<br>| `a + span`   | Adjacent sibling selector (all `&lt;span&gt;` elements immediately after an `&lt;a&gt;`). |<br><br>**Note:**  <br>Sibling selectors target elements **after** them in the source document. CSS cannot select previous or parent elements inherently. However, using the `order` property with `flexbox`, a simulated \"previous sibling selector\" can be achieved in visual media.<br><br>---<br><br>### **Descendant Combinator: `selector selector`**  <br>The descendant combinator (represented by a space ` `) selects all elements that are descendants of the specified element.<br><br>#### **Example**  <br>```css<br>div p {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div&gt;<br>  &lt;p&gt;My text is red&lt;/p&gt;<br>  &lt;section&gt;<br>    &lt;p&gt;My text is red&lt;/p&gt;<br>  &lt;/section&gt;<br>&lt;/div&gt;<br>&lt;p&gt;My text is not red&lt;/p&gt;<br>```<br><br>- The first two `&lt;p&gt;` elements are selected as they are descendants of the `&lt;div&gt;`.  <br>- The last `&lt;p&gt;` is not selected because it is not within the `&lt;div&gt;`.    <br><br>---<br><br>### **Child Combinator: `selector &gt; selector`**  <br>The child combinator (`&gt;`) selects elements that are direct descendants of the specified element.<br><br>#### **Example**  <br>```css<br>div &gt; p {<br>  color: red;<br>}<br>```<br>```html<br>&lt;div&gt;<br>  &lt;p&gt;My text is red&lt;/p&gt;<br>  &lt;section&gt;<br>    &lt;p&gt;My text is not red&lt;/p&gt;<br>  &lt;/section&gt;<br>&lt;/div&gt;<br>```<br><br>- Only the first `&lt;p&gt;` is selected because it is a direct child of the `&lt;div&gt;`.  <br>- The second `&lt;p&gt;` is not selected because it is nested inside a `&lt;section&gt;`.  <br>  <br><br>---<br><br>### **Adjacent Sibling Combinator: `selector + selector`**  <br>The adjacent sibling (`+`) combinator selects an element immediately following a specified sibling element.<br><br>#### **Example**  <br>```css<br>p + p {<br>  color: red;<br>}<br>```<br>```html<br>&lt;p&gt;My text is not red&lt;/p&gt;<br>&lt;p&gt;My text is red&lt;/p&gt;<br>&lt;p&gt;My text is red&lt;/p&gt;<br>&lt;hr&gt;<br>&lt;p&gt;My text is not red&lt;/p&gt;<br>```<br><br>- Only the second and third `&lt;p&gt;` elements are selected as they immediately follow another `&lt;p&gt;`.  <br>  <br><br>---<br><br>### **General Sibling Combinator: `selector ~ selector`**  <br>The general sibling (`~`) combinator selects all siblings that follow the specified element, regardless of adjacency.<br><br>#### **Example**  <br>```css<br>p ~ p {<br>  color: red;<br>}<br>```<br>```html<br>&lt;p&gt;My text is not red&lt;/p&gt;<br>&lt;p&gt;My text is red&lt;/p&gt;<br>&lt;hr&gt;<br>&lt;h1&gt;And now a title&lt;/h1&gt;<br>&lt;p&gt;My text is red&lt;/p&gt;<br>```<br><br>- All `&lt;p&gt;` elements following the first `&lt;p&gt;` are selected, even if they are not immediately adjacent.  <br></pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/OPLXLqv?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":586,"last_visited":"2024-12-09T10:07:09.751Z"},{"topic_name":"04.Examples of pseudo class","topic_html":"<fr>Codepen examples^^https://codepen.io/Nazmul-Hossan/embed/preview/dPbMKgN?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":584,"last_visited":"2024-12-08T11:27:23.212Z"},{"topic_name":"04.Psuodo classes","topic_html":"<sn><md data-rr=\"true\"><pre>### **Pseudo-classes**<br><br>**Definition**:  <br>Pseudo-classes are keywords that allow selection based on information that lies outside of the document tree or cannot be expressed by other selectors or combinators. This information can relate to the state of an element (dynamic pseudo-classes), its location (structural and target pseudo-classes), negation (negation pseudo-class), or the element's language (lang pseudo-class). Examples include:  <br>- Whether a link has been followed (`:visited`)  <br>- The mouse is over an element (`:hover`)  <br>- A checkbox is checked (`:checked`)<br><br>---<br><br>### **Syntax**:<br>```css<br>selector:pseudo-class {<br>  property: VALUE;<br>}<br>```<br><br>---<br><br>### **List of Common Pseudo-classes**:<br><br>| Name                   | Description                                                                 |<br>|------------------------|-----------------------------------------------------------------------------|<br>| `:active`               | Applies to any element being activated (i.e., clicked) by the user.         |<br>| `:any`                  | Allows you to build sets of related selectors by grouping items to match.  |<br>| `:target`               | Selects the current active `#news` element (clicked in a URL with that anchor). |<br>| `:checked`              | Applies to radio, checkbox, or option elements that are checked or toggled into an \"on\" state. |<br>| `:default`              | Represents any user interface element that is the default among a group of similar elements. |<br>| `:disabled`             | Applies to any UI element in a disabled state.                              |<br>| `:empty`                | Applies to any element with no children.                                    |<br>| `:enabled`              | Applies to any UI element in an enabled state.                              |<br>| `:first`                | Selects the first page in a printed document (used with `@page` rule).      |<br>| `:first-child`          | Represents any element that is the first child of its parent.               |<br>| `:first-of-type`        | Applies when an element is the first of its type inside its parent.        |<br>| `:focus`                | Applies to any element that has the user's focus (via keyboard, mouse, etc.). |<br>| `:focus-within`         | Highlights a section when any element inside it is focused.                 |<br>| `:fullscreen`           | Applies to elements in full-screen mode.                                    |<br>| `:hover`                | Applies when an element is hovered by the user's pointing device.           |<br>| `:indeterminate`        | Applies to radio or checkbox UI elements that are in an indeterminate state. |<br>| `:in-range`             | Matches when an element's value is inside the specified range limits.       |<br>| `:invalid`              | Applies to `&lt;input&gt;` elements whose values are invalid according to their type. |<br>| `:lang`                 | Applies to elements whose wrapping `&lt;body&gt;` has a `lang` attribute with a valid language code. |<br>| `:last-child`           | Represents any element that is the last child of its parent.                |<br>| `:last-of-type`         | Applies when an element is the last of the selected element type inside its parent. |<br>| `:left`                 | Selects left pages in a printed document (used with `@page` rule).          |<br>| `:link`                 | Applies to any links that haven't been visited by the user.                 |<br>| `:not()`                | Applies to all elements that do not match the specified selector.          |<br>| `:nth-child`            | Applies when an element is the `n`-th child of its parent.                  |<br>| `:nth-of-type`          | Applies when an element is the `n`-th of its type in the parent.            |<br>| `:only-child`           | Represents any element that is the only child of its parent.                |<br>| `:optional`             | Represents any element that does not have the `required` attribute set.    |<br>| `:out-of-range`         | Matches when an element's value is outside the specified range limits.      |<br>| `:placeholder-shown`    | Experimental: Applies to form elements displaying placeholder text.        |<br>| `:read-only`            | Applies to any element that is not editable by the user.                    |<br>| `:read-write`           | Applies to any element editable by the user, such as `&lt;input&gt;` elements.   |<br>| `:right`                | Selects right pages in a printed document (used with `@page` rule).         |<br>| `:root`                 | Matches the root element of the document tree.                             |<br>| `:scope`                | Matches elements that are a reference point for selectors to match against. |<br>| `:visited`              | Applies to any links that have been visited by the user.                    |<br><br>---<br><br>### **Important Notes**:<br>- The `:visited` pseudo-class can no longer be used for most styling in modern browsers due to privacy/security concerns.<br>- The `:not()` pseudo-class can only contain one selector but can be chained for more complex negations.<br><br></pre></md></sn>","topic_id":583,"last_visited":"2024-12-08T11:20:26.705Z"},{"topic_name":"05.child pseudo class","topic_html":"<sn><md data-rr=\"true\"><pre><br><br>### **Child Pseudo-Class**<br><br>The `:nth-child(an+b)` CSS pseudo-class matches an element that has `an+b-1` siblings before it in the document tree, for a given positive or zero value for `n`.<br><br>**MDN Definition of `:nth-child`**:  <br>&gt; The `:nth-child(an+b)` pseudo-class matches an element based on its position in the parent element, where `a` and `b` are integers and `n` is a counter.<br><br>---<br><br>### **Examples of `:nth-child` Usage**<br><br>Here is a breakdown of how different `:nth-child` selectors match elements based on their positions in the list:<br><br>| Selector               | Matches Elements   |<br>|------------------------|---------------------|<br>| `:first-child`          | 1st element         |<br>| `:nth-child(3)`         | 3rd element         |<br>| `:nth-child(n+3)`       | 3rd, 4th, 5th, etc. |<br>| `:nth-child(3n)`        | 3rd, 6th, 9th, etc. |<br>| `:nth-child(3n+1)`      | 1st, 4th, 7th, etc. |<br>| `:nth-child(-n+3)`      | 1st, 2nd, 3rd       |<br>| `:nth-child(odd)`       | 1st, 3rd, 5th, etc. |<br>| `:nth-child(even)`      | 2nd, 4th, 6th, etc. |<br>| `:last-child`           | Last element        |<br>| `:nth-last-child(3)`    | 3rd last element    |<br><br>---<br><br>### **Explanation of Common Selectors**:<br><br>- `:first-child`: Matches the first element.<br>- `:nth-child(n+3)`: Matches elements starting from the 3rd position, and includes every element after that.<br>- `:nth-child(3n)`: Matches every 3rd element, starting from the 3rd.<br>- `:nth-child(odd)` and `:nth-child(even)`: Matches odd or even-positioned elements, respectively.<br>- `:nth-last-child(3)`: Matches the 3rd element from the end.<br><br></pre></md></sn>","topic_id":582,"last_visited":"2024-12-08T11:05:25.970Z"},{"topic_name":"06.class name selectors","topic_html":"<sn><md data-rr=\"true\"><pre>### **Class Name Selectors**<br><br>The class name selector targets all elements with the specified class name. For example, the class name `.warning` would select the following `&lt;div&gt;` element:<br><br>**HTML**:  <br>```html<br>&lt;div class=\"warning\"&gt;<br>  &lt;p&gt;This would be some warning copy.&lt;/p&gt;<br>&lt;/div&gt;<br>```<br><br>You can also combine class names to target elements more specifically. Let's build on the example above to showcase a more complicated class selection.<br><br>**CSS**:  <br>```css<br>.important {<br>  color: orange;<br>}<br><br>.warning {<br>  color: blue;<br>}<br><br>.warning.important {<br>  color: red;<br>}<br>```<br><br>**HTML**:  <br>```html<br>&lt;div class=\"warning\"&gt;<br>  &lt;p&gt;This would be some warning copy.&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;div class=\"important warning\"&gt;<br>  &lt;p class=\"important\"&gt;This is some really important warning copy.&lt;/p&gt;<br>&lt;/div&gt;<br>```<br><br>---<br><br>In this example:<br>- All elements with the `.warning` class will have blue text.<br>- All elements with the `.important` class will have orange text.<br>- Any element that has both the `.important` and `.warning` class names will have red text.<br><br>**Key Notes**:<br>- In the CSS, the `.warning.important` selector targets elements that have both class names (`warning` and `important`) in their class attribute, regardless of the order.<br>- If a space were included between the two class names in the CSS selector (e.g., `.warning .important`), it would target elements that have a parent with the `.warning` class and a child with the `.important` class.<br><br></pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/gbYrKRx?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":581,"last_visited":"2024-12-08T10:49:43.628Z"},{"topic_name":"07.Selecting id without high specificity","topic_html":"<sn><md data-rr=\"true\"><pre>### **Select Element Using Its ID Without the High Specificity of the ID Selector**<br><br>This technique allows you to select an element using its ID in a way that avoids the high specificity of the ID selector, making it easier to override with other styles.<br><br>**HTML**:  <br>```html<br>&lt;div id=\"element\"&gt;...&lt;/div&gt;<br>```<br><br>**CSS**:  <br>```css<br>#element { <br>  /* High specificity will override many selectors */<br>  ... <br>}<br><br>[id=\"element\"] { <br>  /* Low specificity, can be overridden easily */<br>  ... <br>}<br>```<br><br>---<br><br>In this method:<br>- The `#element` selector has **high specificity**, which means it will override other selectors unless they have higher specificity.<br>- The `[id=\"element\"]` selector has **low specificity**, making it easier to override with other less specific selectors.</pre></md></sn>","topic_id":580,"last_visited":"2024-12-08T10:46:49.049Z"},{"topic_name":"08.last of type selector","topic_html":"<sn><md data-rr=\"true\"><pre>### **The `:last-of-type` Selector**<br><br>**HTML**:  <br>```html<br>&lt;div class=\"container\"&gt;<br>  &lt;p&gt;First paragraph&lt;/p&gt;<br>  &lt;p&gt;Second paragraph&lt;/p&gt;<br>  &lt;p&gt;Last paragraph&lt;/p&gt;<br>  &lt;h1&gt;Heading 1&lt;/h1&gt;<br>  &lt;h2&gt;First heading 2&lt;/h2&gt;<br>  &lt;h2&gt;Last heading 2&lt;/h2&gt;<br>&lt;/div&gt;<br>```<br><br>**CSS**:  <br>```css<br>p:last-of-type {<br>  background: #C5CAE9;<br>}<br><br>h1:last-of-type {<br>  background: #CDDC39;<br>}<br>```<br><br>---<br><br>The `:last-of-type` selector will apply the background colors as follows:<br>- The last `&lt;p&gt;` element (\"Last paragraph\") will have a background color of `#C5CAE9`.<br>- The last `&lt;h1&gt;` element (\"Heading 1\") will have a background color of `#CDDC39`.</pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/EaYKRNq?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":579,"last_visited":"2024-12-08T10:39:21.247Z"},{"topic_name":"09.in range selector","topic_html":"<sn><md data-rr=\"true\"><pre>## CSS3 `:in-range` Selector Example  <br><br>**CSS**:  <br>```css<br>input:in-range {<br>  border: 1px solid blue;<br>}<br>```<br><br>**HTML**:  <br>```html<br>&lt;input type=\"number\" min=\"10\" max=\"20\" value=\"15\"&gt;<br>&lt;p&gt;The border for this value will be blue.&lt;/p&gt;<br>```<br><br>The `:in-range` CSS pseudo-class matches when an element's value is within the specified range (defined by attributes such as `min` and `max`). This selector allows the page to provide visual feedback, indicating that the value of the element is within the allowed range.  <br><br>---<br><br>✨ **Key Note**: The border of the input field will turn blue as long as the value is within the range of `10` to `20`.</pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/zxOqaBQ?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":578,"last_visited":"2024-12-08T10:38:38.963Z"},{"topic_name":"10.not and focus within pseudo class","topic_html":"<sn><md data-rr=\"true\"><pre><br>### 1. **CSS `:not()` Pseudo-Class**<br><br>#### Example: Excluding Disabled and Specific Classes<br>The following selector matches all `&lt;input&gt;` elements that are:<br>- **Not disabled**<br>- **Do not have the class `.example`**<br><br>##### HTML<br>```html<br>&lt;form&gt;<br>  Phone: &lt;input type=\"tel\" class=\"example\"&gt;<br>  E-mail: &lt;input type=\"email\" disabled=\"disabled\"&gt;<br>  Password: &lt;input type=\"password\"&gt;<br>&lt;/form&gt;<br>```<br><br>##### CSS<br>```css<br>input:not([disabled]):not(.example) {<br>  background-color: #ccc;<br>}<br>```<br><br>#### Comma-Separated Selectors in `:not()`<br>the `:not()` pseudo-class supports comma-separated conditions.<br><br>##### Updated CSS<br>```css<br>input:not([disabled], .example) {<br>  background-color: #ccc;<br>}<br>```<br><br>#### Key Notes<br>- **Effect**: This styles all `&lt;input&gt;` elements except those that are disabled or have the `.example` class.<br>- **Example Usage**: Useful for applying default styling while excluding specific states or classes.<br><br>---<br><br>### 2. **CSS `:focus-within` Pseudo-Class**<br><br>The `:focus-within` pseudo-class applies styles to a parent element when any of its child elements are focused.<br><br>#### Example: Changing Background Color on Focus<br><br>##### HTML<br>```html<br>&lt;h3&gt;Background is blue if the input is focused:&lt;/h3&gt;<br>&lt;div&gt;<br>  &lt;input type=\"text\"&gt;<br>&lt;/div&gt;<br>```<br><br>##### CSS<br>```css<br>div {<br>  height: 80px;<br>}<br><br>input {<br>  margin: 30px;<br>}<br><br>div:focus-within {<br>  background-color: #1565C0;<br>}<br>```<br><br>#### Key Notes<br>- **Effect**: When the input inside the `&lt;div&gt;` is focused, the background color of the `&lt;div&gt;` changes to blue.<br>- **Accessibility**: Improves focus visibility for keyboard navigation and screen readers.<br><br><br></pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/NPKNzGX?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":577,"last_visited":"2024-12-08T10:11:56.835Z"},{"topic_name":"11.Applying sibling selector with global boolean","topic_html":"<sn><md data-rr=\"true\"><pre>Using the `~` selector and the `:checked` pseudo-class, you can implement a **global accessible boolean** in CSS that toggles styles for various elements based on the state of a checkbox. This approach is particularly useful for toggling themes, showing/hiding content, or creating CSS-only interactive components—all without JavaScript.<br><br>---<br><br>### Concept: Global Boolean with CSS<br>The idea is to have a hidden checkbox act as a **global boolean**. When the checkbox is checked(via label which contain its id in its `for` attribute), its state can influence the styling of other elements using the `~` combinator.<br><br>---<br><br>### Example: Dark Mode Toggle<br><br>#### HTML<br>```html<br>&lt;div&gt;<br>  &lt;!-- Hidden Checkbox --&gt;<br>  &lt;input type=\"checkbox\" id=\"dark-mode-toggle\" hidden /&gt;<br><br>  &lt;!-- Label for the Toggle --&gt;<br>  &lt;label for=\"dark-mode-toggle\" class=\"toggle-label\"&gt;<br>    🌞 Light Mode / 🌙 Dark Mode<br>  &lt;/label&gt;<br><br>  &lt;!-- Content to be Styled --&gt;<br>  &lt;div class=\"content\"&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>    &lt;p&gt;This is an example of a global boolean using CSS.&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>```<br><br>#### CSS<br>```css<br>/* Base styles */<br>body {<br>  margin: 0;<br>  font-family: Arial, sans-serif;<br>  transition: background-color 0.3s, color 0.3s;<br>}<br><br>.content {<br>  padding: 20px;<br>}<br><br>/* Styles for the label */<br>.toggle-label {<br>  display: inline-block;<br>  cursor: pointer;<br>  background-color: #ddd;<br>  padding: 10px 20px;<br>  border-radius: 5px;<br>  margin: 20px;<br>  font-weight: bold;<br>  text-align: center;<br>  transition: background-color 0.3s, color 0.3s;<br>}<br><br>/* Default light mode */<br>body {<br>  background-color: #ffffff;<br>  color: #000000;<br>}<br><br>.toggle-label {<br>  background-color: #f0f0f0;<br>  color: #333;<br>}<br><br>/* Dark mode styles when checkbox is checked */<br>input[type=\"checkbox\"]:checked ~ .toggle-label {<br>  background-color: #333;<br>  color: #fff;<br>}<br><br>input[type=\"checkbox\"]:checked ~ .content {<br>  background-color: #222;<br>  color: #ddd;<br>}<br>```<br><br>---<br><br>### How It Works<br>1. **Hidden Checkbox**:  <br>   The `&lt;input type=\"checkbox\" hidden /&gt;` acts as the toggle. Since it's hidden, users interact with the `&lt;label&gt;` instead.<br>   <br>2. **Using `:checked`**:  <br>   When the checkbox is checked, the `:checked` pseudo-class targets styles that depend on its state.<br><br>3. **Global Effect via `~`**:  <br>   The `~` combinator applies styles to sibling elements (e.g., `.toggle-label` and `.content`) when the checkbox is checked.<br><br>4. **Accessibility**:  <br>   - The `&lt;label&gt;` makes the checkbox accessible for screen readers and allows keyboard interaction.<br>   - No JavaScript is needed, simplifying implementation.<br><br>---<br><br>### Demo Flow<br>- By default, the page is in light mode.<br>- Clicking the `&lt;label&gt;` toggles the checkbox, switching the page to dark mode.<br>- This works purely in CSS, with the `~` selector cascading the state change to other elements.<br><br></pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/gbYrzJw?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":576,"last_visited":"2024-12-08T09:59:19.515Z"},{"topic_name":"12.ID Selector","topic_html":"<sn><h3>ID selectors</h3><p>ID selectors select DOM elements with the targeted ID. To select an element by a specific ID in CSS, the # prefix is<br>used</p><h5>For example :<br></h5><pre data-v=\"html\">&lt;div id=\"exampleID\"&gt;\n&lt;p&gt;Example&lt;/p&gt;\n&lt;/div&gt;</pre><p>…can be selected by <m>#exampleID</m> in CSS as shown below</p><pre data-v=\"css\">#exampleID {\n      width: 20px;\n}</pre><nt>Note : The HTML specs do not allow multiple elements with the same ID<br></nt></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/JoPXvZz?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":575,"last_visited":"2024-12-08T09:19:11.014Z"},{"topic_name":"13.Range Input","topic_html":"<sn><h3>How to style a Range input</h3><pre data-v=\"html\">&lt;input type=\"range\"&gt;&lt;/input&gt;</pre><md data-rr=\"true\"><pre><br>| **Effect**              | **Pseudo Selector**                                                                                     |<br>|-------------------------|-------------------------------------------------------------------------------------------------------|<br>| **Thumb**               | `input[type=range]::-webkit-slider-thumb`, `input[type=range]::-moz-range-thumb`, `input[type=range]::-ms-thumb` |<br>| **Track**               | `input[type=range]::-webkit-slider-runnable-track`, `input[type=range]::-moz-range-track`, `input[type=range]::-ms-track` |<br>| **OnFocus**             | `input[type=range]:focus`                                                                             |<br>| **Lower part of the track** | `input[type=range]::-moz-range-progress`, `input[type=range]::-ms-fill-lower` (not supported in WebKit browsers)       |</pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/RNbayLb?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":574,"last_visited":"2024-12-08T08:50:01.384Z"},{"topic_name":"14.Only child","topic_html":"<sn><h3>The :only-child pseudo-class selector example</h3><p>The <m>:only-child</m> CSS pseudo-class represents any element which is the only child of its parent</p></sn><fr>#Codepen^^https://codepen.io/Nazmul-Hossan/embed/preview/YPKqLyg?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":573,"last_visited":"2024-12-08T08:48:35.469Z"},{"topic_name":"04.is where has pseudo class","topic_html":"<sn><h3>:is pseudo class<br></h3><md data-rr=\"true\"><pre>The `:is()` pseudo-class in CSS is used to group multiple selectors together and apply the same styles to them. It allows you to simplify the CSS by avoiding repetition of rules for similar elements.<br><br>### Syntax:<br>```css<br>:is(selector1, selector2, selector3) {<br>  /* Styles here */<br>}<br>```<br><br>### Examples:<br><br>1. **Basic Example** – Apply the same style to multiple elements:<br>```css<br>:is(h1, h2, h3) {<br>  color: red;<br>  font-family: Arial, sans-serif;<br>}<br>```<br>This will style all `&lt;h1&gt;`, `&lt;h2&gt;`, and `&lt;h3&gt;` elements with red text and the Arial font.<br><br>2. **Example with More Complex Selectors**:<br>```css<br>:is(p, .class1, #id2) {<br>  background-color: lightblue;<br>}<br>```<br>This will apply a light blue background to all `&lt;p&gt;` elements, any element with class `.class1`, and the element with `#id2`.<br><br>3. **Nesting Selectors with `:is()`**:<br>```css<br>div:is(.class1, .class2) p {<br>  font-weight: bold;<br>}<br>```<br>This targets `&lt;p&gt;` elements that are inside `&lt;div&gt;` elements with either `.class1` or `.class2` classes.<br><br>4. **With Pseudo-classes**:<br>```css<br>:is(button, a):hover {<br>  background-color: green;<br>}<br>```<br>This will change the background color to green for both `&lt;button&gt;` and `&lt;a&gt;` elements when they are hovered over.<br><br>5. **Example with Multiple Descendants**:<br>```css<br>:is(.container, .card) .title {<br>  font-size: 24px;<br>}<br>```<br>This applies a font size of 24px to elements with the `.title` class inside elements with `.container` or `.card` classes.<br><br>Using `:is()` can help reduce the size and complexity of your CSS by grouping selectors together while maintaining clarity and functionality.</pre></md></sn><sn><h3>:has pseudo class<br></h3><md data-rr=\"true\"><pre>The `:has()` pseudo-class in CSS is used to select elements that contain specific descendants, like child elements, or to match elements based on their content or state. It's often referred to as a \"parent selector\" because it allows you to apply styles to an element based on its child or descendant elements.<br><br>### Syntax:<br>```css<br>selector:has(selector2) {<br>  /* Styles here */<br>}<br>```<br><br>### Examples:<br><br>1. **Select a `&lt;div&gt;` containing an image:**<br>```css<br>div:has(img) {<br>  border: 2px solid blue;<br>}<br>```<br>This will apply a blue border to any `&lt;div&gt;` that contains an `&lt;img&gt;` element.<br><br>2. **Highlight a list item containing a specific link:**<br>```css<br>li:has(a[href=\"https://example.com\"]) {<br>  background-color: yellow;<br>}<br>```<br>This will apply a yellow background to any `&lt;li&gt;` that contains a link with the href `\"https://example.com\"`.<br><br>3. **Style a container with a visible input field:**<br>```css<br>.form-container:has(input:checked) {<br>  background-color: lightgreen;<br>}<br>```<br>This will change the background color of a `.form-container` if it contains a checked `&lt;input&gt;` element (e.g., a checked checkbox or radio button).<br><br>The `:has()` selector is useful for styling elements based on their children or the presence of specific content, enabling more dynamic and flexible CSS rules. However, it's important to note that as of now, support for `:has()` in browsers is limited (it's primarily supported in modern browsers like Chrome and Safari).</pre></md></sn><sn><h3>:where pseudo class<br></h3><md data-rr=\"true\"><pre>The `:where()` pseudo-class in CSS is used to apply styles to elements based on a group of selectors, but it differs from `:is()` in that it has **zero specificity**. This means that styles applied with `:where()` will not affect the specificity of the CSS rule, making it useful for writing low-specificity rules that can be easily overridden by more specific ones.<br><br>### Syntax:<br>```css<br>:where(selector1, selector2, selector3) {<br>  /* Styles here */<br>}<br>```<br><br>### Key Points:<br>- **Zero specificity:** The rule in `:where()` won't add any specificity to the selectors inside it. This is helpful for creating broad, easily overridden styles.<br>- **Grouping selectors:** Like `:is()`, `:where()` can group multiple selectors to apply the same styles.<br><br>### Examples:<br><br>1. **Basic Example – Apply styles to multiple elements with zero specificity:**<br>```css<br>:where(h1, h2, h3) {<br>  color: red;<br>}<br>```<br>This will apply the red color to `&lt;h1&gt;`, `&lt;h2&gt;`, and `&lt;h3&gt;` elements, but since the `:where()` pseudo-class has zero specificity, it won't interfere with other more specific rules.<br><br>2. **Combining with Other Selectors:**<br>```css<br>:where(.container, .box) p {<br>  font-size: 18px;<br>}<br>```<br>This will apply a font size of 18px to `&lt;p&gt;` elements inside elements with the `.container` or `.box` classes.<br><br>3. **Targeting Elements Inside a Specific Section:**<br>```css<br>:where(section):hover {<br>  background-color: lightgray;<br>}<br>```<br>This will apply a light gray background to a `&lt;section&gt;` element when it is hovered, with the `:where()` making sure that this rule has no impact on the specificity of other hover styles.<br><br>4. **Using with Pseudo-classes:**<br>```css<br>:where(button, a):hover {<br>  color: blue;<br>}<br>```<br>This will apply the blue color to both `&lt;button&gt;` and `&lt;a&gt;` elements when they are hovered over, and again, the specificity remains low.<br><br>### Why Use `:where()`?<br>The `:where()` pseudo-class is most useful when you want to apply a set of styles to several elements but don’t want those styles to interfere with more specific styles you may have for those elements elsewhere in your CSS. It's a great tool for writing modular and maintainable styles.</pre></md></sn>","topic_id":624,"last_visited":"2024-12-10T14:43:08.494Z"}],"chapter_id":179}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-12-08T08:20:30.427Z","is_private":false,"folder":"Programming","web_url":"https://localhost","last_update_on":"2024-12-10T14:50:48.455Z"}