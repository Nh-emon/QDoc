{"subject_name":"Css","subject_id":46,"chapters":[{"chapter_name":"04.Selectors","topics":[{"topic_name":"14.Only child","topic_html":"<sn><h3>The :only-child pseudo-class selector example</h3><p>The <m>:only-child</m> CSS pseudo-class represents any element which is the only child of its parent</p></sn><fr>#Codepen^^https://codepen.io/Nazmul-Hossan/embed/preview/YPKqLyg?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":573,"last_visited":"2024-12-08T08:48:35.469Z"},{"topic_name":"13.Range Input","topic_html":"<sn><h3>How to style a Range input</h3><pre data-v=\"html\">&lt;input type=\"range\"&gt;&lt;/input&gt;</pre><md data-rr=\"true\"><pre><br>| **Effect**              | **Pseudo Selector**                                                                                     |<br>|-------------------------|-------------------------------------------------------------------------------------------------------|<br>| **Thumb**               | `input[type=range]::-webkit-slider-thumb`, `input[type=range]::-moz-range-thumb`, `input[type=range]::-ms-thumb` |<br>| **Track**               | `input[type=range]::-webkit-slider-runnable-track`, `input[type=range]::-moz-range-track`, `input[type=range]::-ms-track` |<br>| **OnFocus**             | `input[type=range]:focus`                                                                             |<br>| **Lower part of the track** | `input[type=range]::-moz-range-progress`, `input[type=range]::-ms-fill-lower` (not supported in WebKit browsers)       |</pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/RNbayLb?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":574,"last_visited":"2024-12-08T08:50:01.384Z"},{"topic_name":"12.ID Selector","topic_html":"<sn><h3>ID selectors</h3><p>ID selectors select DOM elements with the targeted ID. To select an element by a specific ID in CSS, the # prefix is<br>used</p><h5>For example :<br></h5><pre data-v=\"html\">&lt;div id=\"exampleID\"&gt;\n&lt;p&gt;Example&lt;/p&gt;\n&lt;/div&gt;</pre><p>â€¦can be selected by <m>#exampleID</m> in CSS as shown below</p><pre data-v=\"css\">#exampleID {\n      width: 20px;\n}</pre><nt>Note : The HTML specs do not allow multiple elements with the same ID<br></nt></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/JoPXvZz?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":575,"last_visited":"2024-12-08T09:19:11.014Z"},{"topic_name":"11.Applying sibling selector with global boolean","topic_html":"<sn><md data-rr=\"true\"><pre>Using the `~` selector and the `:checked` pseudo-class, you can implement a **global accessible boolean** in CSS that toggles styles for various elements based on the state of a checkbox. This approach is particularly useful for toggling themes, showing/hiding content, or creating CSS-only interactive componentsâ€”all without JavaScript.<br><br>---<br><br>### Concept: Global Boolean with CSS<br>The idea is to have a hidden checkbox act as a **global boolean**. When the checkbox is checked(via label which contain its id in its `for` attribute), its state can influence the styling of other elements using the `~` combinator.<br><br>---<br><br>### Example: Dark Mode Toggle<br><br>#### HTML<br>```html<br>&lt;div&gt;<br>  &lt;!-- Hidden Checkbox --&gt;<br>  &lt;input type=\"checkbox\" id=\"dark-mode-toggle\" hidden /&gt;<br><br>  &lt;!-- Label for the Toggle --&gt;<br>  &lt;label for=\"dark-mode-toggle\" class=\"toggle-label\"&gt;<br>    ðŸŒž Light Mode / ðŸŒ™ Dark Mode<br>  &lt;/label&gt;<br><br>  &lt;!-- Content to be Styled --&gt;<br>  &lt;div class=\"content\"&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>    &lt;p&gt;This is an example of a global boolean using CSS.&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>```<br><br>#### CSS<br>```css<br>/* Base styles */<br>body {<br>  margin: 0;<br>  font-family: Arial, sans-serif;<br>  transition: background-color 0.3s, color 0.3s;<br>}<br><br>.content {<br>  padding: 20px;<br>}<br><br>/* Styles for the label */<br>.toggle-label {<br>  display: inline-block;<br>  cursor: pointer;<br>  background-color: #ddd;<br>  padding: 10px 20px;<br>  border-radius: 5px;<br>  margin: 20px;<br>  font-weight: bold;<br>  text-align: center;<br>  transition: background-color 0.3s, color 0.3s;<br>}<br><br>/* Default light mode */<br>body {<br>  background-color: #ffffff;<br>  color: #000000;<br>}<br><br>.toggle-label {<br>  background-color: #f0f0f0;<br>  color: #333;<br>}<br><br>/* Dark mode styles when checkbox is checked */<br>input[type=\"checkbox\"]:checked ~ .toggle-label {<br>  background-color: #333;<br>  color: #fff;<br>}<br><br>input[type=\"checkbox\"]:checked ~ .content {<br>  background-color: #222;<br>  color: #ddd;<br>}<br>```<br><br>---<br><br>### How It Works<br>1. **Hidden Checkbox**:  <br>   The `&lt;input type=\"checkbox\" hidden /&gt;` acts as the toggle. Since it's hidden, users interact with the `&lt;label&gt;` instead.<br>   <br>2. **Using `:checked`**:  <br>   When the checkbox is checked, the `:checked` pseudo-class targets styles that depend on its state.<br><br>3. **Global Effect via `~`**:  <br>   The `~` combinator applies styles to sibling elements (e.g., `.toggle-label` and `.content`) when the checkbox is checked.<br><br>4. **Accessibility**:  <br>   - The `&lt;label&gt;` makes the checkbox accessible for screen readers and allows keyboard interaction.<br>   - No JavaScript is needed, simplifying implementation.<br><br>---<br><br>### Demo Flow<br>- By default, the page is in light mode.<br>- Clicking the `&lt;label&gt;` toggles the checkbox, switching the page to dark mode.<br>- This works purely in CSS, with the `~` selector cascading the state change to other elements.<br><br></pre></md></sn><fr>Embed^^https://codepen.io/Nazmul-Hossan/embed/preview/gbYrzJw?default-tab=html%2Cresult&amp;editable=true</fr>","topic_id":576,"last_visited":"2024-12-08T09:59:19.515Z"}],"chapter_id":179}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-12-08T08:20:30.427Z","is_private":false,"folder":"Programming","web_url":"https://localhost","last_update_on":"2024-12-08T10:11:07.440Z"}