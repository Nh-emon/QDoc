{"subject_name":"Assembly","subject_id":47,"chapters":[{"chapter_name":"01.Introduction","topics":[{"topic_name":"01.What is Assembly Language","topic_html":"<sn><h3>Assembly Language<br></h3><im>https://cdn.educba.com/academy/wp-content/uploads/2019/05/Assembly-language.jpg</im></sn><sn><md data-rr=\"true\"><pre>### üõ† **Assembly Language Overview**<br><br>Assembly language is a low-level programming language that acts as an interface between the high-level programming languages and machine code. It is specific to a computer's architecture and is used to directly communicate with the hardware.<br><br>---<br><br>#### üöÄ **Key Features of Assembly Language**<br>1. **Low-Level Access**  <br>   - Provides direct control over hardware components such as CPU and memory.<br>   - Works with registers, memory addresses, and CPU instructions.<br><br>2. **Symbolic Representation**  <br>   - Uses mnemonics (e.g., `MOV`, `ADD`, `SUB`) instead of binary opcodes.<br>   - Easier to read and write compared to raw machine code.<br><br>3. **Architecture-Specific**  <br>   - Tailored to the specific instruction set of the CPU, such as x86, ARM, or MIPS.<br><br>4. **Efficient Performance**  <br>   - Produces optimized machine code for specific tasks, leading to better performance.<br><br>5. **Low-Level Debugging**  <br>   - Offers insights into how software interacts with hardware, aiding in debugging and optimization.<br><br>---<br><br>#### üñ• **Structure of an Assembly Program**<br>An assembly program consists of:<br>1. **Directives:** Instructions for the assembler, e.g., `.data`, `.code`.<br>2. **Labels:** Named memory locations or instructions.<br>3. **Instructions:** Commands executed by the CPU, such as `MOV`, `ADD`, `JMP`.<br><br>---<br><br>#### üîë **Advantages**<br>- High performance for critical tasks.<br>- Small memory footprint.<br>- Direct hardware control.<br><br>#### ‚ö†Ô∏è **Disadvantages**<br>- Complex and error-prone.<br>- Non-portable across different architectures.<br>- Time-consuming development.<br><br>---<br><br>#### üåê **Example**<br>Below is a simple assembly program (x86 architecture) to add two numbers:<br><br>```asm<br>section .data<br>    num1 db 10    ; First number<br>    num2 db 20    ; Second number<br>    result db 0   ; To store the result<br><br>section .text<br>    global _start<br><br>_start:<br>    mov al, [num1]    ; Load num1 into AL register<br>    add al, [num2]    ; Add num2 to AL<br>    mov [result], al  ; Store result in memory<br><br>    ; Exit program<br>    mov eax, 60       ; syscall: exit<br>    xor edi, edi      ; exit code 0<br>    syscall<br>```<br><br>---<br><br>#### üìö **Common Use Cases**<br>- Embedded systems and firmware development.<br>- Performance-critical applications.<br>- Device drivers and operating systems.<br>- Reverse engineering and security.<br><br>### üí° **Fun Fact**  <br>Despite being considered \"outdated\" for general-purpose programming, assembly language remains indispensable in domains like hardware programming and performance optimization.</pre></md></sn>","topic_id":643,"last_visited":"2025-01-13T13:23:03.519Z"}],"chapter_id":184}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-12-20T10:54:50.624Z","is_private":false,"folder":"Programming","web_url":"https://qdock.free.nf","last_update_on":"2025-01-13T13:23:06.019Z"}