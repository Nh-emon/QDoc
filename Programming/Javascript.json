{"subject_name":"Javascript","subject_id":45,"chapters":[{"chapter_name":"05.Console","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>Console<br></h3><p>A browser's debugging console or web console is generally used by developers to <m>identify errors</m>, <m>understand flow</m><br><m>of execution</m>, <m>log data</m> and for many other purpose at runtime. This information is accessed through the console<br>object<img class=\"img-fluid\" alt=\"image\" src=\"https://developer.chrome.com/static/docs/devtools/console/image/the-console-panel-dc4828392d194.png\"></p><p>The information displayed by a <m>debugging/web console</m> is made available through the multiple methods of the<br>console Javascript object that can be consulted through<c> console.dir(console)</c>. Besides the <m>console.memory</m><br>property, the methods displayed are generally the following (taken from Chromium's output):</p><pre data-v=\"javascript\">Console {\n  log: ƒ log()\n  warn: ƒ warn()\n  error: ƒ error()\n  dir: ƒ dir()\n  table: ƒ table()\n  trace: ƒ trace()\n  group: ƒ group()\n  groupCollapsed: ƒ groupCollapsed()\n  groupEnd: ƒ groupEnd()\n  time: ƒ time()\n  timeLog: ƒ timeLog()\n  timeEnd: ƒ timeEnd()\n  clear: ƒ clear()\n  count: ƒ count()\n  countReset: ƒ countReset()\n  assert: ƒ assert()\n  debug: ƒ debug()\n  info: ƒ info()\n  dirxml: ƒ dirxml()\n  profile: ƒ profile()\n  profileEnd: ƒ profileEnd()\n  timeStamp: ƒ timeStamp()\n  context: ƒ context()\n  memory: MemoryInfo\n}\n</pre><p>The Console Object has mostly function except the <m>memory</m> which is a Object<br></p></sn><sn><h5>Opening Browser Console<br></h5><p>Browser console can be opened via right clicking on mouse and selecting inspect option from popup context menu<br></p><md data-rr=\"true\"><pre>Here's a table summarizing shortcuts to open the browser console for different browsers and operating systems:<br><br>| **Browser**      | **Windows/Linux**                     | **Mac**                          | **Notes**                                                                 |<br>|-------------------|---------------------------------------|-----------------------------------|---------------------------------------------------------------------------|<br>| **Google Chrome** | `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Opens the **Console** directly.                                           |<br>| **Mozilla Firefox**| `Ctrl + Shift + K`                  | `Cmd + Option + K`               | Opens the **Web Console** directly.                                       |<br>| **Microsoft Edge**| `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Similar to Chrome, as Edge is based on Chromium.                          |<br>| **Safari**        | *(N/A)* (Not on Windows/Linux)       | `Cmd + Option + C`               | Requires enabling **Developer Menu** in Safari Preferences &gt; Advanced.    |<br>| **Opera**         | `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Same shortcut as Chrome and Edge.                                         |<br><br></pre></md></sn>","topic_id":562,"last_visited":"2024-12-08T02:27:28.499Z"},{"topic_name":"01.Console Time","topic_html":"<sn><h3 class=\"text-info text-center\">&nbsp;Measuring time - console.time()</h3><p>console.time() can be used to measure how long a task in your code takes to run</p><p>Calling <m>console.time([label])</m> starts a new timer. When <m>console.timeEnd([label])</m> is called, the elapsed time, in<br>milliseconds, since the <m>original .time()</m> call is calculated and logged. Because of this behavior, you can call<br>.timeEnd() multiple times with the same label to log the elapsed time since the <m>original .time()</m> call was made.</p></sn><sn><h5>Example1 :<br></h5><pre data-v=\"javascript\">const test = 'testingUserSpeed'\nconsole.time(test)//here test is the label\nalert('click to continue')\nconsole.timeEnd(test)\n//testingUserSpeed: 5615ms - timer ended</pre></sn><sn><h5>Example2 :<br></h5><pre data-v=\"javascript\">console.time('test-x')\nconsole.log('processing...')\nsetTimeout(()=&gt;{\n   console.log('processing end')\n},3000)\nconsole.timeEnd('test-x')\n//processing...\n//test-x: Xms (elapsed time since console.time was called)\n//processing end</pre><p>As setTimeout is asynchronous so it run after 3s and <m>console.time</m> and <m>console.timeEnd</m> is synchronous<br></p></sn><sn><h5>Example 3 :<br></h5><pre data-v=\"javascript\">console.time('test-x');\nconsole.log('processing...');\nsetTimeout(() =&gt; {\n   console.log('processing end');\n   console.timeEnd('test-x');\n}, 3000);\n//processing...\n//processing end\n//test-x: 3002ms - timer ended\n</pre><pre class=\"copy-container parentEl\"></pre></sn>","topic_id":563,"last_visited":"2024-12-08T03:09:36.371Z"},{"topic_name":"02.Console Group","topic_html":"<sn><h3>Console Group<br></h3><md data-rr=\"true\"><pre>In JavaScript, `console.group()`, `console.groupCollapsed()`, and `console.groupEnd()` are methods used to group log messages in the browser's developer console, making it easier to organize and collapse/expand related logs.<br><br>### 1. `console.group()`<br><br>- **Purpose**: Starts a new group in the console, where all subsequent `console.log()` messages will be nested under it.<br>- **How it works**: When a `console.group()` is called, all logs that follow will be indented and displayed inside a collapsible group, making the output more organized.<br><br>#### Example:<br>```javascript<br>console.group('My Group');<br>console.log('First log inside the group');<br>console.log('Second log inside the group');<br>console.groupEnd();<br>```<br>**Explanation**:<br>- `console.group('My Group')` starts the group and labels it \"My Group\".<br>- The following two `console.log()` statements will be indented and shown as part of the group.<br>- `console.groupEnd()` ends the group, returning to normal indentation.<br><br>### 2. `console.groupCollapsed()`<br><br>- **Purpose**: Similar to `console.group()`, but the group is collapsed by default in the console, meaning you have to expand it manually to view the logs inside.<br>- **How it works**: This method is useful if you have large or complex groups of logs and want to minimize the clutter in the console initially.<br><br>#### Example:<br>```javascript<br>console.groupCollapsed('Collapsed Group');<br>console.log('This log is inside a collapsed group');<br>console.log('Another log inside the collapsed group');<br>console.groupEnd();<br>```<br>**Explanation**:<br>- `console.groupCollapsed('Collapsed Group')` starts a group that is initially collapsed in the console.<br>- The logs inside this group are hidden until you expand the group manually.<br><br>### 3. `console.groupEnd()`<br><br>- **Purpose**: Ends the current group, returning the log output to the previous indentation level (or no indentation if no other group exists).<br>- **How it works**: Every call to `console.group()` or `console.groupCollapsed()` should be paired with a corresponding `console.groupEnd()` to close the group.<br><br>#### Example:<br>```javascript<br>console.group('Outer Group');<br>console.log('Log inside outer group');<br><br>console.group('Inner Group');<br>console.log('Log inside inner group');<br>console.groupEnd();<br><br>console.log('Back to outer group');<br>console.groupEnd();<br>```<br><br>**Explanation**:<br>- The outer group is started with `console.group('Outer Group')`, and an inner group is created with `console.group('Inner Group')`.<br>- `console.groupEnd()` closes the inner group first, and then the outer group is closed at the end.<br>- The output will show the nested structure in the console, with the inner group indented further.<br><br>### Summary:<br>- **`console.group()`**: Creates a new, expandable group in the console.<br>- **`console.groupCollapsed()`**: Creates a new, collapsed group in the console.<br>- **`console.groupEnd()`**: Ends the current group and returns to the previous indentation level.<br><br>These methods are great for structuring complex logs, especially when debugging or working with large datasets, helping you organize information in a more readable format.</pre></md></sn>","topic_id":565,"last_visited":"2024-12-08T05:39:34.648Z"},{"topic_name":"02.Formatting Console Output","topic_html":"<sn><h3>Formatting Console Output<br></h3><p>Many of the console's print methods can also handle C-like string formatting, using % tokens:</p><pre data-v=\"javascript\">console.log('%s has %d points', 'Sam', 100)\n//Sam has 100 points</pre><md data-rr=\"true\"><pre>Here is a table for the full list of format specifiers in JavaScript:<br><br>| **Specifier** | **Output**                                                     |<br>|---------------|-----------------------------------------------------------------|<br>| `%s`          | Formats the value as a string                                  |<br>| `%i` or `%d`  | Formats the value as an integer                                |<br>| `%f`          | Formats the value as a floating-point value                    |<br>| `%o`          | Formats the value as an expandable DOM element                 |<br>| `%O`          | Formats the value as an expandable JavaScript object           |<br>| `%c`          | Applies CSS style rules to the output string (from 2nd parameter) |</pre></md></sn><sn><h5>Example :<br></h5><pre data-v=\"javascript\">console.log('My name is %s','Emon')\nconsole.log('My age is %i',21)\nconsole.log('My height is %f',5.7)\nconsole.log('%o',document.body)\nconsole.log('%O',{name:'emon',age:21,height:5.7})\nconsole.log('%cHello World','color:blue;font-size:xx-large')</pre><h5>output<br></h5><im>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/js%20media/console%20formatiing%20output%20screenshot.png</im></sn><sn><h5>Advanced Styling<br></h5><p>When the CSS format specifier (%c) is placed at the left side of the string, the print method will accept a second<br>parameter with CSS rules which allow fine-grained control over the formatting of that string:</p><ul><li>Any substring to the right of a %c has a corresponding parameter in the print method</li><li>\nThis parameter may be an empty string, if there is no need to apply CSS rules to that same substring</li><li>\nIf two %c format specifiers are found, the 1st (encased in %c) and 2nd substring will have their rules defined in\nthe 2nd and 3rd parameter of the print method respectively</li><li>\nIf three %c format specifiers are found, then the 1st, 2nd and 3rd substrings will have their rules defined in\nthe 2nd , 3rd and 4th parameter respectively, and so on</li></ul><pre data-v=\"javascript\">console.log('chapter is %cremoved','color:crimson') \nconsole.log('%cchapter is %cremoved','color:blue','color:crimson')\nconsole.log('%cchapter%c is %cremoved','color:blue','','color:crimson')</pre></sn>","topic_id":564,"last_visited":"2024-12-08T05:39:12.249Z"},{"topic_name":"03.Console log","topic_html":"<sn><h3>Printing to a browser's debugging console</h3><p>A browser's debugging console can be used in order to print simple messages. This debugging or web console can<br>be directly opened in the browser ( F12 key in most browsers ) and<br>the log method of the console JavaScript object can be invoked by typing the following</p><pre data-v=\"javascript\">console.log('My message');</pre><p>Then, by pressing <c>Enter</c> , this will display My message in the debugging console</p></sn><sn><p>console.log() can be called with any number of arguments and variables available in the current scope. Multiple<br>arguments will be printed in one line with a small space between them</p><pre data-v=\"javascript\">var obj = { test: 1 };\nconsole.log(['string'], 1, obj, window);</pre></sn><sn><p>Beside plain strings, console.log() can handle other types, like arrays, objects, dates, functions, etc.</p><pre data-v=\"javascript\">console.log([0, 3, 32, 'a string']);\nconsole.log({ key1: 'value', key2: 'another value'});</pre></sn><sn><p>Certain types such as Date objects and functions may be displayed differently</p><pre data-v=\"javascript\">console.log(new Date(0));\nconsole.log(function test(a, b) { return c; });\n// &gt;Date Thu Jan 01 1970 06:00:00 GMT+0600 (Bangladesh Standard Time)\n// &gt;function test(a, b)</pre></sn><sn><h5>Other Print Method<br></h5><p>In addition to the log method, modern browsers also support similar methods:</p><md data-rr=\"true\"><pre><br>| **Function Name**     | **Features**                                                                 |<br>|-----------------------|-------------------------------------------------------------------------------|<br>| **`console.info()`**   | Logs general information to the console. Displays with blue text (default).   |<br>| **`console.warn()`**   | Logs a warning message. Displays with a yellow warning icon (triangle).       |<br>| **`console.error()`**  | Logs an error message. Displays with a red error icon (circle) or red text.   |<br>| **`console.timestamp()`** | (Custom method) Logs the current timestamp, often used for logging time-related data. |<br>| **`console.trace()`**  | Logs the stack trace, showing the path the code execution took.              |</pre></md><h5>Example :<br></h5><pre data-v=\"javascript\">console.info('my browser is firefox')\nconsole.warn('switch to edge -microsoft')\nconsole.error('invalid api')\nconsole.timeStamp('msg')\n\nfunction sec(){\n\tfirst()\n}\nfunction first(){\n\tconsole.trace()\n}\nsec()</pre><nt>Output :<br><im>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/js%20media/different%20console%20type.png</im></nt></sn>","topic_id":566,"last_visited":"2024-12-08T06:14:39.611Z"},{"topic_name":"04.Console trace","topic_html":"<sn><h3>Including a stack trace when logging - console.trace()</h3><p><code>console.trace()</code> is a method in JavaScript that outputs a stack trace to the console, showing the path your code has taken to reach the point where <code>console.trace()</code> is called. This is useful for debugging because it helps you identify how your code has reached a particular line and what function calls led to it.</p></sn><sn><h5>Example<br></h5><pre data-v=\"javascript\">function functionA() {\n  functionB();\n}\n\nfunction functionB() {\n  functionC();\n}\n\nfunction functionC() {\n  console.trace('Stack trace at functionC');\n}\n\nfunctionA();\n</pre><h5>Output :<br></h5><pre data-v=\"text\">Stack trace at functionC\n    at functionC (example.js:9)\n    at functionB (example.js:5)\n    at functionA (example.js:2)\n    at example.js:12\n</pre></sn><sn><h5>Explanation :<br></h5><ul><li>When functionC() is called, it logs the stack trace with console.trace</li><li>\nThe trace shows the call stack, starting from functionC(), then functionB(), then functionA(), and finally the point where functionA() was invoked in the script</li><li>\nThis helps to understand the sequence of function calls leading up to the trace</li></ul></sn><sn><nt>Note: Where available it's also useful to know that the same stack trace is accessible as a property of the Error<br>object. This can be useful for post-processing and gathering automated feedback.</nt><pre data-v=\"javascript\">var e = new Error('foo');\nconsole.log(e.stack);</pre></sn>","topic_id":567,"last_visited":"2024-12-08T06:19:28.038Z"},{"topic_name":"05.Console table","topic_html":"<sn><h3>Tabulating values - console.table()<br></h3><p>In most environments, console.table() can be used to display objects and arrays in a tabular format</p><pre data-v=\"javascript\">console.table(['Hello', 'world']);</pre><h5>output :<br></h5><tb>\n<pre>| (index)<br> | Values<br> |\n| ---  | --- |\n| 0<br> | Hello<br> |\n| 1<br> | world<br> |\n</pre></tb><h5>Object :<br></h5><pre data-v=\"javascript\">console.table({foo: 'bar', bar: 'baz'})</pre><tb>\n<pre>| (index)<br> | Values<br> |\n| ---  | --- |\n| foo<br> | bar<br> |\n| bar<br> | baz<br> |\n</pre></tb></sn><sn><h5>Example of large Object :<br></h5><pre data-v=\"javascript\">var personArr = [\n{\n\"personId\": 123,\n\"name\": \"Jhon\",\n\"city\": \"Melbourne\",\n\"phoneNo\": \"1234567890\"\n},\n{\n\"personId\": 124,\n\"name\": \"Amelia\",\n\"city\": \"Sydney\",\n\"phoneNo\": \"1234567890\"\n},\n{\n\"personId\": 125,\n\"name\": \"Emily\",\n\"city\": \"Perth\",\n\"phoneNo\": \"1234567890\"\n},\n{\n\"personId\": 126,\n\"name\": \"Abraham\",\n\"city\": \"Perth\",\n\"phoneNo\": \"1234567890\"\n}\n];\nconsole.table(personArr, ['name', 'personId']);</pre><im>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/js%20media/console%20table.png</im></sn>","topic_id":568,"last_visited":"2024-12-08T06:46:11.589Z"},{"topic_name":"06.Console count","topic_html":"<sn><h3>&nbsp;Counting - console.count()</h3><p><m>console.count([obj])</m> places a counter on the object's value provided as argument. Each time this method is invoked, the counter is increased (with the exception of the empty string ''). A label together with a number is displayed in the debugging console according to the following format :<br></p><p class=\"box-bg-1 text-info\">[label] : X<br></p><p>label represents the value of the object passed as argument and X represents the counter's value.</p></sn><sn><p>An object's value is always considered, even if variables are provided as arguments:<br></p><pre data-v=\"javascript\">var o1 = 1, o2 = '2', o3 = \"\";\nconsole.count(o1); // 1: 1\nconsole.count(o2); // 2: 1\nconsole.count(o3); //&lt;no label&gt; : 1\nconsole.count(1);  // 1:2\nconsole.count('2');// 2:2\nconsole.count(''); //&lt;no label&gt; : 2</pre></sn><sn><p>Strings with numbers are converted to Number objects :</p><pre data-v=\"javascript\">console.count(42.3);            //42.3: 1\nconsole.count(Number('42.3'));  //42.3: 2\nconsole.count('42.3')           //42.3: 3\n</pre></sn><sn><p>Functions point always to the global Function object :</p><pre data-v=\"javascript\">console.count(console.constructor);\nconsole.count(function(){});\nconsole.count(Object);\nvar fn1 = function myfn(){};\nconsole.count(fn1);\nconsole.count(Number);\n</pre><pre data-v=\"text\">[Function: Object]: 1\nfunction (): 1\n[Function: Object]: 2\nfunction myfn: 1\n[Function: Number]: 1</pre></sn><sn><p>Certain objects get specific counters associated to the type of object they refer to :</p><pre data-v=\"javascript\">console.count(undefined);\nconsole.count(document.Batman);\nvar obj;\nconsole.count(obj);\nconsole.count(Number(undefined));\nconsole.count(NaN);\nconsole.count(NaN+3);\nconsole.count(1/0);\nconsole.count(String(1/0));\nconsole.count(window);\nconsole.count(document);\nconsole.count(console);\nconsole.count(console.__proto__);\nconsole.count(console.constructor.prototype);\nconsole.count(console.__proto__.constructor.prototype);\nconsole.count(Object.getPrototypeOf(console));\nconsole.count(null);</pre><pre data-v=\"text\">undefined: 1\nundefined: 2\nundefined: 3\nNaN: 1\nNaN: 2\nNaN: 3\nInfinity: 1\nInfinity: 1\n[object Window]: 1\n[object Document]: 1\n[object Console]: 1\n[object Object]: 1\n[object Object]: 2\n[object Object]: 3\n[object Object]: 4\nnull: 1\n</pre></sn><sn><p>If no argument is provided while sequentially inputting the count method in the debugging console, an empty<br>string is assumed as parameter<br></p><pre data-v=\"bash\">console.count()   // : 1\nconsole.count('') // : 2\nconsole.count(\"\") // : 3</pre></sn>","topic_id":569,"last_visited":"2024-12-08T06:52:22.116Z"},{"topic_name":"07.Console clear","topic_html":"<sn><h5>Clearing the console - console.clear()</h5><p>You can clear the console window using the <c> console.clear()</c> method. This removes all previously printed messages in the console and may print a message like \"Console was cleared\" in some environments.</p></sn>","topic_id":570,"last_visited":"2024-12-08T07:20:38.835Z"},{"topic_name":"08.Console dir","topic_html":"<sn><h3>Displaying objects and XML interactively console.dir() ,console.dirxml()</h3><p><c>console.dir(object)</c> displays an interactive list of the properties of the specified JavaScript object. The output is<br>presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects</p><p><m>console.dirxml(object)</m> prints an XML representation of the descendant elements of object if possible, or the JavaScript representation if not. Calling <m>console.dirxml()</m> on HTML and XML elements is equivalent to calling console.log()</p><pre data-v=\"javascript\">console.dir([object])\nconsole.dir(document)\nconsole.dirxml(document)</pre></sn>","topic_id":571,"last_visited":"2024-12-08T07:49:14.411Z"},{"topic_name":"09.Console assert","topic_html":"<sn><h3>Debugging with assertions - console.assert()</h3><p>Writes an error message to the console if the assertion is false. Otherwise, if the assertion is true, this does nothing.</p><pre data-v=\"javascript\">console.assert('one' === 1)</pre><al class=\"alert alert-danger\"><p class=\"alert-body\"><span class=\"message-body-wrapper\"><span class=\"message-flex-body\"><span class=\"message-body devtools-monospace\"><span>Assertion failed: </span></span></span></span></p></al><pre data-v=\"javascript\">console.assert(true,\"testing assertion\")\n//undefined\nconsole.assert(true,\"testing assertion\",NaN,undefined,Object)\n//undefined\nconsole.assert(false,\"testing assertion\",NaN,undefined,Object)\n</pre><al class=\"alert alert-danger\"><p class=\"alert-body\"><span class=\"message-body-wrapper\"><span class=\"message-flex-body\"><span class=\"message-body devtools-monospace\"><span>Assertion failed: <span class=\"objectBox objectBox-string\">testing assertion</span> <span class=\"objectBox objectBox-nan\">NaN</span> <span class=\"objectBox objectBox-undefined\">undefined</span></span></span></span></span></p></al></sn>","topic_id":572,"last_visited":"2024-12-08T08:06:38.962Z"}],"chapter_id":178},{"chapter_name":"12.Arrays","topics":[{"topic_name":"01.Converting Array like Object to Array","topic_html":"<sn><md data-rr=\"true\"><pre>## **Converting Array-like Objects to Arrays**<br><br>### **What are Array-like Objects?**<br><br>JavaScript has \"Array-like Objects,\" which are object representations of arrays with a `length` property. For example:<br><br>```javascript<br>var realArray = ['a', 'b', 'c'];<br>var arrayLike = {<br>  0: 'a',<br>  1: 'b',<br>  2: 'c',<br>  length: 3<br>};<br>```<br><br>### **Common Examples of Array-like Objects**<br>- **`arguments`** object in functions.<br>- **`HTMLCollection`** or **`NodeList`** objects returned from DOM methods like `document.getElementsByTagName` or `document.querySelectorAll`.<br><br>### **Key Differences Between Arrays and Array-like Objects**<br>- Array-like objects inherit from **`Object.prototype`**, not **`Array.prototype`**.<br>- They **cannot access common Array prototype methods** such as `forEach()`, `push()`, `map()`, `filter()`, and `slice()`.<br><br>Example:<br>```javascript<br>var parent = document.getElementById('myDropdown');<br>var desiredOption = parent.querySelector('option[value=\"desired\"]');<br>var domList = parent.children;<br><br>// Errors!<br>domList.indexOf(desiredOption); // Error! indexOf is not defined.<br>domList.forEach(() =&gt; {});      // Error! forEach is not defined.<br>```<br><br>However, the `arguments` object can still display its contents:<br>```javascript<br>function func() {<br>  console.log(arguments);<br>}<br>func(1, 2, 3); // → [1, 2, 3]<br>```<br><br>---<br><br>## **Converting Array-like Objects to Arrays**<br><br>### **Using ES6+ Methods**<br><br>1. **`Array.from`**<br>   - Converts array-like objects to arrays.<br>   - Example:<br>     ```javascript<br>     const arrayLike = {<br>       0: 'Value 0',<br>       1: 'Value 1',<br>       length: 2<br>     };<br><br>     const realArray = Array.from(arrayLike);<br>     realArray.forEach(value =&gt; {<br>       console.log(value); // Works!<br>     });<br>     ```<br><br>2. **`for...of`**<br>   - Example:<br>     ```javascript<br>     const arrayLike = { 0: 'Value 0', 1: 'Value 1', length: 2 };<br>     const realArray = [];<br><br>     for (const element of Array.from(arrayLike)) {<br>       realArray.push(element);<br>     }<br>     ```<br><br>3. **Spread Operator (`...`)**<br>   - Example:<br>     ```javascript<br>     const realArray = [...arrayLike];<br>     ```<br><br>4. **`Object.values`**<br>   - Requires ES7+.<br>   - Example:<br>     ```javascript<br>     const realArray = Object.values(arrayLike);<br>     ```<br><br>5. **`Object.keys`**<br>   - Example:<br>     ```javascript<br>     const realArray = Object.keys(arrayLike).map(key =&gt; arrayLike[key]);<br>     ```<br><br>---<br><br>### **Using Pre-ES6 Methods**<br><br>1. **`Array.prototype.slice`**<br>   - Example:<br>     ```javascript<br>     var arrayLike = { 0: 'Value 0', 1: 'Value 1', length: 2 };<br><br>     var realArray = Array.prototype.slice.call(arrayLike);<br>     console.log(realArray.indexOf('Value 1')); // Works!<br>     ```<br><br>2. **Calling Array Methods Directly**<br>   - Use `Function.prototype.call` to invoke Array methods directly:<br>     ```javascript<br>     var domList = document.querySelectorAll('#myDropdown option');<br><br>     Array.prototype.forEach.call(domList, function(option) {<br>       console.log(option); // Works!<br>     });<br>     ```<br><br>3. **Borrowing Array Methods**<br>   - Example:<br>     ```javascript<br>     var arrayLike = { 0: 'Value 0', 1: 'Value 1', length: 2 };<br><br>     [].forEach.bind(arrayLike)(function(val) {<br>       console.log(val); // Works!<br>     });<br>     ```<br><br>---<br><br>### **Modifying Items During Conversion**<br><br>With ES6+ `Array.from`, you can specify a map function to transform items during conversion:<br>```javascript<br>Array.from(domList, element =&gt; element.tagName);<br>// Creates an array of tag names.<br>```</pre></md></sn><sn><md data-rr=\"true\"><pre>### **Q&amp;A Section**<br><br>---<br><br>#### **Q1: Why can’t we use array methods like `forEach` on DOM returned collections (`children`)?**<br><br>- **Answer**: <br>  DOM methods like `parent.children` return an **`HTMLCollection`**, which is an array-like object but does not inherit from `Array.prototype`. Hence, methods like `forEach` or `indexOf` are not available.  <br>  To use these methods, you must convert the `HTMLCollection` to an array using `Array.from()`.<br><br>---<br><br>#### **Q2: Can we use `forEach` directly on DOM collections like `querySelectorAll` results?**<br><br>- **Answer**: <br>  Yes, `querySelectorAll` returns a **`NodeList`**, which is array-like **and iterable** in modern browsers. Therefore, methods like `forEach` work directly on `NodeList` without conversion.<br><br>---<br><br>#### **Q3: Why does the following code throw an error?**<br><br>```javascript<br>const arrLike = { 0: 'emon', 1: 'mahin', length: 2 };<br>const arr = [...arrLike];<br>```<br><br>- **Answer**: <br>  The error occurs because `arrLike` is not **iterable**. The spread operator (`...`) requires the object to implement a `[Symbol.iterator]` method, which `arrLike` lacks. Use `Array.from()` to convert such objects to arrays.<br><br>---<br><br>#### **Q4: Why does the note include the spread operator (`[...]`) for converting array-like objects to arrays?**<br><br>- **Answer**: <br>  The spread operator works on **iterable** array-like objects like `NodeList`. Since `NodeList` is iterable in modern browsers, `[...nodeList]` works. However, for non-iterable objects (e.g., `{0: 'emon', 1: 'mahin', length: 2}`), you must use `Array.from()` instead.<br><br>--- <br><br>This concise Q&amp;A should help you quickly recall key points about array-like objects and their conversion to arrays!</pre></md></sn>","topic_id":590,"last_visited":"2024-12-09T22:12:28.194Z"},{"topic_name":"02.Reducing Values","topic_html":"<sn><md data-rr=\"true\"><pre><br>### Reducing Values<br>**Version ≥ 5.1**<br><br>The `reduce()` method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.<br><br>#### **Array Sum**<br>The `reduce()` method can condense all values of an array into a single value:<br>```javascript<br>[1, 2, 3, 4].reduce(function(a, b) {<br>  return a + b;<br>});<br>// → 10<br>```<br><br>An optional second parameter can be passed to `reduce()`. Its value will be used as the first argument (`a`) for the first call to the callback:<br>```javascript<br>[2].reduce(function(a, b) {<br>  console.log(a, b); // prints: 1 2<br>  return a + b;<br>}, 1);<br>// → 3<br>```<br><br>---<br><br>#### **Flatten Array of Objects**<br>To flatten an array of objects into a single object, use `reduce()` as shown below:<br><br>**Version ≤ 5.1:**<br>```javascript<br>var array = [{<br>  key: 'one',<br>  value: 1<br>}, {<br>  key: 'two',<br>  value: 2<br>}, {<br>  key: 'three',<br>  value: 3<br>}];<br><br>array.reduce(function(obj, current) {<br>  obj[current.key] = current.value;<br>  return obj;<br>}, {});<br>// Result: { one: 1, two: 2, three: 3 }<br>```<br><br>**Version ≥ 6:**<br>```javascript<br>array.reduce((obj, current) =&gt; Object.assign(obj, {<br>  [current.key]: current.value<br>}), {});<br>```<br><br>**Version ≥ 7:**<br>```javascript<br>array.reduce((obj, current) =&gt; ({...obj, [current.key]: current.value}), {});<br>```<br><br>Note: The Rest/Spread Properties is not supported by ES2016, but you can use the Babel plugin `babel-plugin-transform-object-rest-spread` for support.<br><br>---<br><br>#### **Map Using Reduce**<br>You can use the initial value parameter to call a function on an array of items and return the results in a new array:<br>```javascript<br>function map(list, fn) {<br>  return list.reduce(function(newList, item) {<br>    return newList.concat(fn(item));<br>  }, []);<br>}<br><br>// Usage:<br>map([1, 2, 3], function(n) { return n * n; });<br>// → [1, 4, 9]<br>```<br><br>&gt; **Note:** This is for illustration (of the initial value parameter) only. For list transformations, prefer using the native `map()`.<br><br>---<br><br>#### **Find Min or Max Value**<br>You can use `reduce()` to track the min or max value in an array. Here's an example to find the minimum value:<br>```javascript<br>var arr = [4, 2, 1, -10, 9];<br>arr.reduce(function(a, b) {<br>  return a &lt; b ? a : b;<br>}, Infinity);<br>// → -10<br>```<br><br>---<br><br>#### **Find Unique Values**<br>To return unique values from an array, use `reduce()` with an empty array as the second argument:<br>```javascript<br>var arr = [1, 2, 1, 5, 9, 5];<br>arr.reduce((prev, number) =&gt; {<br>  if (prev.indexOf(number) === -1) {<br>    prev.push(number);<br>  }<br>  return prev;<br>}, []);<br>// → [1, 2, 5, 9]<br>```<br><br></pre></md></sn>","topic_id":591,"last_visited":"2024-12-10T03:51:03.067Z"},{"topic_name":"03.Mapping Values","topic_html":"<sn><md data-rr=\"true\"><pre><br>### Mapping Values<br><br>The `map()` method is used to generate a new array based on the values of an existing array.<br><br>#### **Example: Generate String Lengths**<br>To create an array of string lengths from an array of strings:<br><br>**Version ≥ 5.1:**<br>```javascript<br>['one', 'two', 'three', 'four'].map(function(value, index, arr) {<br>  return value.length;<br>});<br>// → [3, 3, 5, 4]<br>```<br><br>**Version ≥ 6:**<br>```javascript<br>['one', 'two', 'three', 'four'].map(value =&gt; value.length);<br>// → [3, 3, 5, 4]<br>```<br><br>---<br><br>#### **How `map()` Works**<br>The `map()` function calls the provided callback function for each element in the array, passing the following parameters in order:<br><br>1. **The element itself**  <br>2. **The index of the element** (e.g., 0, 1, 2...)  <br>3. **The entire array**  <br><br>---<br><br>#### **Setting the `this` Context**<br>The `map()` method also provides an optional second parameter to set the value of `this` inside the mapping function.  <br><br>- **Default `this` in Browsers:**  <br>  In a browser environment, the default value of `this` is `window`.<br><br>  ```javascript<br>  ['one', 'two'].map(function(value, index, arr) {<br>    console.log(this); // window (the default value in browsers)<br>    return value.length;<br>  });<br>  ```<br><br>- **Custom `this` Value:**  <br>  You can specify a custom object as the value of `this`:<br><br>  ```javascript<br>  ['one', 'two'].map(function(value, index, arr) {<br>    console.log(this); // Object { documentation: \"randomObject\" }<br>    return value.length;<br>  }, {<br>    documentation: 'randomObject'<br>  });<br>  ```</pre></md></sn>","topic_id":592,"last_visited":"2024-12-10T03:52:46.808Z"},{"topic_name":"04.Filtering Object Values","topic_html":"<sn><md data-rr=\"true\"><pre>### Filtering Object Arrays<br><br>The `filter()` method is used to create a new array containing only the elements of the original array that pass the test provided by a callback function.<br><br>---<br><br>#### **Filtering Numbers**<br>For example, to filter all odd numbers from an array:<br><br>```javascript<br>var numbers = [5, 32, 43, 4];<br>```<br><br>**Version ≥ 5.1:**<br>```javascript<br>var odd = numbers.filter(function(n) {<br>  return n % 2 !== 0;<br>});<br>```<br><br>**Version ≥ 6:**<br>```javascript<br>let odd = numbers.filter(n =&gt; n % 2 !== 0);<br>```<br><br>The result is:<br>```javascript<br>// odd = [5, 43]<br>```<br><br>---<br><br>#### **Filtering Objects**<br>The `filter()` method can also be used with arrays of objects. For example, to filter people younger than 35:<br><br>```javascript<br>var people = [<br>  { id: 1, name: \"John\", age: 28 },<br>  { id: 2, name: \"Jane\", age: 31 },<br>  { id: 3, name: \"Peter\", age: 55 }<br>];<br>```<br><br>**Version ≥ 5.1:**<br>```javascript<br>var young = people.filter(function(person) {<br>  return person.age &lt; 35;<br>});<br>```<br><br>**Version ≥ 6:**<br>```javascript<br>let young = people.filter(person =&gt; person.age &lt; 35);<br>```<br><br>The result is:<br>```javascript<br>// young = [<br>//   { id: 1, name: \"John\", age: 28 },<br>//   { id: 2, name: \"Jane\", age: 31 }<br>// ]<br>```<br><br>---<br><br>#### **Searching for a Value in Objects**<br>You can search for a value across all properties of the objects in an array:<br><br>```javascript<br>var young = people.filter((obj) =&gt; {<br>  var flag = false;<br>  Object.values(obj).forEach((val) =&gt; {<br>    if (String(val).indexOf(\"J\") &gt; -1) {<br>      flag = true;<br>      return;<br>    }<br>  });<br>  if (flag) return obj;<br>});<br>```<br><br>This searches for the letter `\"J\"` in any property of the objects and returns:<br>```javascript<br>// young = [<br>//   { id: 1, name: \"John\", age: 28 },<br>//   { id: 2, name: \"Jane\", age: 31 }<br>// ]<br>```</pre></md></sn>","topic_id":593,"last_visited":"2024-12-10T04:14:25.212Z"},{"topic_name":"05.Sorting arrays","topic_html":"<sn><md data-rr=\"true\"><pre>### Sorting Arrays<br><br>The `.sort()` method sorts the elements of an array. By default, it sorts based on string Unicode code points. To sort an array numerically or in custom orders, a `compareFunction` must be provided.<br><br>&gt; **Note:** The `.sort()` method is impure. It sorts the array **in-place**, meaning the original array is modified and re-ordered.<br><br>---<br><br>#### **Default Sort**<br>The default sort arranges elements in Unicode order:<br>```javascript<br>['s', 't', 'a', 34, 'K', 'o', 'v', 'E', 'r', '2', '4', 'o', 'W', -1, '-4'].sort();<br>```<br>**Results:**<br>```javascript<br>[-1, '-4', '2', 34, '4', 'E', 'K', 'W', 'a', 'l', 'o', 'o', 'r', 's', 't', 'v']<br>```<br>- Uppercase letters are sorted before lowercase.<br>- Numbers are not sorted numerically.<br><br>---<br><br>#### **Alphabetical Sort**<br>Sort alphabetically:<br>```javascript<br>['s', 't', 'a', 'c', 'K', 'o', 'v', 'E', 'r', 'f', 'l', 'W', '2', '1'].sort((a, b) =&gt; {<br>  return a.localeCompare(b);<br>});<br>```<br>**Results:**<br>```javascript<br>['1', '2', 'a', 'c', 'E', 'f', 'K', 'l', 'o', 'r', 's', 't', 'v', 'W']<br>```<br><br>**Safe Alphabetical Sort (with mixed types):**<br>```javascript<br>['s', 't', 'a', 'c', 'K', 1, 'v', 'E', 'r', 'f', 'l', 'o', 'W'].sort((a, b) =&gt; {<br>  return a.toString().localeCompare(b);<br>});<br>```<br><br>---<br><br>#### **String Sorting by Length**<br>- **Longest First:**<br>  ```javascript<br>  [\"zebras\", \"dogs\", \"elephants\", \"penguins\"].sort(function(a, b) {<br>    return b.length - a.length;<br>  });<br>  ```<br>  **Results:**<br>  ```javascript<br>  [\"elephants\", \"penguins\", \"zebras\", \"dogs\"]<br>  ```<br><br>- **Shortest First:**<br>  ```javascript<br>  [\"zebras\", \"dogs\", \"elephants\", \"penguins\"].sort(function(a, b) {<br>    return a.length - b.length;<br>  });<br>  ```<br>  **Results:**<br>  ```javascript<br>  [\"dogs\", \"zebras\", \"penguins\", \"elephants\"]<br>  ```<br><br>---<br><br>#### **Numerical Sort**<br>- **Ascending Order:**<br>  ```javascript<br>  [100, 1000, 10, 10000, 1].sort(function(a, b) {<br>    return a - b;<br>  });<br>  ```<br>  **Results:**<br>  ```javascript<br>  [1, 10, 100, 1000, 10000]<br>  ```<br><br>- **Descending Order:**<br>  ```javascript<br>  [100, 1000, 10, 10000, 1].sort(function(a, b) {<br>    return b - a;<br>  });<br>  ```<br>  **Results:**<br>  ```javascript<br>  [10000, 1000, 100, 10, 1]<br>  ```<br><br>---<br><br>#### **Sorting by Even and Odd Numbers**<br>Separate even numbers first, then sort numerically:<br>```javascript<br>[10, 21, 4, 15, 7, 99, 0, 12].sort(function(a, b) {<br>  return (a &amp; 1) - (b &amp; 1) || a - b;<br>});<br>```<br>**Results:**<br>```javascript<br>[0, 4, 10, 12, 7, 15, 21, 99]<br>```<br><br>---<br><br>#### **Sorting Dates**<br>Sort dates in descending order:<br>```javascript<br>var dates = [<br>  new Date(2007, 11, 10),<br>  new Date(2014, 2, 21),<br>  new Date(2009, 6, 11),<br>  new Date(2016, 7, 23)<br>];<br><br>// Method 1: Using comparison<br>dates.sort(function(a, b) {<br>  if (a &gt; b) return -1;<br>  if (a &lt; b) return 1;<br>  return 0;<br>});<br><br>// Method 2: Using subtraction<br>dates.sort(function(a, b) {<br>  return b - a;<br>});<br>```<br>**Results:**<br>```javascript<br>[<br>  \"Tue Aug 23 2016 00:00:00 GMT-0600 (MDT)\",<br>  \"Fri Mar 21 2014 00:00:00 GMT-0600 (MDT)\",<br>  \"Sat Jul 11 2009 00:00:00 GMT-0600 (MDT)\",<br>  \"Mon Dec 10 2007 00:00:00 GMT-0700 (MST)\"<br>]<br>```</pre></md></sn>","topic_id":594,"last_visited":"2024-12-10T04:19:19.102Z"},{"topic_name":"06.Iteration","topic_html":"<sn><md data-rr=\"true\"><pre>### Iteration<br><br>JavaScript provides various ways to iterate over arrays and objects. Here's an overview of different techniques:<br><br>---<br><br>#### **1. Traditional `for` Loop**<br><br>A traditional `for` loop consists of three components:<br>1. **Initialization**: Executed before the loop starts.<br>2. **Condition**: Checked before every iteration; exits if false.<br>3. **Afterthought**: Executed after each iteration.<br><br>Syntax:<br>```javascript<br>for (initialization; condition; afterthought) {<br>  // Do stuff<br>}<br>```<br><br>**Minimal Example:**<br>```javascript<br>for (;;) {<br>  // Infinite loop; requires a break statement to exit<br>  if (condition === true) break;<br>}<br>```<br><br>**Common Usage:**<br>```javascript<br>for (var i = 0, length = 10; i &lt; length; i++) {<br>  console.log(i);<br>}<br>```<br><br>---<br><br>#### **2. Looping Through an Array**<br><br>**Forward Iteration:**<br>```javascript<br>for (var i = 0, length = myArray.length; i &lt; length; i++) {<br>  console.log(myArray[i]);<br>}<br>```<br><br>**Backward Iteration:**<br>```javascript<br>for (var i = myArray.length - 1; i &gt;= 0; i--) {<br>  console.log(myArray[i]);<br>}<br>```<br><br>**Other Variations:**<br>- Using `value` directly:<br>  ```javascript<br>  for (var key = 0, value = myArray[key], length = myArray.length; key &lt; length; value = myArray[++key]) {<br>    console.log(value);<br>  }<br>  ```<br>- Incrementing within the loop:<br>  ```javascript<br>  var i = 0, length = myArray.length;<br>  for (; i &lt; length;) {<br>    console.log(myArray[i]);<br>    i++;<br>  }<br>  ```<br>- Using assignment in the loop condition:<br>  ```javascript<br>  var key = 0, value;<br>  for (; value = myArray[key++];) {<br>    console.log(value);<br>  }<br>  ```<br><br>---<br><br>#### **3. `while` Loop**<br><br>**Example:**<br>```javascript<br>var key = 0;<br>while (value = myArray[key++]) {<br>  console.log(value);<br>}<br>```<br><br>**Equivalent `for` Loop:**<br>```javascript<br>for (var key = 0; value = myArray[key++];) {<br>  console.log(value);<br>}<br>```<br><br>---<br><br>#### **4. `for...in` Loop**<br><br>Loops over the properties (keys) of an object or array:<br>```javascript<br>for (i in myArray) {<br>  console.log(myArray[i]);<br>}<br>```<br>**Caution:** Avoid using `for...in` for arrays as it may include inherited properties. Refer to discussions on why `for...in` is not ideal for arrays.<br><br>---<br><br>#### **5. `for...of` Loop (ES6)**<br><br>Recommended for iterating over array **values**:<br>```javascript<br>let myArray = [1, 2, 3, 4];<br>for (let value of myArray) {<br>  console.log(value * 2); // Doubles each value<br>}<br>```<br><br>**Comparison:**<br>```javascript<br>let myArray = [3, 5, 7];<br>myArray.foo = \"hello\";<br><br>for (var i in myArray) {<br>  console.log(i); // Logs: 0, 1, 2, \"foo\"<br>}<br><br>for (var i of myArray) {<br>  console.log(i); // Logs: 3, 5, 7<br>}<br>```<br><br>---<br><br>#### **6. `Array.prototype.keys()` (ES6)**<br><br>Iterates over array **indices**:<br>```javascript<br>let myArray = [1, 2, 3, 4];<br>for (let i of myArray.keys()) {<br>  console.log(`Index: ${i}, Value: ${myArray[i]}`);<br>}<br>```<br><br>---<br><br>#### **7. `Array.prototype.forEach()`**<br><br>Executes a function for each array element:<br>```javascript<br>[1, 2, 3, 4].forEach(function(value, index, arr) {<br>  console.log(`Value: ${value}, Index: ${index}`);<br>});<br>```<br>**Limitation:** Cannot use `break` or `continue` inside `.forEach()`.<br><br>---<br><br>#### **8. `Array.prototype.every()`**<br><br>Iterates until the callback returns `false`:<br>```javascript<br>[2, 4, 7, 9].every(function(value) {<br>  console.log(value);<br>  return value % 2 === 0; // Stops at the first odd number<br>});<br>```<br><br>Equivalent traditional loop:<br>```javascript<br>var arr = [2, 4, 7, 9];<br>for (var i = 0; i &lt; arr.length &amp;&amp; arr[i] % 2 === 0; i++) {<br>  console.log(arr[i]);<br>}<br>```<br><br>---<br><br>#### **9. `Array.prototype.some()`**<br><br>Iterates until the callback returns `true`:<br>```javascript<br>[2, 4, 7, 9].some(function(value) {<br>  console.log(value);<br>  return value === 7; // Stops when it finds 7<br>});<br>```<br><br>Equivalent traditional loop:<br>```javascript<br>var arr = [2, 4, 7, 9];<br>for (var i = 0; i &lt; arr.length &amp;&amp; arr[i] !== 7; i++) {<br>  console.log(arr[i]);<br>}<br>```<br><br>---<br><br>#### **10. Libraries**<br><br>Popular utility libraries provide iteration methods:<br><br>- **jQuery:**<br>  ```javascript<br>  $.each(myArray, function(key, value) {<br>    console.log(value);<br>  });<br>  ```<br><br>- **Underscore.js:**<br>  ```javascript<br>  _.each(myArray, function(value, key) {<br>    console.log(value);<br>  });<br>  ```<br><br>- **Lodash:**<br>  ```javascript<br>  _.forEach(myArray, function(value, key) {<br>    console.log(value);<br>  });<br>  ```</pre></md></sn>","topic_id":595,"last_visited":"2024-12-10T06:36:23.953Z"},{"topic_name":"07.Destructuring an array","topic_html":"<sn><md data-rr=\"true\"><pre>### Destructuring an Array<br><br>**Version ≥ 6**<br><br>#### Basic Destructuring<br>An array can be destructured when assigning it to a new set of variables:<br><br>```javascript<br>const triangle = [3, 4, 5];<br>const [length, height, hypotenuse] = triangle;<br><br>console.log(length === 3);    // → true<br>console.log(height === 4);    // → true<br>console.log(hypotenuse === 5); // → true<br>```<br><br>---<br><br>#### Skipping Elements<br>You can skip elements in the array using commas:<br><br>```javascript<br>const [, b, , c] = [1, 2, 3, 4];<br>console.log(b, c); // → 2, 4<br>```<br><br>---<br><br>#### Using the Rest Operator<br>The rest operator (`...`) can be used to collect the remaining elements of the array:<br><br>```javascript<br>const [b, c, ...xs] = [2, 3, 4, 5];<br>console.log(b, c, xs); // → 2, 3, [4, 5]<br>```<br><br>---<br><br>#### Destructuring in Function Arguments<br>An array can also be destructured directly as a function argument:<br><br>```javascript<br>function area([length, height]) {<br>  return (length * height) / 2;<br>}<br><br>const triangle = [3, 4, 5];<br>console.log(area(triangle)); // → 6<br>```<br><br>&gt; **Note:** The third argument (`hypotenuse`) is not named in the function because it's not needed.<br></pre></md></sn>","topic_id":596,"last_visited":"2024-12-10T07:03:37.775Z"},{"topic_name":"08.Removing duplicate elements","topic_html":"<sn><md data-rr=\"true\"><pre>### Removing Duplicate Elements<br><br>#### Using `Array.prototype.filter`<br>Starting with ES5.1, you can use the `filter` method to remove duplicate elements from an array. The callback function checks if the current value's index matches its first occurrence in the array. If not, it is considered a duplicate and excluded.<br><br>```javascript<br>// Version ≥ 5.1<br>var uniqueArray = ['a', 1, 'a', 2, '1', 1].filter(function(value, index, self) {<br>  return self.indexOf(value) === index;<br>});<br>console.log(uniqueArray); // → ['a', 1, 2, '1']<br>```<br><br>---<br><br>#### Using `Set` for Unique Values<br>In ES6 and later, the `Set` object can be used to store unique values of any type. You can convert the `Set` back to an array using the spread operator (`...`).<br><br>```javascript<br>// Version ≥ 6<br>var uniqueArray = [...new Set(['a', 1, 'a', 2, '1', 1])];<br>console.log(uniqueArray); // → ['a', 1, 2, '1']<br>```<br></pre></md></sn>","topic_id":597,"last_visited":"2024-12-10T07:14:31.054Z"},{"topic_name":"09.Array Comparison","topic_html":"<sn><md data-rr=\"true\"><pre>### Array Comparison<br><br>#### Simple Array Comparison Using `JSON.stringify`<br>You can compare arrays by converting them to JSON strings using `JSON.stringify` and comparing the resulting strings.<br><br>```javascript<br>const array1 = [1, 2, 3];<br>const array2 = [1, 2, 3];<br><br>console.log(JSON.stringify(array1) === JSON.stringify(array2)); // → true<br>```<br><br>**Note**:  <br>- This approach only works for arrays that are JSON-serializable and do not contain cyclic references.  <br>- If the arrays have cyclic references, it will throw an error:  <br>  `TypeError: Converting circular structure to JSON`.<br><br>---<br><br>#### Recursive Function for Array Comparison<br>For a more robust solution, you can use a recursive function to compare arrays element by element.<br><br>```javascript<br>function compareArrays(array1, array2) {<br>  const isA1 = Array.isArray(array1);<br>  const isA2 = Array.isArray(array2);<br><br>  if (isA1 !== isA2) {<br>    // One is an array and the other is not<br>    return false;<br>  }<br><br>  if (!(isA1 &amp;&amp; isA2)) {<br>    // Both are not arrays, compare using strict equality<br>    return array1 === array2;<br>  }<br><br>  if (array1.length !== array2.length) {<br>    // Arrays have different lengths<br>    return false;<br>  }<br><br>  // Compare elements recursively<br>  for (let i = 0; i &lt; array1.length; i++) {<br>    if (!compareArrays(array1[i], array2[i])) {<br>      return false;<br>    }<br>  }<br><br>  return true; // Arrays are equal<br>}<br>```<br><br>---<br><br>#### Example Usage<br><br>```javascript<br>const arr1 = [1, [2, 3], 4];<br>const arr2 = [1, [2, 3], 4];<br>const arr3 = [1, [2, 4], 4];<br><br>console.log(compareArrays(arr1, arr2)); // → true<br>console.log(compareArrays(arr1, arr3)); // → false<br>```<br><br>---<br><br>#### Warning: Cyclic References<br>If either array contains cyclic references (a reference to itself), the recursive function may cause a stack overflow error.<br><br>```javascript<br>const a = [0];<br>a[1] = a; // a contains a reference to itself<br>const b = [0, a];<br><br>try {<br>  console.log(compareArrays(a, b));<br>} catch (err) {<br>  console.error(err); // → RangeError: Maximum call stack size exceeded<br>}<br>```<br><br>**Note**:  <br>The function uses strict equality (`===`) to compare non-array elements. For example:<br><br>```javascript<br>console.log(compareArrays({ a: 0 }, { a: 0 })); // → false<br>```</pre></md></sn>","topic_id":598,"last_visited":"2024-12-10T07:37:31.195Z"},{"topic_name":"10.Reversing Arrays","topic_html":"<sn><md data-rr=\"true\"><pre>### Reversing Arrays<br><br>#### Using `.reverse()`<br>The `.reverse()` method reverses the order of elements in an array **in place**.<br><br>##### Example:<br>```javascript<br>const arr = [1, 2, 3, 4];<br>console.log(arr.reverse()); // → [4, 3, 2, 1]<br>```<br><br>**Note**:  <br>- `.reverse()` modifies the original array instead of creating a new one.  <br>- The same reversed array is returned.<br><br>---<br><br>#### Example of In-Place Reversal:<br>```javascript<br>const arr1 = [11, 22, 33];<br>const arr2 = arr1.reverse();<br><br>console.log(arr2); // → [33, 22, 11]<br>console.log(arr1); // → [33, 22, 11]<br>```<br><br>---<br><br>#### Deep Reversal of Nested Arrays<br>If an array contains nested arrays, you can reverse it **deeply** using a custom function.<br><br>##### Function Definition:<br>```javascript<br>function deepReverse(arr) {<br>  arr.reverse().forEach(elem =&gt; {<br>    if (Array.isArray(elem)) {<br>      deepReverse(elem);<br>    }<br>  });<br>  return arr;<br>}<br>```<br><br>---<br><br>##### Example:<br>```javascript<br>const nestedArr = [1, 2, 3, [1, 2, 3, ['a', 'b', 'c']]];<br>deepReverse(nestedArr);<br><br>console.log(nestedArr);<br>// → [[['c', 'b', 'a'], 3, 2, 1], 3, 2, 1]<br>```<br><br>**Explanation**:  <br>- The outer array and all its nested arrays are reversed recursively.</pre></md></sn>","topic_id":599,"last_visited":"2024-12-10T07:51:48.742Z"},{"topic_name":"11.Shallow Cloning an Array","topic_html":"<sn><md data-rr=\"true\"><pre>### Shallow Cloning an Array  <br><br>Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a `clone` method, arrays have a `slice` method that lets you perform a shallow copy of any part of an array. Keep in mind:  <br><br>- This only clones the **first level**.  <br>- It works well with **primitive types** (e.g., numbers, strings) but not with objects.  <br><br>#### One-liner for Shallow Cloning  <br>To create a new array instance with the same elements, you can use the following:  <br>```javascript<br>var clone = arrayToClone.slice();<br>```<br><br>This calls the built-in `Array.prototype.slice` method. If you pass arguments to `slice`, you can clone specific parts of the array. However, calling `slice()` without arguments creates a shallow copy of the entire array.<br><br>---<br><br>### Methods for Cloning Arrays  <br><br>#### For ECMAScript Versions ≥ 6  <br>```javascript<br>let arrayToClone = [1, 2, 3, 4, 5];<br><br>let clone1 = Array.from(arrayToClone);<br>let clone2 = Array.of(...arrayToClone);<br>let clone3 = [...arrayToClone]; // the shortest way<br>```<br><br>#### For ECMAScript Versions ≤ 5.1  <br>```javascript<br>var arrayToClone = [1, 2, 3, 4, 5];<br><br>var clone1 = Array.prototype.slice.call(arrayToClone);<br>var clone2 = [].slice.call(arrayToClone);<br>```</pre></md></sn>","topic_id":600,"last_visited":"2024-12-10T08:01:10.310Z"},{"topic_name":"12.Concatenating Arrays","topic_html":"<sn><md data-rr=\"true\"><pre>### Concatenating Arrays  <br><br>#### Concatenating Two Arrays  <br>```javascript<br>var array1 = [1, 2];<br>var array2 = [3, 4, 5];<br>```<br><br>- **Version ≥ 3**  <br>  ```javascript<br>  var array3 = array1.concat(array2); // returns a new array<br>  ```<br><br>- **Version ≥ 6**  <br>  ```javascript<br>  var array3 = [...array1, ...array2];<br>  ```<br><br>**Results in a new array:**  <br>```javascript<br>[1, 2, 3, 4, 5]<br>```<br><br>---<br><br>#### Concatenating Multiple Arrays  <br>```javascript<br>var array1 = [\"a\", \"b\"],<br>    array2 = [\"c\", \"d\"],<br>    array3 = [\"e\", \"f\"],<br>    array4 = [\"g\", \"h\"];<br>```<br><br>- **Version ≥ 3**  <br>  Provide more array arguments to `array.concat()`:<br>  ```javascript<br>  var arrConc = array1.concat(array2, array3, array4);<br>  ```<br><br>- **Version ≥ 6**  <br>  Provide more arguments using the spread operator:<br>  ```javascript<br>  var arrConc = [...array1, ...array2, ...array3, ...array4];<br>  ```<br><br>**Results in a new array:**  <br>```javascript<br>[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]<br>```<br><br>---<br><br>#### Concatenating Without Copying the First Array  <br>```javascript<br>var longArray = [1, 2, 3, 4, 5, 6, 7, 8],<br>    shortArray = [9, 10];<br>```<br><br>- **Version ≥ 3**  <br>  Use `Function.prototype.apply` to pass the elements of `shortArray` as parameters:<br>  ```javascript<br>  longArray.push.apply(longArray, shortArray);<br>  ```<br><br>- **Version ≥ 6**  <br>  Use the spread operator to pass the elements as separate arguments:<br>  ```javascript<br>  longArray.push(...shortArray);<br>  ```<br><br>**The value of `longArray` is now:**  <br>```javascript<br>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>```<br><br>**Note:** If the second array is too long (&gt;100,000 entries), you may get a stack overflow error (due to how `apply` works). To be safe, you can iterate through `shortArray` and push elements manually:<br>```javascript<br>shortArray.forEach(function (elem) {<br>    longArray.push(elem);<br>});<br>```<br><br>---<br><br>#### Concatenating Arrays and Non-Array Values  <br>```javascript<br>var array = [\"a\", \"b\"];<br>```<br><br>- **Version ≥ 3**  <br>  You can concatenate non-array values directly:<br>  ```javascript<br>  var arrConc = array.concat(\"c\", \"d\");<br>  ```<br><br>- **Version ≥ 6**  <br>  Use the spread operator:<br>  ```javascript<br>  var arrConc = [...array, \"c\", \"d\"];<br>  ```<br><br>**Results in a new array:**  <br>```javascript<br>[\"a\", \"b\", \"c\", \"d\"]<br>```<br><br>You can also mix arrays with non-arrays:  <br>```javascript<br>var arr1 = [\"a\", \"b\"];<br>var arr2 = [\"e\", \"f\"];<br>var arrConc = arr1.concat(\"c\", \"d\", arr2);<br>```<br><br>**Results in a new array:**  <br>```javascript<br>[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]<br>```</pre></md></sn>","topic_id":601,"last_visited":"2024-12-10T08:17:12.295Z"},{"topic_name":"13.Merge two array as key value pair","topic_html":"<sn><md data-rr=\"true\"><pre>### Merging Two Arrays as Key-Value Pairs  <br><br>When you have two separate arrays and want to create a key-value pair from them, you can use the `reduce` function of arrays. Here's how you can do it:<br><br>```javascript<br>var columns = [\"Date\", \"Number\", \"Size\", \"Location\", \"Age\"];<br>var rows = [\"2001\", \"5\", \"Big\", \"Sydney\", \"25\"];<br><br>var result = rows.reduce(function(result, field, index) {<br>    result[columns[index]] = field;<br>    return result;<br>}, {});<br><br>console.log(result);<br>```<br><br>**Output:**<br>```javascript<br>{<br>    Date: \"2001\",<br>    Number: \"5\",<br>    Size: \"Big\",<br>    Location: \"Sydney\",<br>    Age: \"25\"<br>}<br>```  <br><br>This code creates a new object where each element from the `rows` array is mapped to the corresponding key from the `columns` array, forming key-value pairs.</pre></md></sn>","topic_id":602,"last_visited":"2024-12-10T08:30:04.278Z"},{"topic_name":"14.Array Spread Rest","topic_html":"<sn><md data-rr=\"true\"><pre>### Array Spread / Rest  <br><br>#### Spread Operator<br><br>**Version ≥ 6**  <br>With ES6, you can use the spread operator to separate individual elements into a comma-separated syntax:<br><br>```javascript<br>let arr = [1, 2, 3, ...[4, 5, 6]]; // [1, 2, 3, 4, 5, 6]<br>```<br><br>In ES &lt; 6, the equivalent operations would be:<br><br>```javascript<br>arr = [1, 2, 3];<br>arr.push(4, 5, 6);<br>```<br><br>The spread operator also works with strings, separating each character into individual string elements. Using an array function to convert these characters into integers:<br><br>```javascript<br>let arr = [1, 2, 3, ...[...\"456\"].map(x =&gt; parseInt(x))]; // [1, 2, 3, 4, 5, 6]<br>```<br><br>Or, with a single string, this can be simplified to:<br><br>```javascript<br>let arr = [...\"123456\"].map(x =&gt; parseInt(x)); // [1, 2, 3, 4, 5, 6]<br>```<br><br>If no mapping is performed, the result will be:<br><br>```javascript<br>let arr = [...\"123456\"]; // [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]<br>```<br><br>The spread operator can also be used to spread arguments into a function:<br><br>```javascript<br>function myFunction(a, b, c) { }<br>let args = [0, 1, 2];<br>myFunction(...args); // equivalent to myFunction(0, 1, 2)<br>```<br><br>In ES &lt; 6, this would be equivalent to:<br><br>```javascript<br>myFunction.apply(null, args);<br>```<br><br>---<br><br>#### Rest Operator<br><br>The rest operator does the opposite of the spread operator by collecting several elements into a single one:<br><br>```javascript<br>[a, b, ...rest] = [1, 2, 3, 4, 5, 6]; // rest is assigned [3, 4, 5, 6]<br>```<br><br>It can also be used to collect arguments in a function:<br><br>```javascript<br>function myFunction(a, b, ...rest) { <br>    console.log(rest); <br>}<br><br>myFunction(0, 1, 2, 3, 4, 5, 6); // rest is [2, 3, 4, 5, 6]<br>```</pre></md></sn>","topic_id":603,"last_visited":"2024-12-10T08:50:09.013Z"},{"topic_name":"15.Filtering Values","topic_html":"<sn><md data-rr=\"true\"><pre>### **Filtering Values**<br><br>The `filter()` method creates an array filled with all elements that pass a test provided as a function.<br><br>---<br><br>#### **Basic Example: Filtering Values Greater Than 2**<br><br>- **Version ≥ 5.1:**<br>  ```javascript<br>  [1, 2, 3, 4, 5].filter(function(value, index, arr) {<br>      return value &gt; 2;<br>  });<br>  ```<br><br>- **Version ≥ 6:**<br>  ```javascript<br>  [1, 2, 3, 4, 5].filter(value =&gt; value &gt; 2);<br>  ```<br><br>**Resulting Array:**<br>```javascript<br>[3, 4, 5]<br>```<br><br>---<br><br>#### **Filter Falsy Values**<br><br>- **Version ≥ 5.1:**<br>  ```javascript<br>  var filtered = [0, undefined, {}, null, '', true, 5].filter(Boolean);<br>  ```<br><br>**Explanation:**<br>The `Boolean` function is used to evaluate each element. It returns `true` for truthy values and `false` for falsy values.  <br>Here's how each value is evaluated:<br><br>1. `Boolean(0)` → `false`  <br>2. `Boolean(undefined)` → `false`  <br>3. `Boolean({})` → `true` → Added to the result array  <br>4. `Boolean(null)` → `false`  <br>5. `Boolean('')` → `false`  <br>6. `Boolean(true)` → `true` → Added to the result array  <br>7. `Boolean(5)` → `true` → Added to the result array  <br><br>**Resulting Array:**<br>```javascript<br>[{}, true, 5]<br>```<br><br>---<br><br>#### **Another Example: Filtering Words Starting with \"A\"**<br><br>This example demonstrates passing a custom function to the `filter()` method.<br><br>- **Version ≥ 5.1:**<br>  ```javascript<br>  function startsWithLetterA(str) {<br>      if (str &amp;&amp; str[0].toLowerCase() == 'a') {<br>          return true;<br>      }<br>      return false;<br>  }<br><br>  var str = 'Since Boolean is a native javascript function/constructor that takes [one optional parameter] and the filter method also takes a function and passes it the current array item as a parameter, you could read it like the following';<br>  var strArray = str.split(\" \");<br>  var wordsStartsWithA = strArray.filter(startsWithLetterA);<br>  ```<br><br>**Resulting Array:**<br>```javascript<br>[\"a\", \"and\", \"also\", \"a\", \"and\", \"array\", \"as\"]<br>```</pre></md></sn>","topic_id":604,"last_visited":"2024-12-10T11:06:30.526Z"},{"topic_name":"16.Searching an Array","topic_html":"<sn><md data-rr=\"true\"><pre>### **Searching an Array**<br><br>---<br><br>#### **Using `Array.prototype.find` (Recommended, Since ES5)**<br><br>The `find()` method returns the first element in the array that satisfies the provided testing function.<br><br>- **Example 1 (Concise):**<br>  ```javascript<br>  let people = [<br>      { name: \"bob\" },<br>      { name: \"john\" }<br>  ];<br>  let bob = people.find(person =&gt; person.name === \"bob\");<br>  ```<br><br>- **Example 2 (Verbose):**<br>  ```javascript<br>  let bob = people.find(function(person) {<br>      return person.name === \"bob\";<br>  });<br>  ```<br><br>---<br><br>#### **Using a `for` Loop (Works in Any JavaScript Version)**<br><br>A `for` loop can also be used to search an array manually.<br><br>```javascript<br>for (var i = 0; i &lt; people.length; i++) {<br>    if (people[i].name === \"bob\") {<br>        break; // we found bob<br>    }<br>}<br>```<br><br>---<br><br>#### **Using `Array.prototype.findIndex`**<br><br>The `findIndex()` method returns the index of the first element in the array that satisfies the provided testing function. If no element is found, it returns `-1`.<br><br>- **Example:**<br>  ```javascript<br>  let array = [<br>      { value: 1 },<br>      { value: 2 },<br>      { value: 3 },<br>      { value: 4 },<br>      { value: 5 }<br>  ];<br><br>  var index = array.findIndex(item =&gt; item.value === 3); // 2<br>  var index = array.findIndex(item =&gt; item.value === 12); // -1<br>  ```<br></pre></md></sn>","topic_id":605,"last_visited":"2024-12-10T11:12:59.648Z"},{"topic_name":"17.String to Array","topic_html":"<sn><md data-rr=\"true\"><pre>### **Convert a String to an Array**<br><br>---<br><br>#### **Using `.split()` Method**<br><br>The `.split()` method splits a string into an array of substrings based on the specified delimiter.<br><br>- **Default Behavior:**  <br>  By default, `.split()` breaks the string into substrings on spaces (`\" \"`), equivalent to calling `.split(\" \")`.<br><br>- **Custom Delimiter:**  <br>  You can pass a character or regular expression to specify how the string should be split.<br><br>- **Example: Split by Empty String (`\"\"`):**  <br>  To split a string into individual characters, use an empty string as the delimiter.  <br>  **Important Note:** This works for most characters in the Unicode lower range (e.g., English and most European languages). It may not work correctly for 3- or 4-byte Unicode characters used in some other languages.<br><br>  ```javascript<br>  var strArray = \"StackOverflow\".split(\"\");<br>  // strArray = [\"S\", \"t\", \"a\", \"c\", \"k\", \"O\", \"v\", \"e\", \"r\", \"f\", \"l\", \"o\", \"w\"]<br>  ```<br><br>---<br><br>#### **Using the Spread Operator (`...`)**<br><br>The spread operator can also be used to convert a string into an array of characters.<br><br>- **Example:**<br>  ```javascript<br>  var strArray = [...\"sky is blue\"];<br>  // strArray = [\"s\", \"k\", \"y\", \" \", \"i\", \"s\", \" \", \"b\", \"l\", \"u\", \"e\"]<br>  ```</pre></md></sn>","topic_id":606,"last_visited":"2024-12-10T11:19:14.451Z"},{"topic_name":"18.Removing Items from an Array","topic_html":"<sn><md data-rr=\"true\"><pre>### **Removing Items from an Array**<br><br>---<br><br>#### **1. `shift()` Method**<br><br>The `shift()` method removes the **first item** from an array.<br><br>- **Example:**<br>  ```javascript<br>  var array = [1, 2, 3, 4];<br>  array.shift();<br>  // array = [2, 3, 4]<br>  ```<br><br>- **Note:** This method returns the removed item.<br><br>---<br><br>#### **2. `pop()` Method**<br><br>The `pop()` method removes the **last item** from an array.<br><br>- **Example:**<br>  ```javascript<br>  var array = [1, 2, 3];<br>  array.pop();<br>  // array = [1, 2]<br>  ```<br><br>- **Note:** This method also returns the removed item.<br><br>---<br><br>#### **3. `splice()` Method**<br><br>The `splice()` method removes a series of elements from an array.<br><br>- **Parameters:**<br>  - Starting index (required)<br>  - Number of elements to delete (optional)  <br>    If omitted, `splice()` removes all elements from the starting index to the end of the array.<br><br>- **Example 1: Removing Specific Items**<br>  ```javascript<br>  var array = [1, 2, 3, 4];<br>  array.splice(1, 2);<br>  // array = [1, 4]<br>  // Returned value = [2, 3]<br>  ```<br><br>- **Example 2: Omitting Second Parameter**<br>  ```javascript<br>  var array = [1, 2, 3, 4];<br>  array.splice(2);<br>  // array = [1, 2]<br>  // Returned value = [3, 4]<br>  ```<br><br>---<br><br>#### **4. `delete` Operator**<br><br>The `delete` operator removes an item from the array **without altering the array's length**.<br><br>- **Example:**<br>  ```javascript<br>  var array = [1, 2, 3, 4, 5];<br>  console.log(array.length); // 5<br><br>  delete array[2];<br>  console.log(array); // [1, 2, undefined, 4, 5]<br>  console.log(array.length); // 5<br>  ```<br><br>---<br><br>#### **5. Modifying `Array.prototype.length`**<br><br>You can directly set the `length` property of an array to truncate it.<br><br>- **Example:**<br>  ```javascript<br>  var array = [1, 2, 3, 4, 5];<br>  array.length = 2;<br>  console.log(array); // [1, 2]<br>  ```</pre></md></sn>","topic_id":607,"last_visited":"2024-12-10T11:26:35.174Z"},{"topic_name":"19.Removing all elements","topic_html":"<sn><md data-rr=\"true\"><pre>### **Removing All Elements from an Array**<br><br>---<br><br>#### **Method 1: Overwriting with a New Array**<br><br>You can create a new array and overwrite the existing array reference.<br><br>- **Example:**<br>  ```javascript<br>  var arr = [1, 2, 3, 4];<br>  arr = [];<br>  ```<br><br>- **Important Note:**  <br>  This method does not actually delete elements from the original array. If the original array is referenced elsewhere (e.g., in a closure), it remains in memory, potentially causing memory leaks.  <br><br>  **Memory Leak Example:**<br>  ```javascript<br>  var count = 0;<br>  function addListener(arr) { // `arr` is closed over<br>      var b = document.body.querySelector(\"#foo\" + (count++));<br>      b.addEventListener(\"click\", function(e) {<br>          // do something but does not need `arr`<br>      });<br>  }<br><br>  arr = [\"big data\"];<br>  var i = 100;<br>  while (i &gt; 0) {<br>      addListener(arr); // `arr` is passed to the function<br>      arr = [];         // only removes the reference; original array remains<br>      arr.push(\"some large data\"); // allocates more memory<br>      i--;<br>  }<br>  ```<br><br>  **Outcome:**  <br>  - 100 arrays are closed over, each referencing a different array.  <br>  - No items are actually deleted, leading to memory leaks.<br><br>---<br><br>#### **Method 2: Setting `length` to 0**<br><br>This method deletes all elements from the array by resetting its `length` property to 0.  <br><br>- **Example:**<br>  ```javascript<br>  var arr = [1, 2, 3, 4];<br>  arr.length = 0;<br>  ```<br><br>- **Benefits:**  <br>  - Keeps the reference to the original array.  <br>  - Most efficient way to clear an array and dereference its items.<br><br>---<br><br>#### **Method 3: Using `splice()`**<br><br>The `splice()` method can remove all elements from an array.  <br><br>- **Example:**<br>  ```javascript<br>  var arr = [1, 2, 3, 4];<br>  arr.splice(0);<br>  ```<br><br>- **When to Use:**  <br>  - Only use this method if you need a new array containing the removed elements.  <br>  - If you don’t need the removed items, this method is inefficient because it creates a new array only to dereference it.<br><br>- **Example with Retained Items:**<br>  ```javascript<br>  var keepArr = arr.splice(0); <br>  // `arr` is now empty<br>  // `keepArr` contains the removed elements<br>  ```<br><br>---<br><br>#### **Recommended Approach**<br><br>- **Use Method 2 (`arr.length = 0`)** for efficiency and to avoid memory leaks.  <br>- Avoid Method 1 if the original array is referenced elsewhere.<br></pre></md></sn>","topic_id":608,"last_visited":"2024-12-10T11:46:20.450Z"},{"topic_name":"20.Finding the minimum or maximum element","topic_html":"<sn><md data-rr=\"true\"><pre>### **Finding the Minimum or Maximum Element**<br><br>---<br><br>#### **1. Using `Math.min.apply` and `Math.max.apply`**<br><br>If your array contains only numeric values, you can use `Math.min.apply` or `Math.max.apply`.<br><br>- **Example:**<br>  ```javascript<br>  var myArray = [1, 2, 3, 4];<br>  Math.min.apply(null, myArray); // 1<br>  Math.max.apply(null, myArray); // 4<br>  ```<br><br>---<br><br>#### **2. Using the Spread Operator (`...`)** (Version ≥ 6)<br><br>With ES6, you can use the spread operator to pass array elements to `Math.min` or `Math.max`.<br><br>- **Example:**<br>  ```javascript<br>  var myArray = [1, 2, 3, 4, 99, 20];<br>  var maxValue = Math.max(...myArray); // 99<br>  var minValue = Math.min(...myArray); // 1<br>  ```<br><br>---<br><br>#### **3. Using a `for` Loop**<br><br>A `for` loop can iterate through the array to determine the minimum or maximum value.<br><br>- **Example:**<br>  ```javascript<br>  var maxValue = myArray[0];<br>  for (var i = 1; i &lt; myArray.length; i++) {<br>      var currentValue = myArray[i];<br>      if (currentValue &gt; maxValue) {<br>          maxValue = currentValue;<br>      }<br>  }<br>  ```<br><br>---<br><br>#### **4. Using `Array.prototype.reduce`** (Version ≥ 5.1)<br><br>The `reduce()` method can find the minimum or maximum value in an array.<br><br>- **Example:**<br>  ```javascript<br>  var myArray = [1, 2, 3, 4];<br><br>  myArray.reduce(function(a, b) {<br>      return Math.min(a, b);<br>  }); // 1<br><br>  myArray.reduce(function(a, b) {<br>      return Math.max(a, b);<br>  }); // 4<br>  ```<br><br>- **With Arrow Functions (Version ≥ 6):**<br>  ```javascript<br>  myArray.reduce((a, b) =&gt; Math.min(a, b)); // 1<br>  myArray.reduce((a, b) =&gt; Math.max(a, b)); // 4<br>  ```<br><br>---<br><br>#### **5. Generalizing `reduce` for Edge Cases**<br><br>To handle edge cases, such as an empty array, pass an initial value to `reduce()`.<br><br>- **Generalized Function:**<br>  ```javascript<br>  function myMax(array) {<br>      return array.reduce(function(maxSoFar, element) {<br>          return Math.max(maxSoFar, element);<br>      }, -Infinity);<br>  }<br><br>  myMax([3, 5]); // 5<br>  myMax([]); // -Infinity<br>  ```<br><br>- **Important Note:**  <br>  Calling `Math.max.apply(null, [])` directly will also return `-Infinity`.<br><br>---<br><br>#### **Recommended Approach**<br><br>- Use the **spread operator** for simplicity if supported (`Math.max(...myArray)`).<br>- Use `reduce()` with an initial value for generalized scenarios.<br></pre></md></sn>","topic_id":609,"last_visited":"2024-12-10T11:59:55.594Z"},{"topic_name":"21.Standard Array Initialization","topic_html":"<sn><md data-rr=\"true\"><pre>### **Standard Array Initialization**<br><br>---<br><br>#### **1. Using Array Literals**<br><br>The most common way to create an array is by using array literals.<br><br>- **Example:**<br>  ```javascript<br>  var arr = [1, 2, 3, 4];<br>  ```<br><br>---<br><br>#### **2. Using the `Array` Constructor**<br><br>You can also use the `Array` constructor to create arrays.<br><br>- **Example:**<br>  ```javascript<br>  var arr2 = new Array(1, 2, 3, 4);<br>  ```<br><br>- **Without Arguments:**  <br>  If the `Array` constructor is called without any arguments, an empty array is created.<br>  ```javascript<br>  var arr3 = new Array();<br>  // arr3 = []<br>  ```<br><br>- **With One Numeric Argument:**  <br>  If called with a single numeric argument, it creates an array of the specified length, filled with `undefined`.<br>  ```javascript<br>  var arr4 = new Array(4);<br>  // arr4 = [undefined, undefined, undefined, undefined]<br>  ```<br><br>- **With One Non-Numeric Argument:**  <br>  If the single argument is non-numeric, the array contains the value as its first element.<br>  ```javascript<br>  var arr5 = new Array(\"foo\");<br>  // arr5 = [\"foo\"]<br>  ```<br><br>---<br><br>#### **3. Using `Array.of`** (Version ≥ 6)<br><br>The `Array.of()` method creates a new array instance from its arguments.<br><br>- **Example:**<br>  ```javascript<br>  Array.of(21, \"Hello\", \"World\");<br>  // Result: [21, \"Hello\", \"World\"]<br>  ```<br><br>- **Key Difference:**  <br>  Unlike the `Array` constructor, `Array.of(23)` creates `[23]` instead of an array with a length of 23.<br><br>---<br><br>#### **4. Using `Array.from`**<br><br>The `Array.from()` method creates a new array from an array-like or iterable object. You can also provide a mapping function to initialize values.<br><br>- **Example:**<br>  ```javascript<br>  var newArray = Array.from({ length: 5 }, (_, index) =&gt; Math.pow(index, 4));<br>  // Result: [0, 1, 16, 81, 256]<br>  ```<br><br>---<br><br>#### **Summary of Array Initialization Methods**<br><br>| **Method**            | **Description**                                                    | **Example**                           | **Result**                                  |<br>|------------------------|--------------------------------------------------------------------|---------------------------------------|---------------------------------------------|<br>| **Array Literal**      | Creates a new array with specified elements.                      | `[1, 2, 3, 4]`                        | `[1, 2, 3, 4]`                              |<br>| **Array Constructor**  | Creates an array based on arguments or length.                   | `new Array(4)`                        | `[undefined, undefined, undefined, undefined]` |<br>| **Array.of()**         | Creates an array with given arguments, even a single number.      | `Array.of(23)`                        | `[23]`                                      |<br>| **Array.from()**       | Creates an array from an iterable or array-like object.           | `Array.from({ length: 5 })`           | `[0, 1, 2, 3, 4]`                           |<br><br></pre></md></sn>","topic_id":610,"last_visited":"2024-12-10T12:02:04.869Z"},{"topic_name":"22.Array to String","topic_html":"<sn><md data-rr=\"true\"><pre>### **Joining Array Elements into a String**<br><br>---<br><br>#### **Using the `join()` Method**<br><br>The `join()` method is used to concatenate all elements of an array into a single string. A specified separator is placed between each element in the resulting string.<br><br>---<br><br>#### **Examples**<br><br>1. **Joining with No Separator**  <br>   ```javascript<br>   console.log([\"Hello\", \" \", \"world\"].join(\"\")); <br>   // Output: \"Hello world\"<br>   ```<br><br>2. **Joining with a Hyphen**  <br>   ```javascript<br>   console.log([1, 800, 555, 1234].join(\"-\")); <br>   // Output: \"1-800-555-1234\"<br>   ```<br><br>---<br><br>#### **Key Notes**<br>- **Automatic Conversion:**  <br>  Elements that are not strings are automatically converted to strings before joining.<br>  - Example: Numbers in the second example are converted to strings before being concatenated.<br><br>- **Default Separator:**  <br>  If no separator is provided, a comma (`,`) is used by default.<br>  ```javascript<br>  console.log([\"apple\", \"banana\", \"cherry\"].join()); <br>  // Output: \"apple,banana,cherry\"<br>  ```</pre></md></sn>","topic_id":611,"last_visited":"2024-12-10T12:19:11.751Z"},{"topic_name":"23.Removing or adding element using splice","topic_html":"<sn><md data-rr=\"true\"><pre>### **Removing/Adding Elements Using `splice()`**<br><br>---<br><br>#### **Removing Elements**<br><br>The `splice()` method can be used to remove elements from an array.  <br>- **Example:** Remove the first occurrence of `3` from the array.<br>  ```javascript<br>  var values = [1, 2, 3, 4, 5, 3];<br>  var i = values.indexOf(3);<br>  if (i &gt;= 0) {<br>      values.splice(i, 1);<br>  }<br>  console.log(values); <br>  // Output: [1, 2, 4, 5, 3]<br>  ```<br><br>---<br><br>#### **Adding Elements**<br><br>The `splice()` method can also be used to insert elements into an array.  <br>- **Example:** Insert `6`, `7`, and `8` at the end of the array.<br>  ```javascript<br>  var values = [1, 2, 4, 5, 3];<br>  var i = values.length;<br>  values.splice(i, 0, 6, 7, 8);<br>  console.log(values); <br>  // Output: [1, 2, 4, 5, 3, 6, 7, 8]<br>  ```<br><br>---<br><br>#### **Key Parameters of `splice()`**<br><br>1. **First Argument:**  <br>   The index at which to start removing or inserting elements.<br><br>2. **Second Argument:**  <br>   The number of elements to remove from the array.  <br>   - Set to `0` if no elements should be removed.<br><br>3. **Third and Subsequent Arguments:**  <br>   The elements to add to the array at the specified index.<br><br>---<br><br>#### **Summary**<br><br>| **Operation** | **Description**                    | **Example**                                      | **Result**                           |<br>|---------------|------------------------------------|------------------------------------------------|--------------------------------------|<br>| **Remove**    | Remove the first occurrence of `3` | `values.splice(i, 1)`                           | `[1, 2, 4, 5, 3]`                   |<br>| **Add**       | Add `6`, `7`, `8` at the end       | `values.splice(values.length, 0, 6, 7, 8)`      | `[1, 2, 4, 5, 3, 6, 7, 8]`          |<br></pre></md></sn>","topic_id":612,"last_visited":"2024-12-10T12:25:00.913Z"},{"topic_name":"24.The entries method","topic_html":"<sn><md data-rr=\"true\"><pre>### **The `entries()` Method**<br><br>---<br><br>#### **Overview**<br><br>The `entries()` method returns a new `Array Iterator` object containing the key/value pairs for each index in the array.<br><br>---<br><br>#### **Version Support**<br><br>- **Introduced in:** ECMAScript 6 (ES6)  <br>- **Note:** This method is **not supported** in Internet Explorer.<br><br>---<br><br>#### **Example Usage**<br><br>Using a `for...of` loop to iterate through the key/value pairs:<br><br>```javascript<br>var letters = ['a', 'b', 'c'];<br><br>for (const [index, element] of letters.entries()) {<br>    console.log(index, element);<br>}<br>```<br><br>**Result:**  <br>```<br>0 \"a\"  <br>1 \"b\"  <br>2 \"c\"<br>```<br><br>---<br><br>#### **Key Notes**<br><br>- The `entries()` method is particularly useful when you need both the index and the element while iterating through an array.<br>- It simplifies access to index-element pairs compared to traditional iteration methods.<br><br>---<br><br>#### **References**<br><br>Portions of this content are derived from `Array.prototype.entries` by Mozilla Contributors, licensed under **CC-by-SA 2.5**.<br></pre></md></sn>","topic_id":613,"last_visited":"2024-12-10T12:26:28.321Z"},{"topic_name":"25.Remove Value from Array","topic_html":"<sn><md data-rr=\"true\"><pre>###  **Remove Value from Array**<br><br>---<br><br>#### **Removing a Specific Value (Without Modifying the Original Array)**<br><br>To remove a specific value from an array and create a new array without that value, you can use the `filter()` method:<br><br>```javascript<br>array.filter(function(val) { return val !== to_remove; });<br>```<br><br>- **Note:** This approach **does not** modify the original array. It returns a new array with the value removed.<br><br>---<br><br>#### **Modifying the Original Array**<br><br>If you need to modify the array directly (e.g., within a function that manipulates the array), use a `while` loop with `indexOf()` and `splice()`:<br><br>```javascript<br>while (index = array.indexOf(3) !== -1) {<br>    array.splice(index, 1);<br>}<br>```<br><br>- This loop will continue removing all occurrences of `3` until none remain.<br><br>---<br><br>#### **Removing Only the First Occurrence**<br><br>If you want to remove only the first occurrence of the value found, you can simplify the process by eliminating the `while` loop:<br><br>```javascript<br>var index = array.indexOf(to_remove);<br>if (index !== -1) {<br>    array.splice(index, 1);<br>}<br>```<br><br>- This snippet will only remove the first occurrence of `to_remove` and will stop after that.<br><br>---<br><br>### **Summary**<br><br>| **Approach**                             | **Effect**                                        |<br>|------------------------------------------|--------------------------------------------------|<br>| **Using `filter()`**                     | Creates a new array without the value (non-destructive). |<br>| **Using `while` + `splice()`**           | Removes all occurrences of the value (destructive). |<br>| **Using `indexOf()` + `splice()` once** | Removes only the first occurrence of the value (destructive). |<br></pre></md></sn>","topic_id":614,"last_visited":"2024-12-10T12:50:15.024Z"},{"topic_name":"26.Flattening Arrays","topic_html":"<sn><md data-rr=\"true\"><pre>### **Flattening Arrays**<br><br>---<br><br>#### **Flattening 2-Dimensional Arrays**<br><br>---<br><br>##### **Version ≥ 6 (ES6)**<br><br>In ES6, you can flatten a 2D array using the spread operator `...`:<br><br>```javascript<br>function flattenES6(arr) {<br>    return [].concat(...arr);<br>}<br><br>var arrL1 = [1, 2, [3, 4]];<br>console.log(flattenES6(arrL1)); // [1, 2, 3, 4]<br>```<br><br>- The spread operator `...` expands the nested arrays into individual elements.<br><br>---<br><br>##### **Version ≥ 5 (ES5)**<br><br>In ES5, you can achieve the same result using `.apply()`:<br><br>```javascript<br>function flatten(arr) {<br>    return [].concat.apply([], arr);<br>}<br><br>var arrL1 = [1, 2, [3, 4]];<br>console.log(flatten(arrL1)); // [1, 2, 3, 4]<br>```<br><br>- The `.apply()` method calls `concat()` on an empty array and passes in the elements of the nested array.<br><br>---<br><br>#### **Flattening Higher-Dimensional Arrays**<br><br>For more deeply nested arrays, such as:<br><br>```javascript<br>var deeplyNested = [4, [5, 6, [7, 8], 9]];<br>```<br><br>You can flatten it using the following method:<br><br>```javascript<br>console.log(String(deeplyNested).split(',').map(Number));<br>// Output: [4, 5, 6, 7, 8, 9]<br>```<br><br>Or:<br><br>```javascript<br>const flatten = deeplyNested.toString().split(',').map(Number);<br>console.log(flatten);<br>// Output: [4, 5, 6, 7, 8, 9]<br>```<br><br>- **Note:** These methods only work when the array consists exclusively of numbers.<br><br>---<br><br>#### **Limitations**<br><br>- These methods do not work for multi-dimensional arrays of objects. They will only correctly flatten arrays of numbers.<br></pre></md></sn>","topic_id":615,"last_visited":"2024-12-10T12:55:29.177Z"},{"topic_name":"27.Append or Prepend items to Array","topic_html":"<sn><md data-rr=\"true\"><pre>### **Append / Prepend Items to Array**<br><br>---<br><br>#### **Unshift: Prepend Items**<br><br>The `.unshift()` method is used to add one or more items to the beginning of an array:<br><br>```javascript<br>var array = [3, 4, 5, 6];<br>array.unshift(1, 2);<br>console.log(array); // [1, 2, 3, 4, 5, 6]<br>```<br><br>- **Result:** The items `1` and `2` are added to the start of the array.<br>- **Return value:** The new array length after the operation.<br><br>---<br><br>#### **Push: Append Items**<br><br>The `.push()` method is used to add one or more items to the end of an array:<br><br>```javascript<br>var array = [1, 2, 3];<br>array.push(4, 5, 6);<br>console.log(array); // [1, 2, 3, 4, 5, 6]<br>```<br><br>- **Result:** The items `4`, `5`, and `6` are added to the end of the array.<br>- **Return value:** The new array length after the operation.<br><br>---<br><br>Both `.unshift()` and `.push()` modify the original array and return the new length of the array.</pre></md></sn>","topic_id":616,"last_visited":"2024-12-10T12:56:12.659Z"}],"chapter_id":180}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-12-07T01:25:54.291Z","is_private":false,"folder":"Programming","web_url":"https://qdock.free.nf","last_update_on":"2024-12-10T13:02:00.522Z"}