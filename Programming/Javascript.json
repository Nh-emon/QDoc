{"subject_name":"Javascript","subject_id":45,"chapters":[{"chapter_name":"05.Console","topics":[{"topic_name":"00.Introduction","topic_html":"<sn><h3>Console<br></h3><p>A browser's debugging console or web console is generally used by developers to <m>identify errors</m>, <m>understand flow</m><br><m>of execution</m>, <m>log data</m> and for many other purpose at runtime. This information is accessed through the console<br>object<img class=\"img-fluid\" alt=\"image\" src=\"https://developer.chrome.com/static/docs/devtools/console/image/the-console-panel-dc4828392d194.png\"></p><p>The information displayed by a <m>debugging/web console</m> is made available through the multiple methods of the<br>console Javascript object that can be consulted through<c> console.dir(console)</c>. Besides the <m>console.memory</m><br>property, the methods displayed are generally the following (taken from Chromium's output):</p><pre data-v=\"javascript\">Console {\n  log: ƒ log()\n  warn: ƒ warn()\n  error: ƒ error()\n  dir: ƒ dir()\n  table: ƒ table()\n  trace: ƒ trace()\n  group: ƒ group()\n  groupCollapsed: ƒ groupCollapsed()\n  groupEnd: ƒ groupEnd()\n  time: ƒ time()\n  timeLog: ƒ timeLog()\n  timeEnd: ƒ timeEnd()\n  clear: ƒ clear()\n  count: ƒ count()\n  countReset: ƒ countReset()\n  assert: ƒ assert()\n  debug: ƒ debug()\n  info: ƒ info()\n  dirxml: ƒ dirxml()\n  profile: ƒ profile()\n  profileEnd: ƒ profileEnd()\n  timeStamp: ƒ timeStamp()\n  context: ƒ context()\n  memory: MemoryInfo\n}\n</pre><p>The Console Object has mostly function except the <m>memory</m> which is a Object<br></p></sn><sn><h5>Opening Browser Console<br></h5><p>Browser console can be opened via right clicking on mouse and selecting inspect option from popup context menu<br></p><md data-rr=\"true\"><pre>Here's a table summarizing shortcuts to open the browser console for different browsers and operating systems:<br><br>| **Browser**      | **Windows/Linux**                     | **Mac**                          | **Notes**                                                                 |<br>|-------------------|---------------------------------------|-----------------------------------|---------------------------------------------------------------------------|<br>| **Google Chrome** | `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Opens the **Console** directly.                                           |<br>| **Mozilla Firefox**| `Ctrl + Shift + K`                  | `Cmd + Option + K`               | Opens the **Web Console** directly.                                       |<br>| **Microsoft Edge**| `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Similar to Chrome, as Edge is based on Chromium.                          |<br>| **Safari**        | *(N/A)* (Not on Windows/Linux)       | `Cmd + Option + C`               | Requires enabling **Developer Menu** in Safari Preferences &gt; Advanced.    |<br>| **Opera**         | `Ctrl + Shift + J`                   | `Cmd + Option + J`               | Same shortcut as Chrome and Edge.                                         |<br><br></pre></md></sn>","topic_id":562,"last_visited":"2024-12-08T02:27:28.499Z"},{"topic_name":"01.Console Time","topic_html":"<sn><h3 class=\"text-info text-center\">&nbsp;Measuring time - console.time()</h3><p>console.time() can be used to measure how long a task in your code takes to run</p><p>Calling <m>console.time([label])</m> starts a new timer. When <m>console.timeEnd([label])</m> is called, the elapsed time, in<br>milliseconds, since the <m>original .time()</m> call is calculated and logged. Because of this behavior, you can call<br>.timeEnd() multiple times with the same label to log the elapsed time since the <m>original .time()</m> call was made.</p></sn><sn><h5>Example1 :<br></h5><pre data-v=\"javascript\">const test = 'testingUserSpeed'\nconsole.time(test)//here test is the label\nalert('click to continue')\nconsole.timeEnd(test)\n//testingUserSpeed: 5615ms - timer ended</pre></sn><sn><h5>Example2 :<br></h5><pre data-v=\"javascript\">console.time('test-x')\nconsole.log('processing...')\nsetTimeout(()=&gt;{\n   console.log('processing end')\n},3000)\nconsole.timeEnd('test-x')\n//processing...\n//test-x: Xms (elapsed time since console.time was called)\n//processing end</pre><p>As setTimeout is asynchronous so it run after 3s and <m>console.time</m> and <m>console.timeEnd</m> is synchronous<br></p></sn><sn><h5>Example 3 :<br></h5><pre data-v=\"javascript\">console.time('test-x');\nconsole.log('processing...');\nsetTimeout(() =&gt; {\n   console.log('processing end');\n   console.timeEnd('test-x');\n}, 3000);\n//processing...\n//processing end\n//test-x: 3002ms - timer ended\n</pre><pre class=\"copy-container parentEl\"></pre></sn>","topic_id":563,"last_visited":"2024-12-08T03:09:36.371Z"},{"topic_name":"02.Formatting Console Output","topic_html":"<sn><h3>Formatting Console Output<br></h3><p>Many of the console's print methods can also handle C-like string formatting, using % tokens:</p><pre data-v=\"javascript\">console.log('%s has %d points', 'Sam', 100)\n//Sam has 100 points</pre><md data-rr=\"true\"><pre>Here is a table for the full list of format specifiers in JavaScript:<br><br>| **Specifier** | **Output**                                                     |<br>|---------------|-----------------------------------------------------------------|<br>| `%s`          | Formats the value as a string                                  |<br>| `%i` or `%d`  | Formats the value as an integer                                |<br>| `%f`          | Formats the value as a floating-point value                    |<br>| `%o`          | Formats the value as an expandable DOM element                 |<br>| `%O`          | Formats the value as an expandable JavaScript object           |<br>| `%c`          | Applies CSS style rules to the output string (from 2nd parameter) |</pre></md></sn><sn><h5>Example :<br></h5><pre data-v=\"javascript\">console.log('My name is %s','Emon')\nconsole.log('My age is %i',21)\nconsole.log('My height is %f',5.7)\nconsole.log('%o',document.body)\nconsole.log('%O',{name:'emon',age:21,height:5.7})\nconsole.log('%cHello World','color:blue;font-size:xx-large')</pre><h5>output<br></h5><im>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/js%20media/console%20formatiing%20output%20screenshot.png</im></sn><sn><h5>Advanced Styling<br></h5><p>When the CSS format specifier (%c) is placed at the left side of the string, the print method will accept a second<br>parameter with CSS rules which allow fine-grained control over the formatting of that string:</p><ul><li>Any substring to the right of a %c has a corresponding parameter in the print method</li><li>\nThis parameter may be an empty string, if there is no need to apply CSS rules to that same substring</li><li>\nIf two %c format specifiers are found, the 1st (encased in %c) and 2nd substring will have their rules defined in\nthe 2nd and 3rd parameter of the print method respectively</li><li>\nIf three %c format specifiers are found, then the 1st, 2nd and 3rd substrings will have their rules defined in\nthe 2nd , 3rd and 4th parameter respectively, and so on</li></ul><pre data-v=\"javascript\">console.log('chapter is %cremoved','color:crimson') \nconsole.log('%cchapter is %cremoved','color:blue','color:crimson')\nconsole.log('%cchapter%c is %cremoved','color:blue','','color:crimson')</pre></sn>","topic_id":564,"last_visited":"2024-12-08T05:39:12.249Z"},{"topic_name":"02.Console Group","topic_html":"<sn><h3>Console Group<br></h3><md data-rr=\"true\"><pre>In JavaScript, `console.group()`, `console.groupCollapsed()`, and `console.groupEnd()` are methods used to group log messages in the browser's developer console, making it easier to organize and collapse/expand related logs.<br><br>### 1. `console.group()`<br><br>- **Purpose**: Starts a new group in the console, where all subsequent `console.log()` messages will be nested under it.<br>- **How it works**: When a `console.group()` is called, all logs that follow will be indented and displayed inside a collapsible group, making the output more organized.<br><br>#### Example:<br>```javascript<br>console.group('My Group');<br>console.log('First log inside the group');<br>console.log('Second log inside the group');<br>console.groupEnd();<br>```<br>**Explanation**:<br>- `console.group('My Group')` starts the group and labels it \"My Group\".<br>- The following two `console.log()` statements will be indented and shown as part of the group.<br>- `console.groupEnd()` ends the group, returning to normal indentation.<br><br>### 2. `console.groupCollapsed()`<br><br>- **Purpose**: Similar to `console.group()`, but the group is collapsed by default in the console, meaning you have to expand it manually to view the logs inside.<br>- **How it works**: This method is useful if you have large or complex groups of logs and want to minimize the clutter in the console initially.<br><br>#### Example:<br>```javascript<br>console.groupCollapsed('Collapsed Group');<br>console.log('This log is inside a collapsed group');<br>console.log('Another log inside the collapsed group');<br>console.groupEnd();<br>```<br>**Explanation**:<br>- `console.groupCollapsed('Collapsed Group')` starts a group that is initially collapsed in the console.<br>- The logs inside this group are hidden until you expand the group manually.<br><br>### 3. `console.groupEnd()`<br><br>- **Purpose**: Ends the current group, returning the log output to the previous indentation level (or no indentation if no other group exists).<br>- **How it works**: Every call to `console.group()` or `console.groupCollapsed()` should be paired with a corresponding `console.groupEnd()` to close the group.<br><br>#### Example:<br>```javascript<br>console.group('Outer Group');<br>console.log('Log inside outer group');<br><br>console.group('Inner Group');<br>console.log('Log inside inner group');<br>console.groupEnd();<br><br>console.log('Back to outer group');<br>console.groupEnd();<br>```<br><br>**Explanation**:<br>- The outer group is started with `console.group('Outer Group')`, and an inner group is created with `console.group('Inner Group')`.<br>- `console.groupEnd()` closes the inner group first, and then the outer group is closed at the end.<br>- The output will show the nested structure in the console, with the inner group indented further.<br><br>### Summary:<br>- **`console.group()`**: Creates a new, expandable group in the console.<br>- **`console.groupCollapsed()`**: Creates a new, collapsed group in the console.<br>- **`console.groupEnd()`**: Ends the current group and returns to the previous indentation level.<br><br>These methods are great for structuring complex logs, especially when debugging or working with large datasets, helping you organize information in a more readable format.</pre></md></sn>","topic_id":565,"last_visited":"2024-12-08T05:39:34.648Z"},{"topic_name":"03.Console log","topic_html":"<sn><h3>Printing to a browser's debugging console</h3><p>A browser's debugging console can be used in order to print simple messages. This debugging or web console can<br>be directly opened in the browser ( F12 key in most browsers ) and<br>the log method of the console JavaScript object can be invoked by typing the following</p><pre data-v=\"javascript\">console.log('My message');</pre><p>Then, by pressing <c>Enter</c> , this will display My message in the debugging console</p></sn><sn><p>console.log() can be called with any number of arguments and variables available in the current scope. Multiple<br>arguments will be printed in one line with a small space between them</p><pre data-v=\"javascript\">var obj = { test: 1 };\nconsole.log(['string'], 1, obj, window);</pre></sn><sn><p>Beside plain strings, console.log() can handle other types, like arrays, objects, dates, functions, etc.</p><pre data-v=\"javascript\">console.log([0, 3, 32, 'a string']);\nconsole.log({ key1: 'value', key2: 'another value'});</pre></sn><sn><p>Certain types such as Date objects and functions may be displayed differently</p><pre data-v=\"javascript\">console.log(new Date(0));\nconsole.log(function test(a, b) { return c; });\n// &gt;Date Thu Jan 01 1970 06:00:00 GMT+0600 (Bangladesh Standard Time)\n// &gt;function test(a, b)</pre></sn><sn><h5>Other Print Method<br></h5><p>In addition to the log method, modern browsers also support similar methods:</p><md data-rr=\"true\"><pre><br>| **Function Name**     | **Features**                                                                 |<br>|-----------------------|-------------------------------------------------------------------------------|<br>| **`console.info()`**   | Logs general information to the console. Displays with blue text (default).   |<br>| **`console.warn()`**   | Logs a warning message. Displays with a yellow warning icon (triangle).       |<br>| **`console.error()`**  | Logs an error message. Displays with a red error icon (circle) or red text.   |<br>| **`console.timestamp()`** | (Custom method) Logs the current timestamp, often used for logging time-related data. |<br>| **`console.trace()`**  | Logs the stack trace, showing the path the code execution took.              |</pre></md><h5>Example :<br></h5><pre data-v=\"javascript\">console.info('my browser is firefox')\nconsole.warn('switch to edge -microsoft')\nconsole.error('invalid api')\nconsole.timeStamp('msg')\n\nfunction sec(){\n\tfirst()\n}\nfunction first(){\n\tconsole.trace()\n}\nsec()</pre><nt>Output :<br><im>https://raw.githubusercontent.com/Nh-emon/QDoc/main/Programming/js%20media/different%20console%20type.png</im></nt></sn>","topic_id":566,"last_visited":"2024-12-08T06:14:39.611Z"}],"chapter_id":178}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2024-12-07T01:25:54.291Z","is_private":false,"folder":"Programming","web_url":"https://qdock.free.nf","last_update_on":"2024-12-08T06:18:25.304Z"}