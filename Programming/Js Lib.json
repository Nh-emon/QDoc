{"subject_name":"Js Lib","subject_id":50,"chapters":[{"chapter_name":"markdownit","topics":[{"topic_name":"01.Overview","topic_html":"<sn><md>### **Markdownit**\n---\n`markdown-it` is a **JavaScript library** that parses and converts **Markdown** syntax into **HTML**. It's fast, pluggable, and commonly used in web apps that allow users to write formatted content using Markdown.\n\n### 🔧 Features:\n- **CommonMark** compliant (standard Markdown syntax)\n- Supports **GitHub Flavored Markdown (GFM)**\n- **Extensible** via plugins\n- Supports **syntax highlighting**\n- Written in **JavaScript**, works in both **Node.js** and **browsers**\n\n### 📦 Installation:\n```bash\nnpm install markdown-it\n```\n\n### 🚀 Usage Example:\n```javascript\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst result = md.render('# Hello **world**');\nconsole.log(result);\n// Outputs: &lt;h1&gt;Hello &lt;strong&gt;world&lt;/strong&gt;&lt;/h1&gt;\n```</md></sn>","topic_id":934,"last_visited":"2025-04-25T03:54:51.857Z"},{"topic_name":"02.Set Up","topic_html":"<sn><md>### **Set Up**\n---\n\n### 🌐 In the **Browser**:\n\n#### ✅ Option 1: Using CDN\n```html\n&lt;script src=\"https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const md = window.markdownit();\n  const result = md.render('# Hello **Markdown-it**!');\n  document.body.innerHTML = result;\n&lt;/script&gt;\n```\n\n---\n\n### 🖥️ In **Node.js**:\n\n#### ✅ Step 1: Install via npm\n```bash\nnpm install markdown-it\n```\n\n#### ✅ Step 2: Use in your JS file\n```javascript\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst markdownText = '# Hello **Markdown-it**!';\nconst html = md.render(markdownText);\n\nconsole.log(html);\n// Output: &lt;h1&gt;Hello &lt;strong&gt;Markdown-it&lt;/strong&gt;&lt;/h1&gt;\n```</md></sn>","topic_id":935,"last_visited":"2025-04-25T03:56:13.641Z"},{"topic_name":"03.How it work","topic_html":"<sn><md>###  **⚙️ How `markdown-it` Works:**\n---\n1. **Input**: You provide Markdown text like:\n   ```\n   # Hello World\n   This is **bold** text.\n   ```\n\n2. **Tokenization**: The library breaks it into tokens:\n   ```js\n   [\n     { type: 'heading_open', tag: 'h1', ... },\n     { type: 'inline', content: 'Hello World', ... },\n     { type: 'heading_close', tag: 'h1', ... },\n     ...\n   ]\n   ```\n\n3. **Rendering**: It uses those tokens to generate HTML:\n   ```html\n   &lt;h1&gt;Hello World&lt;/h1&gt;\n   &lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text.&lt;/p&gt;\n   ```\n\n---\n\n### 🧠 Internals (Simplified):\n- **Lexer**: Parses raw Markdown into a stream of inline/block tokens.\n- **Renderer**: Converts tokens into HTML.\n- **Plugins**: You can add custom rules or modify existing ones.\n\n---\n\n### 🔁 Flow:\n```plaintext\nMarkdown String\n      ↓\n[Parse]\n      ↓\nTokens\n      ↓\n[Render]\n      ↓\nHTML Output\n```</md></sn>","topic_id":936,"last_visited":"2025-04-25T04:08:08.836Z"},{"topic_name":"04.Dir","topic_html":"<sn><md>###   **markdown-it Library Directory Tree**\n---\n```bash\nmarkdown-it/\n├── bin/\n│   └── markdown-it.js\n├── lib/\n│   ├── index.js\n│   ├── parser_block.js\n│   ├── parser_core.js\n│   ├── parser_inline.js\n│   ├── renderer.js\n│   └── ...\n├── presets/\n│   ├── commonmark.js\n│   ├── default.js\n│   └── zero.js\n├── test/\n│   ├── fixtures/\n│   └── test.js\n├── docs/\n│   └── ...\n├── package.json\n├── README.md\n└── CHANGELOG.md\n```\n\n---\n\n### 📊 Explanation Table\n\n#### 📁 Root Level\n\n| File/Folder     | Description |\n|----------------|-------------|\n| `package.json` | Defines metadata and dependencies of the library |\n| `README.md`    | Documentation and usage instructions |\n| `CHANGELOG.md` | History of changes and versions |\n\n---\n\n#### 📁 `lib/` — 🔧 Core Parsing Logic\n\n| File               | Description |\n|--------------------|-------------|\n| `index.js`         | Main entry point — sets up the parser and renderer |\n| `parser_block.js`  | Parses block-level Markdown (e.g., headings, lists) |\n| `parser_inline.js` | Parses inline elements (e.g., bold, links) |\n| `parser_core.js`   | Manages parser rules and pipeline |\n| `renderer.js`      | Converts tokens into HTML output |\n\n---\n\n#### 📁 `bin/` — 🛠️ CLI Tool\n\n| File              | Description |\n|-------------------|-------------|\n| `markdown-it.js`  | Command-line interface for converting Markdown to HTML |\n\n---\n\n#### 📁 `presets/` — ⚙️ Parsing Modes\n\n| File             | Description |\n|------------------|-------------|\n| `default.js`     | Standard Markdown config |\n| `commonmark.js`  | CommonMark spec-compliant config |\n| `zero.js`        | Minimal config with all rules disabled |\n\n---\n\n#### 📁 `test/` — 🧪 Unit Tests\n\n| File/Folder       | Description |\n|-------------------|-------------|\n| `fixtures/`       | Sample test cases |\n| `test.js`         | Test runner and test definitions |\n\n---\n\n#### 📁 `docs/` — 📘 Documentation (if present)\n\n| Folder/File | Description |\n|-------------|-------------|\n| `...`       | Extra documentation or guide content |\n\n</md></sn>","topic_id":937,"last_visited":"2025-04-25T04:07:52.723Z"},{"topic_name":"05.readme","topic_html":"<sn><md># markdown-it &lt;!-- omit in toc --&gt;\n\n[![CI](https://github.com/markdown-it/markdown-it/actions/workflows/ci.yml/badge.svg)](https://github.com/markdown-it/markdown-it/actions/workflows/ci.yml)\n[![NPM version](https://img.shields.io/npm/v/markdown-it.svg?style=flat)](https://www.npmjs.org/package/markdown-it)\n[![Coverage Status](https://coveralls.io/repos/markdown-it/markdown-it/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/markdown-it/markdown-it?branch=master)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/markdown-it/markdown-it)\n\n&gt; Markdown parser done right. Fast and easy to extend.\n\n__[Live demo](https://markdown-it.github.io)__\n\n- Follows the __[CommonMark spec](http://spec.commonmark.org/)__ + adds syntax extensions &amp; sugar (URL autolinking, typographer).\n- Configurable syntax! You can add new rules and even replace existing ones.\n- High speed.\n- [Safe](https://github.com/markdown-it/markdown-it/tree/master/docs/security.md) by default.\n- Community-written __[plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin)__ and [other packages](https://www.npmjs.org/browse/keyword/markdown-it) on npm.\n\n__Table of content__\n\n- [Install](#install)\n- [Usage examples](#usage-examples)\n  - [Simple](#simple)\n  - [Init with presets and options](#init-with-presets-and-options)\n  - [Plugins load](#plugins-load)\n  - [Syntax highlighting](#syntax-highlighting)\n  - [Linkify](#linkify)\n- [API](#api)\n- [Syntax extensions](#syntax-extensions)\n  - [Manage rules](#manage-rules)\n- [Benchmark](#benchmark)\n- [markdown-it for enterprise](#markdown-it-for-enterprise)\n- [Authors](#authors)\n- [References / Thanks](#references--thanks)\n\n## Install\n\n**node.js**:\n\n```bash\nnpm install markdown-it\n```\n\n**browser (CDN):**\n\n- [jsDeliver CDN](http://www.jsdelivr.com/#!markdown-it \"jsDelivr CDN\")\n- [cdnjs.com CDN](https://cdnjs.com/libraries/markdown-it \"cdnjs.com\")\n\n\n## Usage examples\n\nSee also:\n\n- __[API documentation](https://markdown-it.github.io/markdown-it/)__ - for more\n  info and examples.\n- [Development info](https://github.com/markdown-it/markdown-it/tree/master/docs) -\n  for plugins writers.\n\n\n### Simple\n\n```js\n// node.js\n// can use `require('markdown-it')` for CJS\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.render('# markdown-it rulezz!');\n\n// browser with UMD build, added to \"window\" on script load\n// Note, there is no dash in \"markdownit\".\nconst md = window.markdownit();\nconst result = md.render('# markdown-it rulezz!');\n```\n\nSingle line rendering, without paragraph wrap:\n\n```js\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n\n### Init with presets and options\n\n(*) presets define combinations of active rules and options. Can be\n`\"commonmark\"`, `\"zero\"` or `\"default\"` (if skipped). See\n[API docs](https://markdown-it.github.io/markdown-it/#MarkdownIt.new) for more details.\n\n```js\nimport markdownit from 'markdown-it'\n\n// commonmark mode\nconst md = markdownit('commonmark')\n\n// default mode\nconst md = markdownit()\n\n// enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true\n})\n\n// full options list (defaults)\nconst md = markdownit({\n  // Enable HTML tags in source\n  html:         false,\n\n  // Use '/' to close single tags (&lt;br /&gt;).\n  // This is only for full CommonMark compatibility.\n  xhtmlOut:     false,\n\n  // Convert '\\n' in paragraphs into &lt;br&gt;\n  breaks:       false,\n\n  // CSS language prefix for fenced blocks. Can be\n  // useful for external highlighters.\n  langPrefix:   'language-',\n\n  // Autoconvert URL-like text to links\n  linkify:      false,\n\n  // Enable some language-neutral replacement + quotes beautification\n  // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs\n  typographer:  false,\n\n  // Double + single quotes replacement pairs, when typographer enabled,\n  // and smartquotes on. Could be either a String or an Array.\n  //\n  // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n  // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n  quotes: '“”‘’',\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed and should be escaped externally.\n  // If result starts with &lt;pre... internal wrapper is skipped.\n  highlight: function (/*str, lang*/) { return ''; }\n});\n```\n\n### Plugins load\n\n```js\nimport markdownit from 'markdown-it'\n\nconst md = markdownit\n  .use(plugin1)\n  .use(plugin2, opts, ...)\n  .use(plugin3);\n```\n\n\n### Syntax highlighting\n\nApply syntax highlighting to fenced code blocks with the `highlight` option:\n\n```js\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang &amp;&amp; hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(str, { language: lang }).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nOr with full wrapper override (if you need assign class to `&lt;pre&gt;` or `&lt;code&gt;`):\n\n```js\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang &amp;&amp; hljs.getLanguage(lang)) {\n      try {\n        return '&lt;pre&gt;&lt;code class=\"hljs\"&gt;' +\n               hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n               '&lt;/code&gt;&lt;/pre&gt;';\n      } catch (__) {}\n    }\n\n    return '&lt;pre&gt;&lt;code class=\"hljs\"&gt;' + md.utils.escapeHtml(str) + '&lt;/code&gt;&lt;/pre&gt;';\n  }\n});\n```\n\n### Linkify\n\n`linkify: true` uses [linkify-it](https://github.com/markdown-it/linkify-it). To\nconfigure linkify-it, access the linkify instance through `md.linkify`:\n\n```js\nmd.linkify.set({ fuzzyEmail: false });  // disables converting email to link\n```\n\n\n## API\n\n__[API documentation](https://markdown-it.github.io/markdown-it/)__\n\nIf you are going to write plugins, please take a look at\n[Development info](https://github.com/markdown-it/markdown-it/tree/master/docs).\n\n\n## Syntax extensions\n\nEmbedded (enabled by default):\n\n- [Tables](https://help.github.com/articles/organizing-information-with-tables/) (GFM)\n- [Strikethrough](https://help.github.com/articles/basic-writing-and-formatting-syntax/#styling-text) (GFM)\n\nVia plugins:\n\n- [subscript](https://github.com/markdown-it/markdown-it-sub)\n- [superscript](https://github.com/markdown-it/markdown-it-sup)\n- [footnote](https://github.com/markdown-it/markdown-it-footnote)\n- [definition list](https://github.com/markdown-it/markdown-it-deflist)\n- [abbreviation](https://github.com/markdown-it/markdown-it-abbr)\n- [emoji](https://github.com/markdown-it/markdown-it-emoji)\n- [custom container](https://github.com/markdown-it/markdown-it-container)\n- [insert](https://github.com/markdown-it/markdown-it-ins)\n- [mark](https://github.com/markdown-it/markdown-it-mark)\n- ... and [others](https://www.npmjs.org/browse/keyword/markdown-it-plugin)\n\n\n### Manage rules\n\nBy default all rules are enabled, but can be restricted by options. On plugin\nload all its rules are enabled automatically.\n\n```js\nimport markdownit from 'markdown-it'\n\n// Activate/deactivate rules, with currying\nconst md = markdownit()\n  .disable(['link', 'image'])\n  .enable(['link'])\n  .enable('image');\n\n// Enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n```\n\nYou can find all rules in sources:\n\n- [`parser_core.mjs`](lib/parser_core.mjs)\n- [`parser_block.mjs`](lib/parser_block.mjs)\n- [`parser_inline.mjs`](lib/parser_inline.mjs)\n\n\n## Benchmark\n\nHere is the result of readme parse at MB Pro Retina 2013 (2.4 GHz):\n\n```bash\nnpm run benchmark-deps\nbenchmark/benchmark.mjs readme\n\nSelected samples: (1 of 28)\n &gt; README\n\nSample: README.md (7774 bytes)\n &gt; commonmark-reference x 1,222 ops/sec ±0.96% (97 runs sampled)\n &gt; current x 743 ops/sec ±0.84% (97 runs sampled)\n &gt; current-commonmark x 1,568 ops/sec ±0.84% (98 runs sampled)\n &gt; marked x 1,587 ops/sec ±4.31% (93 runs sampled)\n```\n\n__Note.__ CommonMark version runs with [simplified link normalizers](https://github.com/markdown-it/markdown-it/blob/master/benchmark/implementations/current-commonmark/index.mjs)\nfor more \"honest\" compare. Difference is ≈1.5×.\n\nAs you can see, `markdown-it` doesn't pay with speed for its flexibility.\nSlowdown of \"full\" version caused by additional features not available in\nother implementations.\n\n\n## markdown-it for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `markdown-it` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-markdown-it?utm_source=npm-markdown-it&amp;utm_medium=referral&amp;utm_campaign=enterprise&amp;utm_term=repo)\n\n\n## Authors\n\n- Alex Kocharin [github/rlidwka](https://github.com/rlidwka)\n- Vitaly Puzrin [github/puzrin](https://github.com/puzrin)\n\n_markdown-it_ is the result of the decision of the authors who contributed to\n99% of the _Remarkable_ code to move to a project with the same authorship but\nnew leadership (Vitaly and Alex). It's not a fork.\n\n## References / Thanks\n\nBig thanks to [John MacFarlane](https://github.com/jgm) for his work on the\nCommonMark spec and reference implementations. His work saved us a lot of time\nduring this project's development.\n\n**Related Links:**\n\n- https://github.com/jgm/CommonMark - reference CommonMark implementations in C &amp; JS,\n  also contains latest spec &amp; online demo.\n- http://talk.commonmark.org - CommonMark forum, good place to collaborate\n  developers' efforts.\n\n**Ports**\n\n- [motion-markdown-it](https://github.com/digitalmoksha/motion-markdown-it) - Ruby/RubyMotion\n- [markdown-it-py](https://github.com/ExecutableBookProject/markdown-it-py)- Python\n</md></sn>","topic_id":938,"last_visited":"2025-04-25T04:26:32.397Z"},{"topic_name":"06.indexJs","topic_html":"<sn><pre data-v=\"javascript\" data-t=\"index.mjs\">// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) &gt;= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) &gt;= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer &amp; autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`&lt;br /&gt;`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `&lt;br&gt;`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with &lt;pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang &amp;&amp; hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `&lt;pre&gt;` or `&lt;code&gt;`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang &amp;&amp; hljs.getLanguage(lang)) {\n *       try {\n *         return '&lt;pre&gt;&lt;code class=\"hljs\"&gt;' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '&lt;/code&gt;&lt;/pre&gt;';\n *       } catch (__) {}\n *     }\n *\n *     return '&lt;pre&gt;&lt;code class=\"hljs\"&gt;' + md.utils.escapeHtml(str) + '&lt;/code&gt;&lt;/pre&gt;';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -&gt; ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -&gt; ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -&gt; Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -&gt; Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -&gt; LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -&gt; Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -&gt; String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -&gt; String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils &amp; helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -&gt; utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -&gt; helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) &lt; 0 })\n\n  if (missed.length &amp;&amp; !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) &lt; 0 })\n\n  if (missed.length &amp;&amp; !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -&gt; Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -&gt; String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -&gt; Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\n\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -&gt; String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `&lt;p&gt;` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n</pre></sn><sn><md>### **Exp1**\n---\n### Imports\n1. **External Libraries**:\n   - **utils.mjs**: Contains utility functions for tasks like string handling, object manipulation, etc.\n   - **helpers/index.mjs**: Contains functions related to parsing links and other helper functions.\n   - **Renderer**: A module responsible for rendering the tokens generated by the parser into HTML.\n   - **ParserCore**: Core parser responsible for managing the parsing state and processing tokens.\n   - **ParserBlock &amp; ParserInline**: Handle parsing block-level and inline-level elements of markdown.\n   - **LinkifyIt**: A library to detect and convert URLs in text to anchor tags.\n   - **mdurl**: Provides URL parsing and normalization utilities.\n   - **punycode.js**: Handles internationalized domain names (IDN) and punycode encoding/decoding.\n   \n2. **Config Imports**: These are different configuration presets that define the rules for how Markdown should be parsed.\n   - **cfg_default**: The default configuration.\n   - **cfg_zero**: A configuration with no rules enabled.\n   - **cfg_commonmark**: A configuration for strict CommonMark compatibility.\n\n3. **Configuration Object**: The `config` object holds different preset configurations, allowing easy switching between them.\n\n### Validator and Link Normalization Functions\n- **validateLink**: This function validates if a given URL is safe by checking its scheme (e.g., preventing `javascript:`, `vbscript:`).\n- **normalizeLink**: This normalizes a link by URL-encoding it and applying Punycode to the hostname to ensure it’s machine-readable.\n- **normalizeLinkText**: This normalizes the text of a URL for display purposes, making sure it's in a human-readable format.\n\n### MarkdownIt Class\nThe **MarkdownIt** class is the core class that processes Markdown text. Here’s how it works:\n\n1. **Constructor (`MarkdownIt`)**:\n   - Takes two parameters: `presetName` and `options`.\n     - `presetName`: Used to set the Markdown parsing rules from predefined configurations.\n     - `options`: Configuration options to modify the parser's behavior.\n   - Initializes several properties such as `inline`, `block`, `core`, `renderer`, and `linkify`.\n   - `inline`, `block`, and `core` are instances of different parsing components that handle inline and block parsing, and the core parsing logic, respectively.\n   - The `renderer` is an instance of the `Renderer` class, which is responsible for converting the parsed tokens into HTML.\n   - The `linkify` is an instance of **LinkifyIt** used to automatically detect URLs in the input text.\n   - The constructor also validates and sets the configuration using `configure()` and `set()`.\n\n2. **Methods**:\n   - **set(options)**: Allows modifying the parser options after the instance has been created.\n   - **configure(presets)**: Batch loads all options and components settings from a given preset.\n   - **enable(list, ignoreInvalid)**: Enables specified parsing rules.\n   - **disable(list, ignoreInvalid)**: Disables specified parsing rules.\n   - **use(plugin, params)**: Loads a plugin into the parser with the given parameters.\n   - **parse(src, env)**: Takes a Markdown string (`src`) and an optional `env` object, parses it, and returns a list of tokens (the intermediate representation of the Markdown).\n   - **render(src, env)**: Renders the parsed tokens into HTML.\n   - **parseInline(src, env)**: Similar to `parse`, but it only processes inline elements and skips block-level elements.\n   - **renderInline(src, env)**: Renders inline Markdown into HTML (no paragraph wrap).\n\n### Parsing Process\n1. **MarkdownIt** parses the input Markdown string into tokens using the `parse` method. These tokens represent the elements of the Markdown content (e.g., headings, links, paragraphs).\n   \n2. **Tokens** are then passed to the **renderer**, which generates the corresponding HTML. The renderer uses the **Renderer** class to define how each type of token should be rendered (e.g., how to render a link, image, or heading).\n\n3. **Block vs. Inline Parsing**: The parser distinguishes between block-level and inline-level elements. For example:\n   - Block-level elements might be paragraphs, headings, or lists.\n   - Inline elements might be bold text, italic text, or links.\n\n### Plugin Support\n- **Plugins** can be loaded into the MarkdownIt instance using the `use()` method. This allows for extending the functionality of the parser with custom rules.\n\n### Example Usage:\n```javascript\nvar md = require('markdown-it')()\nvar result = md.render('# markdown-it rulezz!')\n```\nIn the example, the `render` method converts the Markdown string `# markdown-it rulezz!` into HTML.\n\n### Summary\n- **MarkdownIt** provides a flexible Markdown parser and renderer that can be configured using different presets.\n- It supports parsing both block-level and inline Markdown elements.\n- The parser can be extended with plugins, and its behavior can be modified with configuration options.\n- It ensures safe link handling by validating URLs and normalizing them into a safe and consistent format.\n</md></sn><sn><md>### **Exp2**\n---\nI'll walk you through the code step by step:\n\n### 1. **Imports**:\nThe first part of the code imports various modules needed for the parser to work:\n```js\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n```\n\n### Explanation:\n- The imports include utility functions, core parser components, link normalization tools, URL parsing, and presets that define various Markdown configurations.\n- The `config` object maps preset names to their respective configuration modules (`cfg_default`, `cfg_zero`, `cfg_commonmark`), which set different rules for Markdown parsing.\n\n### 2. **Link Validation and Normalization Functions**:\nThe `validateLink`, `normalizeLink`, and `normalizeLinkText` functions ensure URLs are safe and properly formatted.\n\n```js\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  const str = url.trim().toLowerCase()\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n```\n\n- **`validateLink`**: It checks if a URL uses potentially dangerous protocols (e.g., `javascript:` or `file:`). It ensures that URLs that use these protocols are allowed only if they are safe (i.e., data URLs for images).\n  \n```js\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n  if (parsed.hostname) {\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) &gt;= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n  return mdurl.encode(mdurl.format(parsed))\n}\n```\n\n- **`normalizeLink`**: This function normalizes the URL (e.g., encoding the hostname using `punycode`) and ensures that it’s machine-readable.\n- **`normalizeLinkText`**: Decodes the URL into a human-readable format, converting it back from encoded ASCII (for display purposes).\n\n### 3. **MarkdownIt Class**:\nThis is the core of the Markdown parser, responsible for setting options, configuring components, and providing the rendering functionality.\n\n```js\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n```\n\n- **MarkdownIt Constructor**: Initializes a new instance of `MarkdownIt`. If it's called without `new`, it ensures that a new instance is created.\n- It also accepts configuration options (`presetName` and `options`), which can specify how the Markdown parser behaves (e.g., strict Markdown, GFM-style, or minimal parsing).\n\n### 4. **Parser Components**:\nInside the `MarkdownIt` constructor, various parser components are initialized:\n```js\n  this.inline = new ParserInline()\n  this.block = new ParserBlock()\n  this.core = new ParserCore()\n  this.renderer = new Renderer()\n  this.linkify = new LinkifyIt()\n```\n\n- **Parser Components**: \n  - `inline`: Handles inline elements like links, images, and formatting (bold, italic).\n  - `block`: Handles block elements like headings, paragraphs, and lists.\n  - `core`: Core processing logic for parsing Markdown.\n  - `renderer`: Converts the parsed tokens into HTML.\n  - `linkify`: Used to automatically detect URLs and convert them into HTML links.\n\n### 5. **Link Validation, Normalization, and Utilities**:\n```js\n  this.validateLink = validateLink\n  this.normalizeLink = normalizeLink\n  this.normalizeLinkText = normalizeLinkText\n  this.utils = utils\n  this.helpers = utils.assign({}, helpers)\n```\n\n- **`validateLink`**: Ensures that any URL in the Markdown is safe.\n- **`normalizeLink`**: Normalizes the URLs in the parsed Markdown.\n- **`helpers` and `utils`**: Provides utility functions and helper methods to aid in custom plugin creation and Markdown processing.\n\n### 6. **Configuration**:\n```js\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n```\n\n- **Configuration**: The `configure` method is called to load the default preset (`presetName`). If any additional options are passed, the `set` method is used to apply them.\n\n### 7. **Methods**:\nHere are the main methods provided by the `MarkdownIt` class:\n\n#### a) `set()`:\n```js\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n```\n- **`set()`**: Allows you to dynamically change the parser's options after the instance has been created.\n\n#### b) `configure()`:\n```js\nMarkdownIt.prototype.configure = function (presets) {\n  // Applies configuration from the given preset\n  // Throws error if the preset is invalid\n  const self = this\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n    })\n  }\n  return this\n}\n```\n- **`configure()`**: Loads configuration options from a preset. This method is used internally to apply a preset (e.g., `commonmark`, `default`, `zero`).\n\n#### c) `enable()` and `disable()`:\n```js\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  // Enables specified rules in the parser\n}\n\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  // Disables specified rules in the parser\n}\n```\n- **`enable()`**: Enables specified Markdown rules.\n- **`disable()`**: Disables specified Markdown rules.\n\n#### d) `use()`:\n```js\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  // Loads a plugin into the parser instance\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n```\n- **`use()`**: Loads a plugin into the parser. Plugins can extend the functionality of the parser.\n\n#### e) `parse()` and `render()`:\n```js\nMarkdownIt.prototype.parse = function (src, env) {\n  // Parses Markdown source into a list of tokens\n}\n\nMarkdownIt.prototype.render = function (src, env) {\n  // Renders parsed tokens into HTML\n}\n```\n- **`parse()`**: Converts a Markdown string into tokens (intermediate representation).\n- **`render()`**: Converts the parsed tokens into HTML.\n\n### 8. **Export**:\n```js\nexport default MarkdownIt\n```\n- **Export**: Exports the `MarkdownIt` class so it can be used elsewhere.\n\n---\n\n### Summary:\n\nThe `MarkdownIt` class is a modular Markdown parser and renderer with multiple components (block, inline, core) and utility methods to parse Markdown into HTML. It offers flexibility through configuration presets, plugin support, and methods for enabling/disabling parsing rules. This parser is highly customizable and can be extended to handle additional features such as syntax highlighting, link handling, and custom Markdown syntax.</md></sn>","topic_id":939,"last_visited":"2025-04-25T05:14:28.076Z"}],"chapter_id":244}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-02-02T14:33:56.844Z","is_private":false,"folder":"Programming","web_url":"https://qdock.free.nf","last_update_on":"2025-04-25T05:14:30.586Z"}