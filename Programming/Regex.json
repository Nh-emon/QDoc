{"subject_name":"Regex","subject_id":77,"chapters":[{"chapter_name":"00.Overview","topics":[{"topic_name":"tempchapter","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Chapters**\n---\n\n| Chapter No. | Chapter Title                       | Description                                                               |                                    |\n| ----------- | ----------------------------------- | ------------------------------------------------------------------------- | ---------------------------------- |\n| 1           | Introduction to Regex               | 👉 What is Regex, history, uses, and syntax overview                      |                                    |\n| 2           | Basic Regex Syntax                  | 👉 Characters, literals, metacharacters (`.`, `^`, `$`, etc.)             |                                    |\n| 3           | Character Classes                   | 👉 Square brackets `[ ]`, ranges, negation `[^ ]`, predefined classes     |                                    |\n| 4           | Quantifiers                         | 👉 `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}` and their greedy/lazy versions   |                                    |\n| 5           | Anchors                             | 👉 Start `^` and end `$` line anchors, word boundaries `\\b`, `\\B`         |                                    |\n| 6           | Grouping and Capturing              | 👉 Parentheses `()`, non-capturing `(?: )`, backreferences `\\1`, `\\2`     |                                    |\n| 7           | Alternation                         | 👉 Using pipe \\`                                                          | \\` to match one pattern or another |\n| 8           | Escaping Special Characters         | 👉 How to use `\\` to match special characters literally                   |                                    |\n| 9           | Lookahead and Lookbehind Assertions | 👉 Positive &amp; negative lookahead `(?= )`, `(?! )` and lookbehind `(?&lt;= )` |                                    |\n| 10          | Flags and Modifiers                 | 👉 Case-insensitive (`i`), multiline (`m`), global (`g`), dotall (`s`)    |                                    |\n| 11          | Regex in Programming Languages      | 👉 Using regex in JavaScript, Python, PHP, etc.                           |                                    |\n| 12          | Common Regex Patterns               | 👉 Email, phone, URL, IP address, date, etc.                              |                                    |\n| 13          | Regex Debugging and Testing Tools   | 👉 Online tools, regex debuggers, and tips for testing expressions        |                                    |\n| 14          | Performance Optimization            | 👉 Efficient regex writing, avoiding catastrophic backtracking            |                                    |\n| 15          | Advanced Techniques and Tricks      | 👉 Recursive patterns, balancing groups, conditional expressions          |                                    |\n| 16          | Real-life Projects Using Regex      | 👉 Log filtering, data validation, search-replace automation              |                                    |</md></sn>","topic_id":978,"last_visited":"2025-05-07T06:13:57.016Z"}],"chapter_id":251},{"chapter_name":"01.Introduction to Regex","topics":[{"topic_name":"01.What is Regex","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Regex**\n---\n**Regex** (short for **Regular Expression**) is a powerful tool used to match, search, and manipulate text based on specific patterns. It's commonly used in programming, data validation, and text processing.\n\n### 🧠 Basic Concept:\n\nA regex is a string of characters that defines a **search pattern**.\n\n### 📌 Examples:\n\n* `^a` → matches any string that **starts with** \"a\"\n* `\\d` → matches any **digit** (0–9)\n* `\\w+` → matches one or more **word characters**\n* `a.*z` → matches anything that starts with \"a\" and ends with \"z\"\n\n### ✅ Common Uses:\n\n* Validating input (e.g., email, phone number)\n* Searching and replacing text\n* Extracting data from strings\n* Splitting text on complex rules\n\n---\nYou can practise Regex code in [regex101](https://regex101.com/)</md></sn>","topic_id":979,"last_visited":"2025-05-06T13:30:58.455Z"},{"topic_name":"02.History of Regex","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **History of Regular Expressions (Regex)**\n---\n\n**Regular Expressions** were originally developed in the field of formal language theory and later adapted into programming and text processing tools.\n\n---\n\n### 🕰️ Timeline of Regex History:\n\n| Year          | Event / Development                                                                                        |\n| ------------- | ---------------------------------------------------------------------------------------------------------- |\n| **1956**      | Stephen Kleene introduces **regular sets** (precursors to regex) in formal language theory.                |\n| **1968**      | Ken Thompson implements regex in **QED**, a text editor on Unix systems.                                   |\n| **1970s**     | Regex becomes part of **ed** and **grep** on Unix.                                                         |\n| **1980s**     | Regex spreads through **Perl** (created by Larry Wall in 1987) with advanced features.                     |\n| **1990s**     | Regex incorporated into **modern programming languages** like Python, Java, and JavaScript.                |\n| **2000s**     | Libraries and engines like **PCRE (Perl Compatible Regular Expressions)** become standard.                 |\n| **2010s–Now** | Continued improvements in engines like **RE2** (Google), **.NET**, and JavaScript's **ECMAScript RegExp**. |\n\n---\n\n### ⚙️ Comparison of Major Regex Engine Versions\n\n| Feature / Engine           | POSIX | Perl / PCRE | Java | Python | JavaScript (ECMAScript) | .NET |\n| -------------------------- | ----- | ----------- | ---- | ------ | ----------------------- | ---- |\n| **Basic Regex**            | ✅     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Extended Regex**         | ✅     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Lookaheads**             | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Lookbehinds**            | ❌     | ✅           | ✅    | ✅      | ✅ *(since ES2018)*      | ✅    |\n| **Non-Greedy Quantifiers** | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Named Groups**           | ❌     | ✅           | ✅    | ✅      | ✅ *(since ES2018)*      | ✅    |\n| **Unicode Support**        | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Recursive Patterns**     | ❌     | ✅           | ❌    | ❌      | ❌                       | ✅    |\n| **Atomic Groups**          | ❌     | ✅           | ✅    | ❌      | ❌                       | ✅    |\n\n---\n\n\n### 🔧 Popular Regex Engines Today\n---\n* **PCRE (Perl-Compatible Regular Expressions)** – used in PHP, Apache, R.\n* **RE2** – fast and safe, used by Google.\n* **.NET Regex** – powerful and integrates with C#.\n* **ECMAScript Regex** – used in browsers (JavaScript).\n* **Python's `re` module** – includes many modern features.\n</md></sn>","topic_id":980,"last_visited":"2025-05-06T13:39:15.925Z"},{"topic_name":"03.How Regex Works","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ⚙️ **How Regex Works**\n\nRegular expressions (regex) work by interpreting a pattern and matching it against text **character by character** using a specialized engine.\n\n---\n\n### 🔄 Step-by-Step Process:\n\n1. **Input**: You provide a **pattern** and a **text** string.\n2. **Compile**: The regex engine compiles the pattern into a set of instructions.\n3. **Scan**: The engine scans the text from left to right.\n4. **Match Process**:\n\n   * Tries to **match the pattern** starting from each character position.\n   * Applies rules like quantifiers (`*`, `+`), character classes (`[a-z]`), anchors (`^`, `$`), etc.\n5. **Return Result**:\n\n   * If a match is found, the engine returns the **matched text** (or just `True`).\n   * If no match is found, it returns `None` (or `False`).\n\n---\n\n### 🧠 Two Major Types of Regex Engines\n\n| Engine Type                                  | Description                                                                            | Example Engines               |\n| -------------------------------------------- | -------------------------------------------------------------------------------------- | ----------------------------- |\n| **NFA (Non-deterministic Finite Automaton)** | Tries **multiple paths** (backtracking). More powerful but slower on complex patterns. | PCRE, Python `re`, JavaScript |\n| **DFA (Deterministic Finite Automaton)**     | Tries only **one path**, faster and no backtracking.                                   | POSIX, Google's RE2           |\n\n---\n\n### 🧪 Example\n\n**Pattern**: `\\d{3}-\\d{2}-\\d{4}`\n**Text**: `\"My SSN is 123-45-6789\"`\n\n**Process**:\n\n* `\\d{3}` matches `123`\n* `-` matches `-`\n* `\\d{2}` matches `45`\n* `-` matches `-`\n* `\\d{4}` matches `6789`\n\n✅ Match found: `123-45-6789`\n\n---\n\n### 📌 Core Components in Regex\n\n| Symbol | Meaning                                    |                        |\n| ------ | ------------------------------------------ | ---------------------- |\n| `.`    | Any character except newline               |                        |\n| `^`    | Start of string                            |                        |\n| `$`    | End of string                              |                        |\n| `*`    | 0 or more times                            |                        |\n| `+`    | 1 or more times                            |                        |\n| `?`    | 0 or 1 time (also makes quantifiers lazy)  |                        |\n| `[]`   | Character class                            |                        |\n| `()`   | Grouping                                   |                        |\n| \\`     | \\`                                         | OR logic (alternation) |\n| `\\d`   | Digit                                      |                        |\n| `\\w`   | Word character (letter, digit, underscore) |                        |\n| `\\s`   | Whitespace                                 |                        |\n\n</md></sn>","topic_id":981,"last_visited":"2025-05-06T13:49:18.559Z"},{"topic_name":"04.Set Up","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Regex Set Up**\n\n---\n\n####  **1. In Code Editors**\n\n#####  **VS Code**\n\n* **Search using Regex**:\n\n  * Press `Ctrl + F` or `Ctrl + Shift + F`\n  * Click the `.*` (.\\* icon = regex mode)\n* Example pattern: `\\bword\\b`\n* Extensions:\n\n  * *Regex Previewer*: Live visualization of regex\n  * *Regex Workbench*: Test patterns interactively\n\n#####  **Sublime Text**\n\n* Press `Ctrl + F`, enable the `.*` option (left side of the search bar)\n* Supports full PCRE syntax\n\n##### **Notepad++**\n\n* Press `Ctrl + F` → Select **Search Mode** → Choose **\"Regular expression\"**\n* Use for find/replace using regex\n\n---\n\n#### 🌐 2. **Online Regex Editors (Interactive)**\n\n| Tool            | URL                                        | Features                                                      |\n| --------------- | ------------------------------------------ | ------------------------------------------------------------- |\n| **Regex101**    | [regex101.com](https://regex101.com)       | Explains regex pattern, supports PCRE, Python, JS, and Golang |\n| **RegExr**      | [regexr.com](https://regexr.com)           | Visual, user-friendly with syntax help                        |\n| **RegexPlanet** | [regexplanet.com](https://regexplanet.com) | Language-specific testing                                     |\n| **Debuggex**    | [debuggex.com](https://debuggex.com)       | Diagram-based match flow                                      |\n\n---\n\n#### 💻 3. **In Programming Languages**\n---\n| Language       | Code Example                                                                 |\n| -------------- | ---------------------------------------------------------------------------- |\n| **Python**     | `import re`\n`re.search(r\"\\d+\", \"abc123\")`                                 |\n| **JavaScript** | `let match = \"abc123\".match(/\\d+/);`                                         |\n| **Java**       | `Pattern p = Pattern.compile(\"\\\\d+\");`\n`Matcher m = p.matcher(\"abc123\");` |\n| **C# (.NET)**  | `Regex.Match(\"abc123\", @\"\\d+\");`                                             |\n| **PHP**        | `preg_match(\"/\\d+/\", \"abc123\");`                                             |\n| **Ruby**       | `\"abc123\" =~ /\\d+/`                                                          |\n| **Go**         | `regexp.MustCompile(`\\d+`).FindString(\"abc123\")`                             |\n| **R**          | `grepl(\"\\\\d+\", \"abc123\")`                                                    |\n\n---\n\n#### 📦 Libraries (Advanced Regex Support)\n---\n* **PCRE** (Perl Compatible Regular Expressions) – used in PHP, R\n* **RE2** – used in Golang, designed to be fast and safe\n* **Boost.Regex** – C++ regex support\n</md></sn>","topic_id":982,"last_visited":"2025-05-06T13:56:14.204Z"},{"topic_name":"05.Pattern in Regex","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **What is a Pattern in Regex**\n\n---\n\nA **pattern** in regex is a **sequence of characters** that defines a **search rule** for matching strings. It can be:\n\n* A **literal** (`hello`)\n* A **meta-character** (`\\d`, `.`)\n* A **combination** of characters (`[A-Z][a-z]+`)\n\nA pattern can be **simple** (like `a`) or **complex** (like `^[A-Z][a-z]{2,}\\d{1,3}$`).\n\n---\n\n### 🧪 Examples\n\n#### 1️⃣ **Single Pattern**\n\nMatches one specific thing.\n\n```regex\ndog\n```\n\n✅ Matches `\"dog\"` in `\"my dog runs\"`.\n\n---\n\n#### 2️⃣ **Double Pattern**\n\nTwo separate components combined (e.g., alternation, or sequential match).\n\n```regex\ncat|dog\n```\n\n✅ Matches either `\"cat\"` or `\"dog\"` in `\"the cat chased the dog\"`.\n\n```regex\nhe[lm]\n```\n\n✅ Matches `\"hel\"` or `\"hem\"`.\n\n---\n\n#### 3️⃣ **Multiple Pattern**\n\nCombining several rules, character sets, or groups.\n\n```regex\n[A-Z][a-z]{2,}\\d+\n```\n\n✅ Matches a capital letter, followed by at least two lowercase letters, and then one or more digits\n✅ Example match: `\"John123\"`\n\n---\n\n## 📐 How Many Regex Patterns Are Possible in a Text?\n\nLet’s assume:\n\n* You have a text of length `n` (number of characters)\n* You want to count **how many substrings (patterns)** are possible\n\n🔢 **Mathematical Formula for total substrings:**\n\n$$\n\\text{Total substrings} = \\frac{n(n+1)}{2}\n$$\n\n✅ This gives the **number of possible literal patterns** (not regex rules).\n\n---\n\n### 🧮 Example:\n\nFor the text `\"abc\"` (length = 3):\n\nPossible substrings:\n\n* `a`, `b`, `c`\n* `ab`, `bc`\n* `abc`\n\n$$\n\\text{Total} = \\frac{3(3+1)}{2} = 6\n$$\n\nThese are literal **patterns**. But in regex, **each can be extended** with:\n\n* Wildcards (.)\n* Character sets (\\[a-z])\n* Quantifiers (\\*, +, {n})\n* Anchors (^, \\$)\n* Groups and alternations (|, ())\n\nSo, **possible regex patterns = combinatorial explosion** — grows exponentially depending on how many elements you're allowed to combine.\n\n---\n\n### 🎯 Summary\n\n| Type            | Example          | Matches                     |                |\n| --------------- | ---------------- | --------------------------- | -------------- |\n| Single pattern  | `a`              | `\"a\"`                       |                |\n| Double pattern  | \\`a              | b\\`                         | `\"a\"` or `\"b\"` |\n| Multiple        | `[A-Z][a-z]+\\d+` | `\"John123\"`, `\"Test5\"`      |                |\n| Substring count | Length = `n`     | `n(n+1)/2` literal patterns |                |</md></sn>","topic_id":986,"last_visited":"2025-05-06T15:18:41.730Z"},{"topic_name":"06.Matches in Pattern","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\" data-formula=\"true\">### What Are Possible **Matches** in a Given Text (Regex Perspective)?\n---\n\nA **match** is any part of a string that satisfies a **regex pattern**. Depending on the complexity of the regex, **multiple matches** can exist in the same text.\n\n---\n\n### 🧠 Key Concepts\n\n* **Pattern** → The rule (e.g., `[a-z]+`)\n* **Match** → Actual substring that fits the rule (e.g., `\"abc\"`, `\"hello\"`)\n\n---\n\n### 🧪 Example\n\nGiven text: `\"abc123xyz\"`\n\nLet’s analyze it:\n\n| Pattern    | Matches                                                 |\n| ---------- | ------------------------------------------------------- |\n| `[a-z]+`   | `\"abc\"`, `\"xyz\"`                                        |\n| `\\d+`      | `\"123\"`                                                 |\n| `.`        | `a`, `b`, `c`, `1`, `2`, `3`, `x`, `y`, `z` (each char) |\n| `[a-z]{2}` | `\"ab\"`, `\"bc\"`, `\"xy\"`, `\"yz\"` (2-letter sequences)     |\n\n---\n\n### 🔢 Total Possible Matches: Mathematical Insight\n\nLet’s break it into types:\n\n---\n\n#### 1️⃣ **All Substrings (Literal Match Candidates)**\n\nFor string of length `n`, number of possible **continuous substrings** (potential matches) is:\n\n$$\n\\frac{n(n+1)}{2}\n$$\n\nFor `\"abc123\"` (length = 6):\n\n$$\n\\text{Matches} = \\frac{6(6+1)}{2} = 21\n$$\n\nThese include:\n`a`, `b`, `c`, `1`, `2`, `3`, `ab`, `bc`, `c1`, `12`, etc.\n\n---\n\n#### 2️⃣ **Matches per Pattern**\n\nThis depends on:\n\n* Regex complexity\n* Pattern length\n* Overlaps allowed (`g` flag in JS/Python re.findall)\n\nExample:\n\n```js\n\"text\".match(/./g); // Each char (4 matches)\n\"text\".match(/..?/g); // 2-char chunks ([\"te\", \"xt\"])\n```\n\n---\n\n### ✅ Formula (General Idea)\n\nThere's **no universal formula** for \"number of matches\" because:\n\n* Different patterns match different numbers of times\n* Matches can **overlap** or **not**\n* Quantifiers (like `*`, `+`) can generate **multiple match paths**\n\nBut for literal substring matches (like `[a-z]+`), it's often:\n\n&gt; Count of non-overlapping matches = **number of valid substring groups**\n\n---\n\n### 🔍 Realistic Example\n\nText: `\"banana\"`\n\nPattern: `/ana/`\n\nMatches:\n\n* `\"ana\"` (starting at index 1)\n* `\"ana\"` (starting at index 3)\n\nUsing `/g` for global search:\n\n```js\n\"banana\".match(/ana/g); // [\"ana\", \"ana\"]\n```\n\n➡️ 2 matches (with overlap, depending on engine settings)\n\n---\n\n### 🔢 Summary Table\n\n| Scenario                 | Match Count Logic                            |\n| ------------------------ | -------------------------------------------- |\n| All substrings           | `n(n+1)/2`                                   |\n| Regex literal match      | Count substrings == pattern                  |\n| Regex with wildcard/sets | Depends on pattern + repetition              |\n| Overlapping matches      | Engine-dependent (e.g., lookahead allows it) |\n| Using global search      | Finds **all** non-overlapping matches        |\n</md></sn>","topic_id":987,"last_visited":"2025-05-06T15:25:14.723Z"}],"chapter_id":252},{"chapter_name":"02.Basic Regex Syntax","topics":[{"topic_name":"02.Characters","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Characters**\n---\n\n#### 🔤 **1.Literal Characters**\n\nCharacters that match themselves directly.\n\n| Character | Meaning     | Example                 |\n| --------- | ----------- | ----------------------- |\n| `a`       | Matches `a` | i love `a`pple|\n\n---\n\n#### 🔧 **2. Metacharacters**\n\nSpecial characters with regex-specific meaning:\n\n| Character | Meaning                      | Example          | Matches                   |       |                  |\n| --------- | ---------------------------- | ---------------- | ------------------------- | ----- | ---------------- |\n| `.`       | Any character except newline | `a.c`            | `\"abc\"`, `\"a1c\"`          |       |                  |\n| `^`       | Start of string              | `^The`           | `The` dog               |       |                  |\n| `$`       | End of string                | `end$`           | The `end`               |       |                  |\n| `*`       | 0 or more                    | `lo*`            | `\"l\"`, `\"lo\"`, `\"loo\"`    |       |                  |\n| `+`       | 1 or more                    | `lo+`            | `\"lo\"`, `\"loo\"`           |       |                  |\n| `?`       | 0 or 1 (optional)            | `colou?r`        | `\"color\"`, `\"colour\"`     |       |                  |\n| \\`        | \\`                           | OR (alternation) | \\`cat                     | dog\\` | `\"cat\"`, `\"dog\"` |\n| `()`      | Grouping                     | `(ab)+`          | `\"abab\"`                  |       |                  |\n| `[]`      | Character class              | `[aeiou]`        | Any vowel                 |       |                  |\n| `{n}`     | Exactly n                    | `a{3}`           | `\"aaa\"`                   |       |                  |\n| `{n,}`    | n or more                    | `a{2,}`          | `\"aa\"`, `\"aaa\"`           |       |                  |\n| `{n,m}`   | Between n and m              | `a{2,4}`         | `\"aa\"`, `\"aaa\"`, `\"aaaa\"` |       |                  |\n\n---\n\n#### **3. Escape Sequences (Backslash `\\`)**\n\n| Syntax | Meaning                          | Example   | Matches                       |\n| ------ | -------------------------------- | --------- | ----------------------------- |\n| `\\d`   | Digit `[0-9]`                    | `\\d+`     | `\"123\"`                       |\n| `\\D`   | Non-digit                        | `\\D+`     | `\"abc\"`                       |\n| `\\w`   | Word char `[A-Za-z0-9_]`         | `\\w+`     | `\"word_123\"`                  |\n| `\\W`   | Non-word char                    | `\\W+`     | `\"!@#\"`                       |\n| `\\s`   | Whitespace (space, tab, newline) | `\\s+`     | `\" \"`                         |\n| `\\S`   | Non-whitespace                   | `\\S+`     | `\"text\"`                      |\n| `\\\\`   | Escaped backslash                | `\\\\`      | `\"\\\"`                         |\n| `\\b`   | Word boundary                    | `\\bcat\\b` | `\"a cat\"` but not `\"catalog\"` |\n\n---\n\n####  **4. Character Classes**\n\n| Syntax   | Meaning                | Example         |\n| -------- | ---------------------- | --------------- |\n| `[abc]`  | Match `a`, `b`, or `c` | `\"bat\"` matches |\n| `[^abc]` | Not `a`, `b`, or `c`   | `\"dog\"` matches |\n| `[a-z]`  | Range `a` to `z`       | `\"hello\"`       |\n| `[0-9]`  | Any digit              | `\"123\"`         |\n\n---\n\n#### **Example Pattern Explanation**\n\nPattern: `^\\w+@\\w+\\.\\w{2,3}$`\nMatches an **email-like** string:\n\n* `^` → start\n* `\\w+` → one or more word characters\n* `@` → literal \"@\"\n* `\\w+` → domain name\n* `\\.` → literal dot\n* `\\w{2,3}` → domain extension like `com`, `org`\n* `$` → end\n\n🧪 Matches: `\"user@example.com\"` ✅\n</md></sn>","topic_id":983,"last_visited":"2025-05-06T14:21:09.986Z"},{"topic_name":"02.Literal Characters","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### 🔤 **Literal Characters in Regex**\n\n**Literal characters** in regular expressions are the most basic elements: they match **exact characters** in the text, with **no special meaning**.\n\n---\n\n### ✅ What are Literal Characters?\n\nA **literal character** is any character **not interpreted as a metacharacter**. It simply **matches itself**.\n\n#### 🧩 Examples of literal characters:\n\n* Letters: `a`, `b`, `c`, ...\n* Digits: `1`, `2`, `3`, ...\n* Symbols (when not special): `@`, `#`, `-`, `=`, etc.\n\n---\n\n### 📌 Example Usage:\n\n| Regex Pattern | Input Text  | Match? | Why                       |\n| ------------- | ----------- | ------ | ------------------------- |\n| `dog`         | `\"dog\"`     | ✅      | Exact match               |\n| `cat`         | `\"catalog\"` | ✅      | \"cat\" is present          |\n| `sun`         | `\"Sunday\"`  | ✅      | \"sun\" found at start      |\n| `hello`       | `\"HELLO\"`   | ❌      | Case-sensitive by default |\n\n---\n\n### ⚠️ Special Characters as Literals\n\nTo match **special characters** (like `.`, `*`, `?`, `+`, `^`, etc.), you must **escape them** with a backslash `\\`.\n\n#### 🔐 Example:\n\n| Special Char   | Regex  | Matches                     |\n| -------------- | ------ | --------------------------- |\n| `.` (dot)      | `a\\.b` | Matches `\"a.b\"` not `\"acb\"` |\n| `*` (asterisk) | `a\\*b` | Matches `\"a*b\"`             |\n| `?` (question) | `1\\?2` | Matches `\"1?2\"`             |\n\n---\n\n### 🧠 Summary:\n\n* **Literal** = matches exactly what you type.\n* **No metacharacter behavior** unless escaped.\n* Use when you want to **match specific text** exactly.</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Practise**\n\n- Input string text \n- js /*pattern*/\n- Output text that highlighted the match pattern\n\n---\n\n- Today is sunday\n- /*s*/\n- Today i`s`  `s`unday\n\n---\n- Today is sunday\n-  /*a*/\n- Tod`a`y is  sund`a`y\n\n---\n- Today is sunday\n- /*sun*/\n- Today is  `sun`day\n\n---\n- It is 9 0'clock\n-  /*9*/\n- It is `9` 0'clock\n\n---\n- I love mangoes \n- /*mangoes*/\n- I love `mangoes`\n\n--- \n- Do you know acb and a.b are not equal\n- /*a.b*/\n- Do you know `acb` and `a.b` are not equal. \n\n--- \n- Do you know acb and a.b are not equal\n-  /*a\\\\.b*/\n- Do you know acb and `a.b` are not equal \n\n---\n- Do you know acb and a.b are not equal.\n-  / *a\\\\?b* /\n- Do you know acb and `a?b` are not equal. \n</md></sn>","topic_id":984,"last_visited":"2025-05-06T14:48:34.211Z"},{"topic_name":"03.Meta Characters","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✨ Meta Characters in Regular Expressions\n\n**Meta characters** are special symbols in regex that represent **rules** rather than literal characters. They help you build powerful matching patterns.\n\n---\n\n## 📜 List of Common Meta Characters\n\n| Meta  | Meaning                          | Example          | Matches                         |      |                       |\n| ----- | -------------------------------- | ---------------- | ------------------------------- | ---- | --------------------- |\n| `.`   | Any character (except newline)   | `a.c`            | `abc`, `a9c`                    |      |                       |\n| `^`   | Start of string                  | `^The`           | `\"The sun\"`, not `\"In The sun\"` |      |                       |\n| `$`   | End of string                    | `end$`           | `\"the end\"`                     |      |                       |\n| `*`   | matches the previous token between 0 and unlimited times            | `go*`            | `g`, `go`, `goo`, `gooo`        |      |                       |\n| `+`   | 1 or more of previous            | `go+`            | `go`, `goo`                     |      |                       |\n| `?`   | 0 or 1 (optional)                | `colou?r`        | `color`, `colour`               |      |                       |\n| `[]`  | Character set (range or options) | `[abc]`          | `a`, `b`, or `c`                |      |                       |\n| `[^]` | Negated character set            | `[^0-9]`         | Anything except digits          |      |                       |\n| `()`  | Grouping                         | `(ha)+`          | `ha`, `haha`, `hahaha`          |      |                       |\n| `{}`  | Quantifier                       | `a{2,4}`         | `aa`, `aaa`, `aaaa`             |      |                       |\n| \\`    | \\`                               | OR (alternation) | \\`yes                           | no\\` | Matches `yes` or `no` |\n| `\\`   | Escape next character            | `\\.`             | Matches a literal `.`           |      |                       |\n\n---\n\n### 🧪 Examples\n\n* `^a.*z$` → Matches any string that starts with `a` and ends with `z`\n* `\\d{3}-\\d{2}-\\d{4}` → Matches SSN-style numbers like `123-45-6789`\n* `[A-Z][a-z]+` → Capitalized words like `Hello`, `World`\n\n---\n\n### ⚠️ Escaping Meta Characters\n\nTo match a meta character **literally**, prefix it with a backslash `\\`:\n\n* `\\.` matches `.`\n* `\\*` matches `*`\n* `\\\\` matches `\\`\n</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### `.` (dot) Meta Character\n\nThe **dot (`.`)** is a **wildcard** meta character that matches **any single character except a newline** (`\\n`).\n\n---\n\n#### 🧠 Meaning:\n\n* **`.` = Match exactly one of any character (except newline)**\n\n---\n\n#### ✅ 5 Examples of Dot (`.`) Usage:\n\n---\n\n#### 1️⃣ Pattern: `c.t`\n\n```js\n\"cat\".match(/c.t/); // ✅ Matches\n\"cut\".match(/c.t/); // ✅ Matches\n\"ct\".match(/c.t/);  // ❌ No match\n```\n\n✔️ Matches any 3-letter word starting with `c` and ending with `t`.\n\n---\n\n#### 2️⃣ Pattern: `a.b`\n\n```js\n\"acb\".match(/a.b/); // ✅ Matches\n\"axb\".match(/a.b/); // ✅ Matches\n\"ab\".match(/a.b/);  // ❌ No match\n```\n\n✔️ Matches `a` followed by **any character**, then `b`.\n\n---\n\n#### 3️⃣ Pattern: `...`\n\n```js\n\"dog\".match(/.../); // ✅ Matches\n\"do\".match(/.../);  // ❌ No match\n```\n\n✔️ Matches **any 3-character sequence**.\n\n---\n\n#### 4️⃣ Pattern: `h.t`\n\n```js\n\"hat\".match(/h.t/); // ✅ Matches\n\"hit\".match(/h.t/); // ✅ Matches\n\"hot\".match(/h.t/); // ✅ Matches\n\"heat\".match(/h.t/); // ❌ No match\n```\n\n✔️ Matches `h` followed by any 1 character, then `t`.\n\n---\n\n#### 5️⃣ Pattern: `gr.y`\n\n```js\n\"gray\".match(/gr.y/);  // ✅ Matches\n\"grey\".match(/gr.y/);  // ✅ Matches\n\"gr@y\".match(/gr.y/);  // ✅ Matches\n\"gracy\".match(/gr.y/); // ❌ No match\n```\n\n✔️ Useful for variations like US/UK spellings (`gray`/`grey`).\n\n---\n\n#### ❗Note:\n\n* `.` **does not** match newline `\\n` by default.\n* To include newlines, use **`/s` flag** (dotAll mode in JavaScript):\n\n```js\n/./s\n```\n</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **Meta Character `^` in Regular Expressions**\n\nThe **caret `^`** has **two different meanings** depending on where it's used:\n\n---\n\n####  1. **At the beginning of a pattern**\n\n&gt;  It means **\"start of string\"**\n\n##### 📘 Usage:\n\n```regex\n^pattern\n```\n\n🔍 Matches if the **string starts** with `pattern`.\n\n##### ✅ Examples:\n\n| Pattern   | String           | Match? | Why                        |\n| --------- | ---------------- | ------ | -------------------------- |\n| `^a`      | `a`pple        | ✅      | Starts with \"a\"            |\n| `^hello`  | `hello` world  | ✅      | Starts with \"hello\"        |\n| `^dog`    | hotdog       | ❌      | Doesn’t start with \"dog\"   |\n| `^A\\d{3}` | `A123` is code | ✅      | Starts with \"A\" + 3 digits |\n\n---\n\n#### 🚫 2. **Inside square brackets `[^...]`**\n\n&gt; It means **\"NOT\"** (negation of a character set)\n\n### 📘 Usage:\n\n```regex\n[^abc]\n```\n\n🔍 Matches **any character except** `a`, `b`, or `c`.\n\n#### ✅ Examples:\n\n| Pattern    | String | Match? | Why                             |\n| ---------- | ------ | ------ | ------------------------------- |\n| `[^0-9]`   | `\"a\"`  | ✅      | Not a digit                     |\n| `[^a-z]`   | `\"Z\"`  | ✅      | Not lowercase                   |\n| `[^aeiou]` | `\"b\"`  | ✅      | Not a vowel                     |\n| `[^x]`     | `\"x\"`  | ❌      | Matches anything **except** \"x\" |\n\n---\n\n#### ⚠️ Key Notes:\n\n* `^` at the start of the **pattern** → means **start of string**\n* `^` **inside `[]`** → means **negate the character set**</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  Meta Character `$` in Regular Expressions\n\nThe **`$` symbol** in regex is used to **anchor a pattern to the end of a string**.\nIt means:\n\n&gt; ✅ \"**Match if the pattern occurs at the end of the line/string**\"\n\n---\n\n#### 📘 Syntax\n\n```regex\npattern$\n```\n\n🧠 Matches if **`pattern` is the last thing** in the string (just before the end).\n\n---\n\n#### ✅ Examples\n\n##### 1️⃣ Match a word at the end\n\n```regex\nend$\n```\n\n**Text:** `\"This is the end\"`\n✔️ Match: `\"end\"` ✅\n**Text:** `\"end of days\"`\n❌ No match, because `\"end\"` is not at the end.\n\n---\n\n##### 2️⃣ Match a specific file extension\n\n```regex\n\\.jpg$  // Escaped dot\n```\n\n**Text:** `\"photo.jpg\"` ✅\n**Text:** `\"image.png\"` ❌\n✔️ Only matches strings that **end with `.jpg`**\n\n---\n\n##### 3️⃣ Match digits at the end\n\n```regex\n\\d+$  // One or more digits at the end\n```\n\n**Text:** `\"order 123\"` ✅ Matches `\"123\"`\n**Text:** `\"abc123abc\"` ❌\n\n---\n\n##### 4️⃣ Match exact word only at the end\n\n```regex\nhello$\n```\n\n**Text:** `\"say hello\"` ✅\n**Text:** `\"hello there\"` ❌\n\n---\n\n#### ⚠️ Important Notes\n\n* `$` does **not** match a character; it matches a **position**\n* It can be combined with `^` to match **full strings**\n  Example: `^abc$` matches **only** `\"abc\"` (whole string match)\n\n---\n\n#### ✅ Combined Use Example\n\n```regex\n^[A-Z][a-z]+.$\n```\n\n✔️ Matches a string that:\n\n* Starts with capital letter (`^`)\n* Has one or more lowercase letters\n* Ends with any character except newline (`.$`)\n\n**Text:** `\"Hello.\"` ✅\n**Text:** `\"Hello\"` ❌\n**Text:** `\"hello.\"` ❌</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✳️ Meta Character `*` in Regular Expressions\n\nThe **`*` (asterisk)** in regex means:\n\nMatches the previous `token`* between 0 and unlimited times unil another token appear\n\nThis includes **no match (zero times)**, **once**, or **any number of times**.\n\n---\n\n### 📘 Syntax\n\n```regex\na*   → zero or more of \"a\"  \n[0-9]* → zero or more digits  \n.*   → zero or more of ANY character  \n```\n\n---\n\n### ✅ Examples\n\n#### 1️⃣ Match zero or more `a`s\n\n```regex\na*\n```\n\n**Text:** `\"baaa\"`\n✔️ Matches: `\"\", \"a\", \"aa\", \"aaa\"`\nℹ️ Matches before, between, and after characters — even **empty matches**.\n\n---\n\n#### 2️⃣ Match words that start with `go` followed by 0+ `o`s\n\n```regex\ngo*  // Matches g, go, goo, gooo...\n```\n\n**Text:** `\"go\"`, `\"goo\"`, `\"goooo\"` ✅\n**Text:** `\"g\"` ❌\n**Text:** `\"gno\"` ❌\n**Text:** `\"gone\"`  `go`ne ✅\n\n---\n\n#### 3️⃣ Match any text (non-greedy)\n\n```regex\n.*  // Match 0+ of any character\n```\n\n**Text:** `\"abc123\"`\n✔️ Matches entire string.\n\n&gt; Combine with anchors for full line: `^.*$` matches **any line** (even empty).\n\n---\n\n#### 4️⃣ Match optional numbers\n\n```regex\n[0-9]*\n```\n\n**Text:** `\"abc\"` ✅ (matches nothing)\n**Text:** `\"abc123\"` ✅ (matches `123`)\n**Text:** `\"123abc456\"` ✅ (`123`, then `456`)\n\n---\n\n- bm bom boo bonm boomn boooom \n-  /*bo\\*m*/\n- `bm` `bom` boo bonm `boom`n `boooom`\n\n### ⚠️ Notes\n\n| Pattern  | Matches                      |\n| -------- | ---------------------------- |\n| `a*`     | `\"\"`, `\"a\"`, `\"aa\"`, `\"aaa\"` |\n| `.*`     | Anything (even empty string) |\n| `[a-z]*` | 0 or more lowercase letters  |\n| `\\d*`    | 0 or more digits             |\n\n---\n\n### 🆚 Difference with Other Quantifiers\n\n| Symbol | Meaning           |\n| ------ | ----------------- |\n| `*`    | 0 or more         |\n| `+`    | 1 or more         |\n| `?`    | 0 or 1 (optional) |\n&lt;/b&gt;</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **The `+` metacharacter in Regex**\n---\nThe `+` **meta character** in regular expressions means matches the previous token between 1 or unlimited times, group, or character class. It matches **at least one occurrence**, but can match many.\n\n### 🔹 Syntax\n\n```regex\npattern+\n```\n\n* `pattern` is the character or group to repeat.\n* `+` ensures that it appears **at least once**.\n\n---\n\n### ✅ Examples\n\n#### 1. Basic character\n\n```regex\na+\n```\n\n✅ Matches:\n\n* `\"a\"`\n* `\"aa\"`\n* `\"aaaa\"`\n  ❌ Doesn't match:\n* `\"\"` (empty string)\n\n#### 2. Character class\n\n```regex\n[0-9]+\n```\n\n✅ Matches:\n\n* `\"123\"`\n* `\"7\"`\n* `\"45678\"`\n  📌 Matches one or more digits.\n\n#### 3. Grouping with `()`\n\n```regex\n(ab)+\n```\n\n✅ Matches:\n\n* `\"ab\"`\n* `\"abab\"`\n* `\"ababab\"`\n  📌 Each `\"ab\"` is treated as one unit.\n\n#### 4. Combined with word characters\n\n```regex\n\\w+\n```\n\n✅ Matches:\n\n* `\"hello\"`\n* `\"Python3\"`\n  📌 Matches one or more **word characters** (letters, digits, underscores).\n\n\n#### `*`\n- bm bom boo bonm boomn boooom \n-  /*bo\\*m*/\n- `bm` `bom` boo bonm `boom`n `boooom`\n\n#### `+`\n- bm bom boo bonm boomn boooom \n-  /*bo+m*/\n- bm `bom` boo bonm `boom`n `boooom`</md></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Meta character `?` in Regex**\n\nThe `?` **metacharacter** in regex means matching previous token(character, group, or character class) between 0 and 1 times\n\nIt makes the element **optional**.\n\n---\n\n### 🔹 Syntax\n\n```regex\npattern?\n```\n\n* Matches if `pattern` appears **once** or **not at all**.\n\n---\n\n### ✅ Examples\n\n\n\n#### 2. Character class\n\n```regex\n[0-9]?\n```\n\n✅ Matches:\n\n* `\"1\"`\n* `\"\"`\n  📌 Matches a **single digit** or **no digit**.\n\n#### 3. Optional character in word\n\n```regex\ncolou?r\n```\n\n✅ Matches:\n\n* `\"color\"`\n* `\"colour\"`\n  📌 Matches both American and British spellings.\n\n#### 4. Optional group\n\n```regex\n(ab)?\n```\n\n✅ Matches:\n\n* `\"\"`\n* `\"ab\"`\n  📌 The whole `\"ab\"` group is optional.\n\n---\n\n### ⚠️ Also used in **non-greedy quantifiers**\n\nWhen used after `*` or `+`, it means **non-greedy** (match as little as possible).\nExample:\n\n```regex\n\".+?\" \n```\n\n📌 Matches the **shortest** string between quotes instead of the longest\n\n\n#### `*`\n- bm bom boo bonm boomn boooom \n-  /*bo\\*m*/\n- `bm` `bom` boo bonm `boom`n `boooom`\n\n#### `+`\n- bm bom boo bonm boomn boooom \n-  /*bo+m*/\n- bm `bom` boo bonm `boom`n `boooom`\n\n#### `?`\n- bm bom boo bonm boomn boooom \n-  /*bo?m*/\n- `bm` `bom` boo bonm boomn boooom\n\n</md></sn>","topic_id":985,"last_visited":"2025-05-07T03:10:27.762Z"},{"topic_name":"04.Practise","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Practise**\n---\n\n\n| 🔤**Input Text** | 🧵 **Regex Pattern** | 🎯 **Matches** |\n| ----------------- | -------------------- | ----------------------- |\n| hello             | `/h.llo/`            | `hello`                 |\n| hi                | `/h./`               | `hi`                    |\n| start here        | `/^start/`           | `start` here            |\n| it's ending       | `/ending$/`          | it's `ending`           |\n| aaaab             | `/a*/`               | `aaaa`b                 |\n| bbbb              | `/a*/`               | ` `b` `b` `b` `b\\`      |\n| abc               | `/a+b/`              | `ab`c                   |\n| abbc              | `/b+/`               | a`bb`c                  |\n| ab                | `/b?/`               | a`b`                    |\n| b                 | `/a?/`               | ` `b                    |\n| car               | `/ca?r/`             | `car`                   |\n| cr                | `/ca?r/`             | `cr`                    |\n| run               | `/r.n/`              | `run`                   |\n| fun               | `/^.un/`             | `fun`                   |\n| sun               | `/sun$/`             | `sun`                   |\n| aaab              | `/a*b/`              | `aaab`                  |\n| aaab              | `/a+b/`              | `aaab`                  |\n| ab                | `/ab?/`              | `ab`                    |\n| a                 | `/ab?/`              | `a`                     |\n| abc               | `/.*c/`              | `abc`                   |</md></sn>","topic_id":988,"last_visited":"2025-05-07T03:25:31.847Z"}],"chapter_id":253},{"chapter_name":"03.Character Classes","topics":[{"topic_name":"01.Square Bracket","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  `[]` in Regex – Character Class Brackets\n---\nSquare brackets `[]` define a **character class** in regular expressions. They match **one character** from the set inside.\n\n---\n\n### ✅ Basic Usage\n\n```regex\n[abc]\n```\n\nMatches **a**, **b**, or **c** — only **one character** from the set.\n\n---\n\n### 📚 Common Patterns\n\n| Pattern    | Meaning                                               | Matches                 |\n| ---------- | ----------------------------------------------------- | ----------------------- |\n| `[aeiou]`  | Any **vowel**                                         | `\"cat\"` → `a`           |\n| `[0-9]`    | Any **digit** from 0–9                                | `\"x4y\"` → `4`           |\n| `[A-Z]`    | Any **uppercase** letter                              | `\"Go\"` → `G`            |\n| `[a-zA-Z]` | Any **letter**, upper or lower                        | `\"Hi!\"` → `H`, `i`      |\n| `[^abc]`   | **Negated set** – any character **except** a, b, or c | `\"dog\"` → `d`, `o`, `g` |\n\n---\n\nNote:\n- [abcdefghijklmnopqrtsuvwxyz] = [a-z] which return matches 1 character from the class\n- [abcdef...z0123456789] = [a-z0-9] which also return 1 matches from the class\n\n\n\n### 🧪 Special Cases\n\n* `[.]` — Matches a **literal period** `.`, not any character (unlike `.` alone).\n* `[-]` — Matches a literal hyphen if placed **first or last**: `[-ab]` or `[ab-]`\n* `[a-z0-9_]` — Custom sets: letters, digits, and underscore.\n\n---\n\n### 🔁 Example\n\n-  X5 is valid\n- */[A-Z][0-9]/*\n- `X5` is valid</md></sn>","topic_id":989,"last_visited":"2025-05-07T03:57:29.443Z"},{"topic_name":"02.Character Ranges","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Character Ranges**\n---\nIn regex, a **character class** defined with square brackets `[]` lets you match **any one character** from a specified set or range.\n\n####  Ranges in Character Classes\n\nA **range** in a character class uses a **hyphen (-)** to define a continuous set of characters.\n\n####  Common Range Examples\n\n| Pattern       | Matches                                |\n| ------------- | -------------------------------------- |\n| `[a-z]`       | any lowercase letter from **a to z** which is equivalent to [abcdef...z]   |\n| `[A-Z]`       | any uppercase letter from **A to Z**   |\n| `[0-9]`       | any digit from **0 to 9**              |\n| `[a-zA-Z]`    | any **letter**, lowercase or uppercase |\n| `[0-9a-fA-F]` | any **hex digit**                      |\n\n#### ⚠️ Notes\n\n* Order does **not matter**: `[a-z]` is the same as `[z-a]` (though `[z-a]` is not recommended).\n* You can **combine** ranges with specific characters: `[a-z0-9_.]` matches lowercase letters, digits, underscore, or dot.\n\n#### 🧪 Example\n\n#### Regex Pattern: `[A-F0-3]`\n\n**Matches any one character** that is:\n\n* A, B, C, D, E, F\n* 0, 1, 2, or 3\n\n✅ Matches: `\"B\"`, `\"2\"`\n\n❌ Doesn't match: `\"G\"`, `\"4\"`</md><br></sn><sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✅ 1. **Unicode Code Point Ranges**\n\nYou can match characters based on Unicode **code point ranges** using `\\uXXXX` or `\\x{XXXX}` (in Unicode-aware mode):\n\n#### JavaScript / PCRE (with `u` flag)\n\n```regex\n[\\u0400-\\u04FF]         // Cyrillic block\n[\\u3040-\\u309F]         // Hiragana block\n```\n\n#### With Unicode code point escape (e.g., Python, JavaScript with `u` flag)\n\n```regex\n[\\x{0370}-\\x{03FF}]     // Greek and Coptic\n```\n\n---\n\n### ✅ 2. **Unicode Character Categories/Properties**\n\nIn Unicode-aware engines (like Python `re` with `re.UNICODE`, or JavaScript with `u` flag), you can match characters by **category**, **script**, or **block**.\n\n#### Examples (in PCRE, Python with `regex` module, .NET):\n\n```regex\n\\p{L}       // Any kind of letter\n\\p{Ll}      // Lowercase letters\n\\p{Lu}      // Uppercase letters\n\\p{N}       // Any kind of number\n\\p{Script=Greek}  // Greek script\n\\p{Block=Cyrillic} // Cyrillic block\n```\n\nTo negate:\n\n```regex\n\\P{L}       // Anything that is not a letter\n```\n\n✅ **Use cases:**\n\n* `\\p{Han}` — Chinese characters\n* `\\p{Devanagari}` — Devanagari script\n* `\\p{Emoji}` — Emojis (some engines support this)\n\n---\n\n### 🛠 Engine Support\n\n| Feature                | PCRE | Java | .NET | Python (`regex` module) | JavaScript   |\n| ---------------------- | ---- | ---- | ---- | ----------------------- | ------------ |\n| `\\p{Property}` syntax  | ✅    | ✅    | ✅    | ✅ (via `regex` module)  | ✅ (with `u`) |\n| Named blocks/scripts   | ✅    | ✅    | ✅    | ✅                       | ❌ (limited)  |\n| Unicode range `\\uXXXX` | ✅    | ✅    | ✅    | ✅                       | ✅            |\n</md><br></sn>","topic_id":990,"last_visited":"2025-05-07T05:22:58.268Z"},{"topic_name":"03.Negation","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✅ **Basic Syntax**\n\n```regex\n[^...]\n```\n\n* The `^` at the beginning **negates** the character class.\n* It means: **match any character except those listed**.\n\n---\n\n### 🔹 **Examples**\n\n| Regex          | Matches                                    |\n| -------------- | ------------------------------------------ |\n| `[^a-z]`       | Any character **except** lowercase letters |\n| `[^0-9]`       | Any character **except** digits            |\n| `[^aeiou]`     | Any character **except** vowels            |\n| `[^A-Za-z0-9]` | Any character **not alphanumeric**         |\n\n---\n\n### ⚠️ Notes\n\n* The `^` must appear **right after** the opening `[` to indicate negation.\n\n  * ✅ `[^abc]`\n  * ❌ `[a^bc]` — This includes the caret character.\n\n* Escaped characters can be negated too:\n\n  ```regex\n  [^\\s]  // Any non-whitespace character\n  [^\\d]  // Any non-digit\n  [^.]   // Any character except a period\n  ```</md></sn>","topic_id":991,"last_visited":"2025-05-07T05:26:22.192Z"},{"topic_name":"04.Predefined Class","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✅ **Common Predefined Classes**\n---\n| Pattern | Meaning                             | Matches          |\n| ------- | ----------------------------------- | ---------------- |\n| `.`     | Any character except newline (`\\n`) |                  |\n| `\\d`    | Digit                               | `[0-9]`          |\n| `\\D`    | Non-digit                           | `[^0-9]`         |\n| `\\w`    | Word character                      | `[A-Za-z0-9_]`   |\n| `\\W`    | Non-word character                  | `[^A-Za-z0-9_]`  |\n| `\\s`    | Whitespace                          | `[ \\t\\r\\n\\f\\v]`  |\n| `\\S`    | Non-whitespace                      | `[^ \\t\\r\\n\\f\\v]` |\n\n---\n\n### 🔹 **Unicode-Aware Versions** (in some engines)\n\nWith a Unicode flag (`u`) or Unicode-aware engine:\n\n* `\\w` may also match letters like `ñ`, `ç`, `Я`, etc.\n* `\\s` includes Unicode spaces like `\\u00A0`, `\\u2003`, etc.\n\n---\n\n### 🧪 **Example Regex Using Predefined Classes**\n\n```regex\n\\w+     // Matches one or more word characters (like variable names)\n\\d{4}   // Matches exactly four digits\n\\S+     // Matches one or more non-whitespace characters\n```</md></sn>","topic_id":992,"last_visited":"2025-05-07T05:30:29.454Z"}],"chapter_id":254},{"chapter_name":"04.Quantifiers","topics":[{"topic_name":"01.Basic quantifier","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✅ **Basic Quantifiers**\n---\n| Quantifier | Meaning                   | Example  | Matches             |\n| ---------- | ------------------------- | -------- | ------------------- |\n| `*`        | 0 or more times           | `a*`     | `\"\"`, `a`, `aa`     |\n| `+`        | 1 or more times           | `a+`     | `a`, `aa`, not `\"\"` |\n| `?`        | 0 or 1 time               | `a?`     | `\"\"`, `a`           |\n| `{n}`      | Exactly *n* times         | `a{3}`   | `aaa`               |\n| `{n,}`     | *n* or more times         | `a{2,}`  | `aa`, `aaa`...      |\n| `{n,m}`    | Between *n* and *m* times | `a{2,4}` | `aa`, `aaa`, `aaaa` |\n\n---\n\n### 🔹 **Greedy vs Lazy Quantifiers**\n\n| Type   | Pattern | Behavior                      |\n| ------ | ------- | ----------------------------- |\n| Greedy | `.*`    | Matches as much as possible   |\n| Lazy   | `.*?`   | Matches as little as possible |\n\n**Example:**\n\n```regex\n\"aaab\" with pattern \"a+?\" → matches first `a`\n\"aaab\" with pattern \"a+\"  → matches all three `a`s\n```\n\n---\n\n### 🔸 **Use with Groups or Classes**\n\n* `(ab)*` → match zero or more repetitions of `ab`\n* `[a-z]{3}` → exactly 3 lowercase letters\n\n#### Practise\n\n-  a aa anaa aaa aaaaaaaaa\n- /*a*/ :  select exact all a character except n (total 18 matches)\n- /a\\*/ : **\\*** matches its precede token and sequence of token `a` before  between 0 and unlimited times until another token appear.(13 matches)\n    - `a`\n    - (empty string)\n    - `aa`\n    - (empty string)\n    - `a`\n     - (empty string)\n     - `aa`\n     - (empty string)\n     - `aaa`\n     - (empty string)\n     - `aaaaaaaaa`\n     - (empty string)\n- /*a+*/ : **+** metacharacter  matches its before token and sequence of token `a` between 1 and unlimited times until another token appear.(6 matches)\n    - `a`   \n    - `aa`\n    - `a`\n    - `aa`\n    - `aaa`\n    - `aaaaaaaaa`\n\n- /*a?*/ : meta character `?` matches its previous token `a` 0 or 1 times.It matches total 25 matches which includes `a` and `empty string`\n- /*a{2}*/ : {2} this quantifier match exacatly 2 sequence of token `a` .so total matches is 7\n- /*a{2,}*/ : {3,} this quantifier match 3 or more sequence of token `a` .so total matches is 2\n- /*a{2,8}*/ : {2,8} this quantifier match between 2 and 8 sequence of token `a` .so total matches is 4\n\n</md></sn>","topic_id":993,"last_visited":"2025-05-07T06:06:02.298Z"},{"topic_name":"02.Greedy and lazy quantifier","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ✅ **Greedy Quantifiers** (default)\n---\n* Try to **match as much as possible**, while still allowing the overall pattern to succeed.\n\n| Quantifier | Description           |\n| ---------- | --------------------- |\n| `*`        | 0 or more (greedy)    |\n| `+`        | 1 or more (greedy)    |\n| `?`        | 0 or 1 (greedy)       |\n| `{n,m}`    | Between n and m times |\n\n**Example:**\n\n```regex\n\"abc123xyz\" with pattern `.+` → matches the whole string\n```\n\n---\n\n### 💤 **Lazy Quantifiers** (non-greedy)\n\n* Match as **little as possible** while still satisfying the pattern.\n\n| Greedy  | Lazy Equivalent |\n| ------- | --------------- |\n| `*`     | `*?`            |\n| `+`     | `+?`            |\n| `?`     | `??`            |\n| `{n,m}` | `{n,m}?`        |\n\n**Example:**\n\n```regex\n\"&lt;tag&gt;data&lt;/tag&gt;\" with pattern `&lt;.*&gt;` → greedy: matches `&lt;tag&gt;data&lt;/tag&gt;`\n`&lt;.*?&gt;` → lazy: matches `&lt;tag&gt;`\n```\n\n---\n\n### 🔍 Use Case\n\n#### Input:\n\n```html\n&lt;p&gt;First&lt;/p&gt;&lt;p&gt;Second&lt;/p&gt;\n```\n\n#### Pattern:\n\n* Greedy: `&lt;p&gt;.*&lt;/p&gt;` → matches the **entire** string\n* Lazy: `&lt;p&gt;.*?&lt;/p&gt;` → matches each **individual** `&lt;p&gt;` block</md></sn>","topic_id":994,"last_visited":"2025-05-07T06:13:43.123Z"},{"topic_name":"03.Practise","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Greedy vs Lazy**\n---\n### ✅ 1. `.*` vs `.*?`\n\n**Text:**\n`&lt;b&gt;bold&lt;/b&gt;&lt;i&gt;italic&lt;/i&gt;`\n\n* `.*` (greedy):\n  Matches from `&lt;b&gt;` to the end of `&lt;/i&gt;` → `\"&lt;b&gt;bold&lt;/b&gt;&lt;i&gt;italic&lt;/i&gt;\"`\n* `.*?` (lazy):\n  Matches only `&lt;b&gt;bold&lt;/b&gt;`\n\n---\n\n### ✅ 2. `.+` vs `.+?`\n\n**Text:**\n`abc123def`\n\n* Greedy: `.+` → Matches whole string: `\"abc123def\"`\n* Lazy: `.+?` → Matches only `\"a\"` (if part of a larger pattern)\n\n---\n\n### ✅ 3. `a.*b` vs `a.*?b`\n\n**Text:**\n`a1b2a3b`\n\n* Greedy: `a.*b` → Matches `\"a1b2a3b\"`\n* Lazy: `a.*?b` → Matches `\"a1b\"`\n\n---\n\n### ✅ 4. `\".*\"` vs `\".*?\"`\n\n**Text:**\n`He said \"hi\" and then \"bye\".`\n\n* Greedy: `\".*\"` → Matches `\"hi\" and then \"bye\"`\n* Lazy: `\".*?\"` → Matches only `\"hi\"`\n\n---\n\n### ✅ 5. `\\d{2,4}` vs `\\d{2,4}?`\n\n**Text:**\n`123456`\n\n* Greedy: `\\d{2,4}` → Matches `\"1234\"`\n* Lazy: `\\d{2,4}?` → Matches `\"12\"`\n\n---\n\n### ✅ 6. `a.+b` vs `a.+?b`\n\n**Text:**\n`aXYZb123aPQRb`\n\n* Greedy: `a.+b` → `\"aXYZb123aPQRb\"`\n* Lazy: `a.+?b` → `\"aXYZb\"`\n\n---\n\n### ✅ 7. `\\w+` vs `\\w+?`\n\n**Text:**\n`hello123`\n\n* Greedy: `\\w+` → `\"hello123\"`\n* Lazy: `\\w+?` → `\"h\"` (just first character)\n\n---\n\n### ✅ 8. `&lt;div&gt;.*&lt;/div&gt;` vs `&lt;div&gt;.*?&lt;/div&gt;`\n\n**Text:**\n`&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;`\n\n* Greedy: matches one big string: `\"&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;\"`\n* Lazy: matches `\"&lt;div&gt;1&lt;/div&gt;\"` first\n\n---\n\n### ✅ 9. `\".+?\"` vs `\".+\"`\n\n**Text:**\n`\"A\" and \"B\"`\n\n* Greedy: `\".+\"` → `\"A\" and \"B\"`\n* Lazy: `\".+?\"` → `\"A\"`\n\n---\n\n### ✅ 10. `[a-z]{2,5}` vs `[a-z]{2,5}?`\n\n**Text:**\n`abcdef`\n\n* Greedy: `[a-z]{2,5}` → `\"abcde\"`\n* Lazy: `[a-z]{2,5}?` → `\"ab\"`\n</md></sn>","topic_id":995,"last_visited":"2025-05-07T06:21:38.331Z"}],"chapter_id":255},{"chapter_name":"05.Anchors","topics":[],"chapter_id":256},{"chapter_name":"06.Grouping and Capturing","topics":[],"chapter_id":257},{"chapter_name":"07.Alternation","topics":[],"chapter_id":258},{"chapter_name":"08.Escaping Special Characters","topics":[],"chapter_id":259},{"chapter_name":"09.Lookahead and Lookbehind Assertions","topics":[],"chapter_id":260},{"chapter_name":"10.Flags and Modifiers","topics":[],"chapter_id":261},{"chapter_name":"11.Regex in Programming Languages","topics":[],"chapter_id":262},{"chapter_name":"12.Common Regex Patterns","topics":[],"chapter_id":263},{"chapter_name":"13.Regex Debugging and Testing Tools","topics":[],"chapter_id":264},{"chapter_name":"14.Performance Optimization","topics":[],"chapter_id":265},{"chapter_name":"15.Advanced Techniques and Tricks","topics":[],"chapter_id":266},{"chapter_name":"16.Reallife Projects Using Regex","topics":[],"chapter_id":267}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-05-06T09:07:12.031Z","is_private":false,"folder":"Programming","web_url":"https://qdoc.free.nf","last_update_on":"2025-05-07T06:21:43.448Z"}