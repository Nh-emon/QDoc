{"subject_name":"Regex","subject_id":77,"chapters":[{"chapter_name":"00.Overview","topics":[{"topic_name":"tempchapter","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Chapters**\n---\n\n| Chapter No. | Chapter Title                       | Description                                                               |                                    |\n| ----------- | ----------------------------------- | ------------------------------------------------------------------------- | ---------------------------------- |\n| 1           | Introduction to Regex               | 👉 What is Regex, history, uses, and syntax overview                      |                                    |\n| 2           | Basic Regex Syntax                  | 👉 Characters, literals, metacharacters (`.`, `^`, `$`, etc.)             |                                    |\n| 3           | Character Classes                   | 👉 Square brackets `[ ]`, ranges, negation `[^ ]`, predefined classes     |                                    |\n| 4           | Quantifiers                         | 👉 `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}` and their greedy/lazy versions   |                                    |\n| 5           | Anchors                             | 👉 Start `^` and end `$` line anchors, word boundaries `\\b`, `\\B`         |                                    |\n| 6           | Grouping and Capturing              | 👉 Parentheses `()`, non-capturing `(?: )`, backreferences `\\1`, `\\2`     |                                    |\n| 7           | Alternation                         | 👉 Using pipe \\`                                                          | \\` to match one pattern or another |\n| 8           | Escaping Special Characters         | 👉 How to use `\\` to match special characters literally                   |                                    |\n| 9           | Lookahead and Lookbehind Assertions | 👉 Positive &amp; negative lookahead `(?= )`, `(?! )` and lookbehind `(?&lt;= )` |                                    |\n| 10          | Flags and Modifiers                 | 👉 Case-insensitive (`i`), multiline (`m`), global (`g`), dotall (`s`)    |                                    |\n| 11          | Regex in Programming Languages      | 👉 Using regex in JavaScript, Python, PHP, etc.                           |                                    |\n| 12          | Common Regex Patterns               | 👉 Email, phone, URL, IP address, date, etc.                              |                                    |\n| 13          | Regex Debugging and Testing Tools   | 👉 Online tools, regex debuggers, and tips for testing expressions        |                                    |\n| 14          | Performance Optimization            | 👉 Efficient regex writing, avoiding catastrophic backtracking            |                                    |\n| 15          | Advanced Techniques and Tricks      | 👉 Recursive patterns, balancing groups, conditional expressions          |                                    |\n| 16          | Real-life Projects Using Regex      | 👉 Log filtering, data validation, search-replace automation              |                                    |</md></sn>","topic_id":978,"last_visited":"2025-05-06T13:39:32.614Z"}],"chapter_id":251},{"chapter_name":"01.Introduction to Regex","topics":[{"topic_name":"01.What is Regex","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Regex**\n---\n**Regex** (short for **Regular Expression**) is a powerful tool used to match, search, and manipulate text based on specific patterns. It's commonly used in programming, data validation, and text processing.\n\n### 🧠 Basic Concept:\n\nA regex is a string of characters that defines a **search pattern**.\n\n### 📌 Examples:\n\n* `^a` → matches any string that **starts with** \"a\"\n* `\\d` → matches any **digit** (0–9)\n* `\\w+` → matches one or more **word characters**\n* `a.*z` → matches anything that starts with \"a\" and ends with \"z\"\n\n### ✅ Common Uses:\n\n* Validating input (e.g., email, phone number)\n* Searching and replacing text\n* Extracting data from strings\n* Splitting text on complex rules\n\n---\nYou can practise Regex code in [regex101](https://regex101.com/)</md></sn>","topic_id":979,"last_visited":"2025-05-06T13:30:58.455Z"},{"topic_name":"02.History of Regex","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">###  **History of Regular Expressions (Regex)**\n---\n\n**Regular Expressions** were originally developed in the field of formal language theory and later adapted into programming and text processing tools.\n\n---\n\n### 🕰️ Timeline of Regex History:\n\n| Year          | Event / Development                                                                                        |\n| ------------- | ---------------------------------------------------------------------------------------------------------- |\n| **1956**      | Stephen Kleene introduces **regular sets** (precursors to regex) in formal language theory.                |\n| **1968**      | Ken Thompson implements regex in **QED**, a text editor on Unix systems.                                   |\n| **1970s**     | Regex becomes part of **ed** and **grep** on Unix.                                                         |\n| **1980s**     | Regex spreads through **Perl** (created by Larry Wall in 1987) with advanced features.                     |\n| **1990s**     | Regex incorporated into **modern programming languages** like Python, Java, and JavaScript.                |\n| **2000s**     | Libraries and engines like **PCRE (Perl Compatible Regular Expressions)** become standard.                 |\n| **2010s–Now** | Continued improvements in engines like **RE2** (Google), **.NET**, and JavaScript's **ECMAScript RegExp**. |\n\n---\n\n### ⚙️ Comparison of Major Regex Engine Versions\n\n| Feature / Engine           | POSIX | Perl / PCRE | Java | Python | JavaScript (ECMAScript) | .NET |\n| -------------------------- | ----- | ----------- | ---- | ------ | ----------------------- | ---- |\n| **Basic Regex**            | ✅     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Extended Regex**         | ✅     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Lookaheads**             | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Lookbehinds**            | ❌     | ✅           | ✅    | ✅      | ✅ *(since ES2018)*      | ✅    |\n| **Non-Greedy Quantifiers** | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Named Groups**           | ❌     | ✅           | ✅    | ✅      | ✅ *(since ES2018)*      | ✅    |\n| **Unicode Support**        | ❌     | ✅           | ✅    | ✅      | ✅                       | ✅    |\n| **Recursive Patterns**     | ❌     | ✅           | ❌    | ❌      | ❌                       | ✅    |\n| **Atomic Groups**          | ❌     | ✅           | ✅    | ❌      | ❌                       | ✅    |\n\n---\n\n\n### 🔧 Popular Regex Engines Today\n---\n* **PCRE (Perl-Compatible Regular Expressions)** – used in PHP, Apache, R.\n* **RE2** – fast and safe, used by Google.\n* **.NET Regex** – powerful and integrates with C#.\n* **ECMAScript Regex** – used in browsers (JavaScript).\n* **Python's `re` module** – includes many modern features.\n</md></sn>","topic_id":980,"last_visited":"2025-05-06T13:39:15.925Z"},{"topic_name":"03.How Regex Works","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### ⚙️ **How Regex Works**\n\nRegular expressions (regex) work by interpreting a pattern and matching it against text **character by character** using a specialized engine.\n\n---\n\n### 🔄 Step-by-Step Process:\n\n1. **Input**: You provide a **pattern** and a **text** string.\n2. **Compile**: The regex engine compiles the pattern into a set of instructions.\n3. **Scan**: The engine scans the text from left to right.\n4. **Match Process**:\n\n   * Tries to **match the pattern** starting from each character position.\n   * Applies rules like quantifiers (`*`, `+`), character classes (`[a-z]`), anchors (`^`, `$`), etc.\n5. **Return Result**:\n\n   * If a match is found, the engine returns the **matched text** (or just `True`).\n   * If no match is found, it returns `None` (or `False`).\n\n---\n\n### 🧠 Two Major Types of Regex Engines\n\n| Engine Type                                  | Description                                                                            | Example Engines               |\n| -------------------------------------------- | -------------------------------------------------------------------------------------- | ----------------------------- |\n| **NFA (Non-deterministic Finite Automaton)** | Tries **multiple paths** (backtracking). More powerful but slower on complex patterns. | PCRE, Python `re`, JavaScript |\n| **DFA (Deterministic Finite Automaton)**     | Tries only **one path**, faster and no backtracking.                                   | POSIX, Google's RE2           |\n\n---\n\n### 🧪 Example\n\n**Pattern**: `\\d{3}-\\d{2}-\\d{4}`\n**Text**: `\"My SSN is 123-45-6789\"`\n\n**Process**:\n\n* `\\d{3}` matches `123`\n* `-` matches `-`\n* `\\d{2}` matches `45`\n* `-` matches `-`\n* `\\d{4}` matches `6789`\n\n✅ Match found: `123-45-6789`\n\n---\n\n### 📌 Core Components in Regex\n\n| Symbol | Meaning                                    |                        |\n| ------ | ------------------------------------------ | ---------------------- |\n| `.`    | Any character except newline               |                        |\n| `^`    | Start of string                            |                        |\n| `$`    | End of string                              |                        |\n| `*`    | 0 or more times                            |                        |\n| `+`    | 1 or more times                            |                        |\n| `?`    | 0 or 1 time (also makes quantifiers lazy)  |                        |\n| `[]`   | Character class                            |                        |\n| `()`   | Grouping                                   |                        |\n| \\`     | \\`                                         | OR logic (alternation) |\n| `\\d`   | Digit                                      |                        |\n| `\\w`   | Word character (letter, digit, underscore) |                        |\n| `\\s`   | Whitespace                                 |                        |\n\n</md></sn>","topic_id":981,"last_visited":"2025-05-06T13:49:18.559Z"},{"topic_name":"04.Set Up","topic_html":"<sn><md class=\"p-1 p-md-2 my-2\" data-rr=\"true\">### **Regex Set Up**\n\n---\n\n####  **1. In Code Editors**\n\n#####  **VS Code**\n\n* **Search using Regex**:\n\n  * Press `Ctrl + F` or `Ctrl + Shift + F`\n  * Click the `.*` (.\\* icon = regex mode)\n* Example pattern: `\\bword\\b`\n* Extensions:\n\n  * *Regex Previewer*: Live visualization of regex\n  * *Regex Workbench*: Test patterns interactively\n\n#####  **Sublime Text**\n\n* Press `Ctrl + F`, enable the `.*` option (left side of the search bar)\n* Supports full PCRE syntax\n\n##### **Notepad++**\n\n* Press `Ctrl + F` → Select **Search Mode** → Choose **\"Regular expression\"**\n* Use for find/replace using regex\n\n---\n\n#### 🌐 2. **Online Regex Editors (Interactive)**\n\n| Tool            | URL                                        | Features                                                      |\n| --------------- | ------------------------------------------ | ------------------------------------------------------------- |\n| **Regex101**    | [regex101.com](https://regex101.com)       | Explains regex pattern, supports PCRE, Python, JS, and Golang |\n| **RegExr**      | [regexr.com](https://regexr.com)           | Visual, user-friendly with syntax help                        |\n| **RegexPlanet** | [regexplanet.com](https://regexplanet.com) | Language-specific testing                                     |\n| **Debuggex**    | [debuggex.com](https://debuggex.com)       | Diagram-based match flow                                      |\n\n---\n\n#### 💻 3. **In Programming Languages**\n---\n| Language       | Code Example                                                                 |\n| -------------- | ---------------------------------------------------------------------------- |\n| **Python**     | `import re`\n`re.search(r\"\\d+\", \"abc123\")`                                 |\n| **JavaScript** | `let match = \"abc123\".match(/\\d+/);`                                         |\n| **Java**       | `Pattern p = Pattern.compile(\"\\\\d+\");`\n`Matcher m = p.matcher(\"abc123\");` |\n| **C# (.NET)**  | `Regex.Match(\"abc123\", @\"\\d+\");`                                             |\n| **PHP**        | `preg_match(\"/\\d+/\", \"abc123\");`                                             |\n| **Ruby**       | `\"abc123\" =~ /\\d+/`                                                          |\n| **Go**         | `regexp.MustCompile(`\\d+`).FindString(\"abc123\")`                             |\n| **R**          | `grepl(\"\\\\d+\", \"abc123\")`                                                    |\n\n---\n\n#### 📦 Libraries (Advanced Regex Support)\n---\n* **PCRE** (Perl Compatible Regular Expressions) – used in PHP, R\n* **RE2** – used in Golang, designed to be fast and safe\n* **Boost.Regex** – C++ regex support\n</md></sn>","topic_id":982,"last_visited":"2025-05-06T13:56:14.204Z"}],"chapter_id":252},{"chapter_name":"02.Basic Regex Syntax","topics":[],"chapter_id":253},{"chapter_name":"03.Character Classes","topics":[],"chapter_id":254},{"chapter_name":"04.Quantifiers","topics":[],"chapter_id":255},{"chapter_name":"05.Anchors","topics":[],"chapter_id":256},{"chapter_name":"06.Grouping and Capturing","topics":[],"chapter_id":257},{"chapter_name":"07.Alternation","topics":[],"chapter_id":258},{"chapter_name":"08.Escaping Special Characters","topics":[],"chapter_id":259},{"chapter_name":"09.Lookahead and Lookbehind Assertions","topics":[],"chapter_id":260},{"chapter_name":"10.Flags and Modifiers","topics":[],"chapter_id":261},{"chapter_name":"11.Regex in Programming Languages","topics":[],"chapter_id":262},{"chapter_name":"12.Common Regex Patterns","topics":[],"chapter_id":263},{"chapter_name":"13.Regex Debugging and Testing Tools","topics":[],"chapter_id":264},{"chapter_name":"14.Performance Optimization","topics":[],"chapter_id":265},{"chapter_name":"15.Advanced Techniques and Tricks","topics":[],"chapter_id":266},{"chapter_name":"16.Reallife Projects Using Regex","topics":[],"chapter_id":267}],"author":{"login":"Nh-emon","id":146737722,"node_id":"U_kgDOCL8KOg","avatar_url":"https://avatars.githubusercontent.com/u/146737722?v=4","gravatar_id":"","url":"https://api.github.com/users/Nh-emon","html_url":"https://github.com/Nh-emon","followers_url":"https://api.github.com/users/Nh-emon/followers","following_url":"https://api.github.com/users/Nh-emon/following{/other_user}","gists_url":"https://api.github.com/users/Nh-emon/gists{/gist_id}","starred_url":"https://api.github.com/users/Nh-emon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nh-emon/subscriptions","organizations_url":"https://api.github.com/users/Nh-emon/orgs","repos_url":"https://api.github.com/users/Nh-emon/repos","events_url":"https://api.github.com/users/Nh-emon/events{/privacy}","received_events_url":"https://api.github.com/users/Nh-emon/received_events","type":"User","site_admin":false,"name":"Emon","company":null,"blog":"","location":null,"email":null,"hireable":null,"bio":null,"twitter_username":null,"public_repos":20,"public_gists":0,"followers":1,"following":1,"created_at":"2023-10-02T13:07:54Z","updated_at":"2024-08-06T16:33:13Z"},"created_on":"2025-05-06T09:07:12.031Z","is_private":false,"folder":"Programming","web_url":"https://qdoc.free.nf","last_update_on":"2025-05-06T13:57:26.070Z"}