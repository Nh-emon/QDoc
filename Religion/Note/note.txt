function get(el, child) {
    const parentNode = this instanceof HTMLElement ? this : (child ? el : document);
    return parentNode.querySelector(child || el);
}

function getAll(el, child) {
    const parentNode = this instanceof HTMLElement ? this : (child ? el : document);
    return parentNode.querySelectorAll(child || el);
}

function trigger(El, callback) {
    let el = typeof El === 'string' ? get(El) : El;
    el.addEventListener('click', (e) => callback(e, el));
}

function Trigger(El,event,callback){
    let el = typeof El === 'string' ? get(El) : El
    el.addEventListener(`${event}`,(e)=>callback(e,el))        
}

function text(e, t, j) {
    let nodeEl = this instanceof HTMLElement ? this : (typeof e === 'string' ? get(e) : e);
    let nodeText = nodeEl === this ? e : t;
    let join = nodeEl === this ? t : j;
    if (nodeText || nodeText === '') nodeEl.innerText = join ? nodeEl.innerText + nodeText : nodeText;
    else return nodeEl.innerText;
}

function Text(e,t,j){
    let nodeEl = this instanceof HTMLElement ? this : (typeof e === 'string' ? get(e) : e)
    let nodeText = nodeEl === this ? e : t
    let join = nodeEl === this ? t : j
    if(nodeText || nodeText === '') nodeEl.textContent = join ? nodeEl.textContent + nodeText : nodeText
    else return nodeEl.textContent
}

function html(e, h, j) {
    let nodeEl = this instanceof HTMLElement ? this : (typeof e === 'string' ? get(e) : e);
    let nodeHtml = nodeEl === this ? e : h;
    let join = nodeEl === this ? h : j;
    if (nodeHtml || nodeHtml === '') nodeEl.innerHTML = join ? nodeEl.innerHTML + nodeHtml : nodeHtml;
    else return nodeEl.innerHTML;
}

function Html(e, h, j) {
    let nodeEl = this instanceof HTMLElement ? this : (typeof e === 'string' ? get(e) : e);
    let nodeHtml = nodeEl === this ? e : h;
    let join = nodeEl === this ? h : j
    if (nodeHtml || nodeHtml === '') nodeEl.outerHTML = join ? nodeEl.outerHTML + nodeHtml : nodeHtml;
    else return nodeEl.outerHTML;
}


function attr(e, a, v) {
    let nodeEl = this instanceof HTMLElement ? this : (typeof e === 'string' ? get(e) : e);
    let attr = nodeEl === this ? e : a;
    let value = nodeEl === this ? a : v;
    if (value) nodeEl.setAttribute(attr, value);
    else return nodeEl.getAttribute(attr);
}

function rattr(El,attr_name){
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);        
    el.removeAttribute(attr_name || El)
}

function remove(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    el.parentNode.removeChild(el);
}


function  create(type, config, El) {
    let newEl = document.createElement(type);
    if (!config || !El) return newEl;

    const { class: cls, attr: attrs, html: innerHtml, Text: text_content, id,src, height, width, focus } = config;

    if (cls) stdText(cls).split(' ').forEach(c => elClass(newEl, 'add', c));
    if (attrs) stdText(attrs).split(' ').forEach(a => {
        let [key, val] = a.split('=');
        attr(newEl, key, val);
    });

    if (innerHtml) html(newEl, innerHtml);
    if (text_content) text(newEl, text_content);
    if (id) attr(newEl, 'id', id);
    if (src) attr(newEl, 'src', src);
    if (height) newEl.style.height = `${height}px`;
    if (width) newEl.style.width = `${width}px`;
    if (focus) newEl.focus();

    if (this instanceof HTMLElement) {
        let parentEl = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
        parentEl.appendChild(newEl);
    }
    return newEl;
}

function  elClass(El,method,class_name,replace_class){
    let el = typeof El === 'string' ?  get(El) : El
    if(method === 'add'){
        if(!el.classList.contains(class_name)){
            el.classList.add(class_name)
        }
    }else if(method === 'remove'){
        if(el.classList.contains(class_name)){
            el.classList.remove(class_name)
        }
    }else if(method === 'toggle'){
        el.classList.toggle(class_name)
    }else if(method === 'has' || method === 'check'){
        return el.classList.contains(class_name)
    }else if(method === 'replace'){
       el.classList.remove(class_name)
       el.classList.add(replace_class)       
    }
}

function lastChild(El){
    let el = typeof El === 'string' ?  getAll(El) : El    
    if(!el.length === 0) return ;
    return el[el.length-1]
}

function click(El){
    let el = typeof El === 'string' ?  get(El) : El        
    el.click()
}

function hide(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    el.classList.add('d-none');
}

function show(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    el.classList.remove('d-none');
}

function redirectTo(El){
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ?  get(El) : El)        
    if(!el.id) el.attr('id',`el-${Math.floor(Math.random()*1000)}`)
    let link = create('a',{attr:`href=#${el.id}`},document.body)
    click(link)
}


function addSpinner(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    attr(el, 'disabled', 'true');
    el.innerHTML += `<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>`;
}

function removeSpinner(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    el.removeAttribute('disabled');
    const spinner = el.querySelector('.spinner-grow');
    if (spinner) spinner.remove();
}

function addBottomLoading(El, loading_type) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    const loading_class = loading_type === 'once' ? 'load-once' : 'load-infinite';
    el.classList.add('loading', loading_class);
}

function removeBottomLoading(El) {
    let el = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    el.classList.remove('loading', 'load-once', 'load-infinite');
}
function toggleView(El) {
    let el = typeof El === 'string' ? get(El) : El;
    el.classList.toggle('d-none');
}

function htmlToPdf(El, filename) {
    const nodeEl = this instanceof HTMLElement ? this : (typeof El === 'string' ? get(El) : El);
    if (!nodeEl) return;
    const file_name = nodeEl === this ? El : (typeof filename === 'string' && filename.trim() ? filename : 'pdf-file');
    const options = {
        margin: 0.5,
        filename: `${file_name}.pdf`,
        image: { type: 'jpeg', quality: 1.0 },
        html2canvas: { 
            scale: 4, 
            dpi: 300, 
            letterRendering: true, 
            useCORS: true,
            backgroundColor: null 
        },
        jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
    };

    html2pdf?.()
        ?.set(options)
        ?.from(nodeEl)
        ?.save();
}

function stdText(str) {
    let text = this instanceof String ? toString() : str;
    return text.replace(/\s+/g, ' ').trim();
}

function removeSymbol(str){
    let text = this instanceof String ? toString() : str;    
    return text.replace(/[^a-zA-Z0-9. ]/g, '')
}

function purifyURL(input){return encodeURI(input.trim());}

function downloadFile(url, filename = 'downloaded file') {
    return new Promise(async (resolve, reject) => {
        try {
            let response = await fetch(url);
            if (response.ok) {
                let blob = await response.blob();
                let downloadUrl = window.URL.createObjectURL(blob);
                let link = document.createElement('a');
                link.href = downloadUrl;
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                link.remove();
                window.URL.revokeObjectURL(downloadUrl);
                resolve({ status: true });
            } else {
                reject({ error: 'Failed to fetch', status: false });
            }
        } catch (error) {
            reject({ error, status: false });
        }
    });
}


function downloadText(content, fileExt = 'txt', fileName = 'TextFile') {
    const blob = new Blob([content], { type: 'text/plain' });
    let link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${fileName}.${fileExt}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}


function readFileContent(file){
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (event) => resolve(event.target.result);
        reader.onerror = (error) => reject(error);
        reader.readAsText(file);
    });
}

async function  getFetchData(url, options, callback) {
    try {
        let response = await fetch(url, options || {});
        if (!response.ok) {
            callback?.(response);
            return false;
        }
        return await response.json() || false;
    } catch {
        return false;
    }
}




function getFileType(file_name) {
  const file_ext = file_name.split('.').pop().toLowerCase();
  const fileExtension = {
    image: ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'],
    video: ['mp4', 'webm', 'ogg'],
    audio: ['mp3', 'wav', 'ogg', 'aac', 'm4a'],
    pdf: ['pdf'],
    text: ['c', 'h', 'cpp', 'hpp', 'cc', 'cxx', 'hxx', 'java', 'class', 'jar', 'py', 'pyc', 'pyo', 'pyw', 'js', 'mjs', 'jsx', 'ts', 'tsx', 'html', 'htm', 'css', 'php', 'phtml', 'php3', 'php4', 'php5', 'phps', 'rb', 'erb', 'pl', 'pm', 'sh', 'bash', 'zsh', 'r', 'rdata', 'rds', 'sql', 'swift', 'kt', 'kts', 'go', 'rs', 'scala', 'hs', 'lhs', 'cs', 'vb', 'fs', 'm', 'mm', 'f', 'for', 'f90', 'asm', 's', 'pas', 'adb', 'ads', 'vhdl', 'vhd', 'v', 'vh', 'lua', 'tcl', 'dart', 'ex', 'exs', 'erl', 'hrl', 'pl', 'pro', 'cob', 'cbl', 'rkt', 'ji', 'lisp', 'lsp', 'cl', 'scm', 'd', 'groovy', 'rexx', 'rex', 'st', 'vbs', 'ps1', 'coffee', 'ipynb', 'tex', 'sty', 'cls', 'json', 'txt', 'sas', 'scss', 'xml']
};
  return Object.entries(fileExtension).find(([, extensions]) => extensions.includes(file_ext))?.[0];
}


function formatFileSize(bytes){
    const KB = 1024;
    const MB = KB * 1024;
    const GB = MB * 1024;
    return bytes < MB 
        ? (bytes / KB).toFixed(2) + ' KB' 
        : bytes < GB 
        ? (bytes / MB).toFixed(2) + ' MB' 
        : (bytes / GB).toFixed(2) + ' GB';
}



function updatePageAddress(title, url){
    if (title) document.title = title;
    if (url) updateUrl(url);
}


function updateUrl(url){
   let newUrl = window.location.origin + url
   window.history.pushState({path:newUrl},'',newUrl)
}


function getTimeGap(dateFrom){
    let d1 = new Date(dateFrom)
    if(isNaN(d1.getTime())) return ; 
    let d2 = new Date()
    let df_ms = Math.abs(d2-d1)//gap in mili second
    let df_s = Math.floor(df_ms/1000)//gap in second
    let df_mn = Math.floor(df_s/60) //gap in minute
    let df_hr = Math.floor(df_mn/60) //gap in hour
    let df_d = Math.floor(df_hr/24) //gap in day
    let df_yr = d2.getFullYear() - d1.getFullYear()
    let df_mo = (df_yr*12)+(d2.getMonth()-d1.getMonth())
    if(d2.getDate() < d1.getDate()){
        df_mo--
    }
    df_mo = df_mo < 0 ? 0 : df_mo
    let df_gap = 
    df_yr >= 1 ? `${df_yr}yr` :
    df_mo >= 1 ? `${df_mo}mon`:
    df_d  >= 1 ? `${df_d}d`   :
    df_hr >= 1 ? `${df_hr}hr` :
    df_mn >= 1 ? `${df_mn}min`: 'just now'
    return df_gap
}




//register method to element prototype
HTMLElement.prototype.print = print;
HTMLElement.prototype.get = get;        
HTMLElement.prototype.getAll = getAll;                
HTMLElement.prototype.text = text;                
HTMLElement.prototype.Text = Text;                
HTMLElement.prototype.html = html;                
HTMLElement.prototype.Html = Html;                
HTMLElement.prototype.attr = attr;                
HTMLElement.prototype.rattr = rattr;                
HTMLElement.prototype.remove = remove;                
HTMLElement.prototype.create = create;                
HTMLElement.prototype.hide = hide;                
HTMLElement.prototype.show = show;                
HTMLElement.prototype.redirectTo = redirectTo;                
HTMLElement.prototype.addSpinner = addSpinner;                
HTMLElement.prototype.removeSpinner = removeSpinner;                
HTMLElement.prototype.addBottomLoading = addBottomLoading;                
HTMLElement.prototype.removeBottomLoading = removeBottomLoading;                
HTMLElement.prototype.htmlToPdf = htmlToPdf;                
String.prototype.stdText = stdText;                
String.prototype.removeSymbol =removeSymbol;                

// end shortJs


//initialize tooltip 
const tooltipTriggerList = getAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

// initialize popup
const popoverTriggerList = getAll('[data-bs-toggle="popover"]')
const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))


// initialize toast
const toastElList = getAll('.toast')
const toastList = [...toastElList].map(toastEl => new bootstrap.Toast(toastEl,{autohide:true}))

// open toast on button trigger
const toastTrigger = document.getElementById('liveToastBtn')
const toastLiveExample = document.getElementById('liveToast')

let allBtnHasToast = getAll('.btn-has-toast')
allBtnHasToast.forEach(eachBtn=>{
    if(!attr(eachBtn,'data-target-toast')) return ;
    let toastBootstrap = bootstrap.Toast.getOrCreateInstance(get(`#${attr(eachBtn,'data-target-toast')}`))
    trigger(eachBtn,()=>toastBootstrap.show())
})



//ripple
function addRippleEffect(eachBtn,e){
  let clickX =e.clientX 
  let clickY =e.clientY
  let elementFromLeft =e.target.offsetLeft 
  let elementFromTop = e.target.offsetTop
  let rippleX = clickX-elementFromLeft
  let rippleY = clickY-elementFromTop
  let ripple = document.createElement('span')
  ripple.classList.add('ripple')
  ripple.style.top = `${rippleY}px`
  ripple.style.left= `${rippleX}px`          
  eachBtn.appendChild(ripple)
  setTimeout(()=>{ripple.remove()},500)
}

 // ripple Effect
const ripple_buttons = getAll('.has_ripple')
if(ripple_buttons.length > 0){
ripple_buttons.forEach(eachBtn=>{
    trigger(eachBtn,(e)=>addRippleEffect(eachBtn,e))
})
}

function initTabAutoId(tab){
    if(!tab) return ;
    attr(tab,'data-has-auto-id','true')
    let randomNum = Math.round(Math.random()*10000)
    attr(tab,'id',`tab${randomNum}`)
    getAll(tab,'.tab-btn-container .tab-btn').forEach((eachTabBtn,btnIndex)=>{
        attr(eachTabBtn,'id',`tab${randomNum}-btn${btnIndex+1}`)
        attr(eachTabBtn,'data-bs-target',`#tab${randomNum}-pane${btnIndex+1}`)
    })
    getAll(tab,'.tab-content-container .tab-pane').forEach((eachPane,paneIndex)=>{
        attr(eachPane,'id',`tab${randomNum}-pane${paneIndex+1}`)
        attr(eachPane,'aria-labelledby',`#tab${randomNum}-btn${paneIndex+1}`)
    })    
}
    // dynamic id for tab btn and tab pane
    const allTabContainer = getAll('.tab-container');
    if(allTabContainer){
        allTabContainer.forEach((eachContainer,tabIndex)=>{
            if(attr(eachContainer,'data-has-auto-id') === 'true') return ;
            attr(eachContainer,'data-has-auto-id','true')
            getAll(eachContainer,'.tab-btn-container .tab-btn').forEach((eachTabBtn,btnIndex)=>{
                attr(eachTabBtn,'id',`tab${tabIndex+1}-btn${btnIndex+1}`)
                attr(eachTabBtn,'data-bs-target',`#tab${tabIndex+1}-pane${btnIndex+1}`)
            })
            getAll(eachContainer,'.tab-content-container .tab-pane').forEach((eachPane,paneIndex)=>{
                attr(eachPane,'id',`tab${tabIndex+1}-pane${paneIndex+1}`)
                attr(eachPane,'aria-labelledby',`#tab${tabIndex+1}-btn${paneIndex+1}`)
            })
        })
    }

// initialize hightlight js
if(get('code')){hljs.highlightAll();}


// change website theme
const themeBtn = get('#themeChangerBtn');
if (themeBtn) {
    themeBtn.addEventListener('click', () => {
        const currentTheme = attr(document.body,'data-theme') || 'dark';
        themeBtn.className = '';
        themeBtn.classList.add('fa-solid', currentTheme === 'dark' ? 'fa-moon' : 'fa-sun', 'i-btn', 'rounded-circle');
        attr(document.body,'data-theme',currentTheme === 'dark' ? 'light' : 'dark')
        localStorage.BSpageTheme = attr(document.body,'data-theme')
    });
}
function loadPageTheme() {
    const currentTheme = localStorage.BSpageTheme || 'dark';
    themeBtn.className = '';
    themeBtn.classList.add('fa-solid', currentTheme === 'dark' ? 'fa-sun' : 'fa-moon', 'i-btn', 'rounded-circle');
    attr(document.body,'data-theme',currentTheme)
}

loadPageTheme();


//dropdown as select menu 

function initAllSelectMenu(){
 const allDropdownSelectMenu = getAll('.dropdown-menu.dropdown-select-menu')
 if(allDropdownSelectMenu.length === 0) return ;
 allDropdownSelectMenu.forEach(eachMenu=>{
     initSelectMenu(eachMenu.id)    
 })
}


function initSelectMenu(id,callback){
    let targetMenu = get(`#${id}`)
    if(!targetMenu) return ;
    attr(targetMenu,'data-has-auto-id','true')    
    let allMenuItem = getAll(targetMenu,'*[data-value]')
    attr(targetMenu,'data-value',attr(allMenuItem[0],'data-value'))
    allMenuItem.forEach(eachMenuItem=>{
        trigger(eachMenuItem,()=>{
            attr(targetMenu,'data-value',attr(eachMenuItem,'data-value'))
            text(`#${attr(targetMenu,'data-field')}`,eachMenuItem.innerText)
            if(typeof callback !== 'function') return ;
            callback(attr(eachMenuItem,'data-value'))
        })
    })
}

function getSelectMenuValue(id){
    return attr(`#${id}`,'data-value')
}

initAllSelectMenu()
// let menuValue = getSelectMenuValue('exampleMenu')
// end select menu


//initialize one accordion auto id
function setAccordionItemAutoId(Accordion){
    let accordion = typeof Accordion === 'string' ? get(Accordion) : Accordion 
    if (!accordion) return;    
    let randomNumber = Math.round(Math.random()*1000)
    accordion.id = `acr-${randomNumber}`
    let accordionItems = getAll(accordion,'.accordion-item');
    if (!accordionItems || accordionItems.length === 0) return;
    accordionItems.forEach((acr_item, index) => {
        let accordionButton   = get(acr_item,'.accordion-button')
        let accordionCollapse = get(acr_item,'.accordion-collapse')
        if (accordionButton && accordionCollapse) {
            acr_item.id = `${accordion.id}-item${index+1}`
            let acr_item_collapse_id = `${acr_item.id}-collapse`;
            elClass(accordionCollapse,'remove','show')
            accordionCollapse.id = acr_item_collapse_id;
            attr(accordionCollapse,'data-bs-parent',`#acr-${randomNumber}`)
            elClass(accordionButton,'add','collapsed')
            attr(accordionButton,'data-bs-target',`#${acr_item_collapse_id}`)
            attr(accordionButton,'aria-controls',acr_item_collapse_id)
            attr(accordionButton,'aria-expanded','false')
        }
    });
}

//initialize all accordion of a contaner else in document
function initAccordionAutoId(container){
   let allAccordions = container ? getAll(container,'.accordion') : getAll('.accordion')
   if(!allAccordions || allAccordions.length === 0) return ;
   allAccordions.forEach(eachAccordion=>{
    setAccordionItemAutoId(eachAccordion)
   })//end loop
}


initAccordionAutoId()
// end accordion


// start read-more,read-once btn
let allReadOnceBtn = getAll('.btn-read-once')
if(allReadOnceBtn.length > 0){
allReadOnceBtn.forEach(eachReadOnceBtn=>{
    trigger(eachReadOnceBtn,()=>elClass(eachReadOnceBtn,'add','d-none') )
})    
}
// end function

let allReadTwiceBtn = getAll('.btn-read-twice')
if(allReadTwiceBtn.length > 0){
allReadTwiceBtn.forEach(eachBtn=>{
    text(eachBtn,'...read more')
    trigger(eachBtn,()=>{
        text(eachBtn,`${eachBtn.innerText === '...read more' ? '...read less' : '...read more'}`)
     })
})
}
// end fucntion





function BtnActiveEffect(btnContainer){
    if(!btnContainer) return ;
    let elType = attr(btnContainer,'data-eltype') ? attr(btnContainer,'data-eltype') : 'button'
    let btnArr = getAll(btnContainer,elType) 
    if(btnArr.length === 0) return ;
    elClass(btnArr[0],'add','active-btn')
    btnArr.forEach(eachBtn=>{
        trigger(eachBtn,()=>{
            btnArr.forEach(btn=>elClass(btn,'remove','active-btn'))
            elClass(eachBtn,'add','active-btn')
        })
    })
}

let allBtnList = getAll('.btn-list')
if(allBtnList.length > 0){
allBtnList.forEach(eachBtnList=>BtnActiveEffect(eachBtnList))    
}






function initCopyContainer(){
    trigger(document.body,(e,el)=>{
        if(!e.target.classList.contains('copy-btn')) return ;
        let copy_btn = e.target
        let iNode = copy_btn.nodeName === 'I'
        let container = copy_btn.closest('.copy-container')    
        let copy_text = get(container,'.copy-text')            
        copyText(text(copy_text),()=>{
           let oldHtml = iNode ? Html(copy_btn) : html(copy_btn)
           iNode ? Html(copy_btn,`<i class='fa-solid fa-check'></i>`) : html(copy_btn,'copied')
           setTimeout(()=>{
            iNode ? Html(get(container,'i'),oldHtml) : html(copy_btn,oldHtml)
           },2000)
        })//end callback
    })
}

initCopyContainer()


function copyText(text,callback) {
if (navigator.clipboard) {
    navigator.clipboard.writeText(text).then(function() {
        callback?.()
    }).catch(function(err) {
        console.error('Could not copy text: ', err);
    });
}
}



function utf8ToBase64(str) {
    // Encode the string as UTF-8
    let utf8Bytes = new TextEncoder().encode(str);

    // Convert bytes to Base64 using a chunking approach
    let binaryString = '';
    const chunkSize = 0x8000; // Process chunks of 32KB to avoid memory issues

    for (let i = 0; i < utf8Bytes.length; i += chunkSize) {
        const chunk = utf8Bytes.subarray(i, i + chunkSize);
        binaryString += String.fromCharCode.apply(null, chunk);
    }

    // Encode the binary string as Base64
    return btoa(binaryString);
}


function base64ToUtf8(str) {
    // Decode Base64 to a binary string
    let binaryString = atob(str);
    // Convert binary string to a Uint8Array
    let bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    // Decode bytes to a UTF-8 string
    return new TextDecoder().decode(bytes);
}


async function translateLanguage(word,soruce,target,callback){
 let res    = await fetch(`https://api.mymemory.translated.net/get?q=${word}!&langpair=${soruce}|${target}`)
 let result = await res.json()
 if(!res.ok){
    callback()
    return ;
 }
 return res.ok ? result.matches[0].translation : false 
}


function initMediaDownloader(){
let allMediaDownloadLink = getAll('.media-container .media-download-link')
if(allMediaDownloadLink.length === 0) return ;
    allMediaDownloadLink.forEach(eachLink=>{
        trigger(eachLink,async(e)=>{
            e.preventDefault()
            let downloadUrl = attr(eachLink,'data-download-url')
            let file_name = attr(eachLink,'data-file-name')      
            if(!(downloadUrl&&file_name)) return ;
            try{
               let response  = await fetch(downloadUrl)
               if(response.ok){
               let blob = await response.blob()
               let link = document.createElement('a')
               let downloadUrl = window.URL.createObjectURL(blob)
               link.setAttribute('href',downloadUrl)
               link.setAttribute('download',file_name)
               document.body.appendChild(link)
               link.click()
               link.remove()
               window.URL.revokeObjectURL(downloadUrl)
            }
            }catch(err){
              console.log(err)
             }
        })//end trigger
    })//end forEach loop 
}// end function


async function toggleFullscreen() {
    try {
        if (!document.fullscreenElement) {
            // Request fullscreen mode
            await document.documentElement.requestFullscreen();
            console.log("Entered fullscreen mode");
        } else {
            // Exit fullscreen mode
            await document.exitFullscreen();
            console.log("Exited fullscreen mode");
        }
    } catch (err) {
        console.error("Failed to change fullscreen mode:", err);
    }
}

async function startFullscreen() {
    try {
        if (!document.fullscreenElement) {
            // Request fullscreen mode
            await document.documentElement.requestFullscreen();
            console.log("Entered fullscreen mode");
        }
    } catch (err) {
        console.error("Failed to change fullscreen mode:", err);
    }
}

async function endFullscreen() {
    try {
        if (document.fullscreenElement) {
            // Request fullscreen mode
            await document.exitFullscreen();
            console.log("Entered fullscreen mode");
        }
    } catch (err) {
        console.error("Failed to change fullscreen mode:", err);
    }
}



function initMathJax(){
    window.MathJax = {
        loader: {load: ['input/asciimath']},
        asciimath: {
            delimiters: [['`', '`']]
        },
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            tags: 'ams'
            },
            options: {
            ignoreHtmlClass: "tex2jax_ignore",
            processHtmlClass: "tex2jax_process"
            }
        };
}

function initMath(El){
  let el = typeof El === 'string' ? get(El) : El 
  AMprocessNode(el)
}



function Prompt(config, callback) {
    
    let prompt_html, prompt_btns;

    let prompt_title = config.title || 'Prompt';
    let icon = config.icon || 'robot'
    Html('#dynamic-prompt .prompt-icon',`<i class='fa-solid fa-${icon} me-2 prompt-icon'></i>`)
    html('#dynamic-prompt .prompt-title', prompt_title);

    // Trigger modal display
    click('#dynamic-prompt-toggler');

    if(config.type === 'message'){
        prompt_html = `<h4 class='text-center my-auto'>${config.message}</h4>`;
        html('#dynamic-prompt .prompt-container',prompt_html);
        prompt_btns = `<button class="flex-grow-1 btn btn-danger rounded-pill" data-bs-dismiss="modal">close</button>`;        
        html('#dynamic-prompt .modal-footer', prompt_btns);
        return ;
    }


    // Handle 'confirm' type prompt
    if (config.type === 'confirm') {
        prompt_html = `<h4 class='text-center my-auto'>${config.message}</h4>`;
        html('#dynamic-prompt .prompt-container', prompt_html);

        prompt_btns = `
            <button class="flex-grow-1 btn box-hover border rounded-pill text-success" id="confirmPositive">Yes</button>
            <button class="flex-grow-1 btn box-hover border rounded-pill text-danger" data-bs-dismiss="modal" id="confirmNegative">No</button>
        `;
        html('#dynamic-prompt .modal-footer', prompt_btns);

        // Set event listeners for confirm buttons
        get('#confirmPositive').addEventListener('click', () => {
            callback(true);
            click('#dynamic-prompt-toggler');
        }, { once: true });

        get('#confirmNegative').addEventListener('click', () => {
            callback(false);
            click('#dynamic-prompt-toggler');
        }, { once: true });
    }

    // Handle 'input' type prompt
    if (config.type === 'input') {
        // Create input fields based on the provided config
        prompt_html = config.inputs.map((input, idx) => `
            <input class="form-control fx-1-2 mb-2" 
                   type="${input.type || 'text'}" 
                   name="${input.name || `input${idx}`}" 
                   placeholder="${input.placeholder || ''}" 
                   value="${input.value || ''}" 
                   data-require="${input.require || 'true'}">
        `).join('');
        html('#dynamic-prompt .prompt-container', prompt_html);

        // Ensure the input is ready in the DOM before focusing
        setTimeout(() => {
            const firstInput = get('#dynamic-prompt .prompt-container input');
            if (firstInput) {
                firstInput.focus(); // Focus on the first input element
                firstInput.click(); // Optionally click the input element
            }
        }, 100); // Reduced timeout delay for better responsiveness

        prompt_btns = `
            <button id="submitPositive" class="btn box-hover border text-success flex-grow-1">${config.btn_name || 'Submit'}</button>
            <button id="submitNegative" class="btn box-hover text-danger border flex-shrink-0" data-bs-dismiss="modal">Cancel</button>
        `;
        html('#dynamic-prompt .modal-footer', prompt_btns);

        function submitInputs() {
            let result = {}; // Initialize result as an object
            let allInputOk = true;

            // Validate required inputs and collect values
            getAll(`#dynamic-prompt .prompt-container input[data-require='true']`).forEach(input => {
              if (!input.value) {
                allInputOk = false; // Mark as invalid if any required input is empty
              } else {
                result[input.name] = input.value; // Use input.name to create property
              }
             });

            // If all required inputs are valid, trigger callback
            if (allInputOk) {
              callback(result); // Pass the result object with input names and values
              click('#dynamic-prompt-toggler'); // Close the prompt
            }
        }

        // Set event listener for Enter key on all input fields
        getAll('#dynamic-prompt .prompt-container input').forEach((eachInput) => {
            eachInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Prevent default form submission

                    // Call the submitInputs function when Enter is pressed
                    submitInputs();
                }
            });
        });

        // Set event listener for submit button
        get('#submitPositive').addEventListener('click', () => {
            submitInputs();
        }, { once: true });

        // Set event listener for cancel button
        get('#submitNegative').addEventListener('click', () => {
            callback(false);
            click('#dynamic-prompt-toggler');
        }, { once: true });
    }
}




// trigger('#testPromptBtn',()=>{

// let config = {
//     type:'message',
//     message:`No user found <b class='text-info'>Nh_emon</b>`
// }


// let config = {
//     type:'confirm',
//     message:`Delete the subject <span class='text-info underline'>PHP</span> `
// }


// let config = {
//   type:'input',        
//   title:'Rename File',
//   inputs:[
//   {
//     type:'text',
//     name:'renameInput',
//     value:'javascript professional',
//     placeholder:'rename',
//     require:true
//   }
//   ]
// }

// Prompt(config,(result)=>{
//    console.log(result)
// })

// })


